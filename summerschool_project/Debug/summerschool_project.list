
summerschool_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fbc  08009fbc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc4  08009fc4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d70  2000007c  0800a048  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dec  0800a048  00024dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd39  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1e  00000000  00000000  0003fde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00043c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001988  00000000  00000000  000456c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c55  00000000  00000000  00047050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f62f  00000000  00000000  0004cca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f177  00000000  00000000  0006c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b44b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf0  00000000  00000000  0010b49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d2c 	.word	0x08009d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009d2c 	.word	0x08009d2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <lcd_start_write+0x14>)
 800058e:	f001 ffdf 	bl	8002550 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <lcd_end_write>:

static void lcd_end_write(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <lcd_end_write+0x14>)
 80005a6:	f001 ffd3 	bl	8002550 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_start_command>:

static void lcd_start_command(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <lcd_start_command+0x14>)
 80005be:	f001 ffc7 	bl	8002550 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <lcd_start_data>:

static void lcd_start_data(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <lcd_start_data+0x14>)
 80005d6:	f001 ffbb 	bl	8002550 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80005ee:	f7ff ffe1 	bl	80005b4 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <lcd_spi_send_com+0x30>)
 80005fc:	f002 fdff 	bl	80031fe <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d000      	beq.n	800060c <lcd_spi_send_com+0x28>
		while (1) {}
 800060a:	e7fe      	b.n	800060a <lcd_spi_send_com+0x26>
	}
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000f8 	.word	0x200000f8

08000618 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000628:	f7ff ffd0 	bl	80005cc <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lcd_spi_send_data+0x38>)
 8000638:	f002 fde1 	bl	80031fe <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <lcd_spi_send_data+0x30>
			while (1) {}
 8000646:	e7fe      	b.n	8000646 <lcd_spi_send_data+0x2e>
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000f8 	.word	0x200000f8

08000654 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4603      	mov	r3, r0
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
 800066e:	4613      	mov	r3, r2
 8000670:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <lcd_set_window+0xc4>)
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_set_window+0xc8>)
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	733b      	strb	r3, [r7, #12]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4413      	add	r3, r2
 800069c:	3b01      	subs	r3, #1
 800069e:	121b      	asrs	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73bb      	strb	r3, [r7, #14]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	723b      	strb	r3, [r7, #8]
 80006c0:	88bb      	ldrh	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	727b      	strb	r3, [r7, #9]
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	3b01      	subs	r3, #1
 80006ce:	121b      	asrs	r3, r3, #8
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	72bb      	strb	r3, [r7, #10]
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	883b      	ldrh	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80006e6:	202a      	movs	r0, #42	; 0x2a
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff90 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f7ff ff73 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff87 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 800070a:	202c      	movs	r0, #44	; 0x2c
 800070c:	f7ff ff6a 	bl	80005e4 <lcd_spi_send_com>
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	2000009a 	.word	0x2000009a
 800071c:	2000009c 	.word	0x2000009c

08000720 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <lcd_init+0xd4>)
 8000728:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2108      	movs	r1, #8
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <lcd_init+0xd8>)
 8000730:	f001 ff0e 	bl	8002550 <HAL_GPIO_WritePin>
	osDelay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f004 fdef 	bl	8005318 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2108      	movs	r1, #8
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <lcd_init+0xd8>)
 8000740:	f001 ff06 	bl	8002550 <HAL_GPIO_WritePin>
	osDelay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f004 fde7 	bl	8005318 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2108      	movs	r1, #8
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <lcd_init+0xd8>)
 8000750:	f001 fefe 	bl	8002550 <HAL_GPIO_WritePin>
	osDelay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f004 fddf 	bl	8005318 <osDelay>

	numCommands = *ptr++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000764:	e035      	b.n	80007d2 <lcd_init+0xb2>
		cmd = *ptr++;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800078c:	f7ff fefa 	bl	8000584 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff26 	bl	80005e4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	68b8      	ldr	r0, [r7, #8]
 800079e:	f7ff ff3b 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 80007a2:	f7ff fefb 	bl	800059c <lcd_end_write>
		ptr += numArgs;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]

		if (ms) {
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <lcd_init+0xb2>
			ms = *ptr++;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	2bff      	cmp	r3, #255	; 0xff
 80007c2:	d102      	bne.n	80007ca <lcd_init+0xaa>
				ms = 500;
 80007c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c8:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fda3 	bl	8005318 <osDelay>
	while (numCommands--) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	73fa      	strb	r2, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1c4      	bne.n	8000766 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 80007dc:	f7ff fed2 	bl	8000584 <lcd_start_write>
	lcd_set_rotation(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f80b 	bl	80007fc <lcd_set_rotation>
	lcd_end_write();
 80007e6:	f7ff fed9 	bl	800059c <lcd_end_write>

	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08009e14 	.word	0x08009e14
 80007f8:	40020000 	.word	0x40020000

080007fc <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <lcd_set_rotation+0xec>)
 8000814:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <lcd_set_rotation+0xec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d856      	bhi.n	80008cc <lcd_set_rotation+0xd0>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <lcd_set_rotation+0x28>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	0800085b 	.word	0x0800085b
 800082c:	08000881 	.word	0x08000881
 8000830:	080008a7 	.word	0x080008a7
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <lcd_set_rotation+0xf0>)
 800083a:	22a0      	movs	r2, #160	; 0xa0
 800083c:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <lcd_set_rotation+0xfc>)
 800084c:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <lcd_set_rotation+0x100>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <lcd_set_rotation+0x104>)
 8000856:	801a      	strh	r2, [r3, #0]
		break;
 8000858:	e038      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000860:	22a0      	movs	r2, #160	; 0xa0
 8000862:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <lcd_set_rotation+0xf0>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <lcd_set_rotation+0xf8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <lcd_set_rotation+0x104>)
 8000872:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <lcd_set_rotation+0x100>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <lcd_set_rotation+0xfc>)
 800087c:	801a      	strh	r2, [r3, #0]
		break;
 800087e:	e025      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <lcd_set_rotation+0xf0>)
 8000886:	22a0      	movs	r2, #160	; 0xa0
 8000888:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <lcd_set_rotation+0xf4>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <lcd_set_rotation+0xfc>)
 8000898:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <lcd_set_rotation+0x100>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <lcd_set_rotation+0x104>)
 80008a2:	801a      	strh	r2, [r3, #0]
		break;
 80008a4:	e012      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 80008a6:	2368      	movs	r3, #104	; 0x68
 80008a8:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <lcd_set_rotation+0xf4>)
 80008ac:	22a0      	movs	r2, #160	; 0xa0
 80008ae:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <lcd_set_rotation+0xf0>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <lcd_set_rotation+0xf8>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <lcd_set_rotation+0x104>)
 80008be:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <lcd_set_rotation+0x100>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <lcd_set_rotation+0xfc>)
 80008c8:	801a      	strh	r2, [r3, #0]
		break;
 80008ca:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 80008cc:	2036      	movs	r0, #54	; 0x36
 80008ce:	f7ff fe89 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 80008d2:	f107 030f 	add.w	r3, r7, #15
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9d 	bl	8000618 <lcd_spi_send_data>
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000098 	.word	0x20000098
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	2000009e 	.word	0x2000009e
 80008f4:	200000a2 	.word	0x200000a2
 80008f8:	2000009a 	.word	0x2000009a
 80008fc:	200000a3 	.word	0x200000a3
 8000900:	2000009c 	.word	0x2000009c

08000904 <lcd_vline>:
		lcd_spi_send_data(c, 2);
		lcd_end_write();
	}
}

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4604      	mov	r4, r0
 800090c:	4608      	mov	r0, r1
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	4623      	mov	r3, r4
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	4603      	mov	r3, r0
 8000918:	80bb      	strh	r3, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	807b      	strh	r3, [r7, #2]
 800091e:	4613      	mov	r3, r2
 8000920:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000922:	f7ff fe2f 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	88b9      	ldrh	r1, [r7, #4]
 800092a:	88f8      	ldrh	r0, [r7, #6]
 800092c:	2201      	movs	r2, #1
 800092e:	f7ff fe91 	bl	8000654 <lcd_set_window>
	lcd_start_data();
 8000932:	f7ff fe4b 	bl	80005cc <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 8000936:	883b      	ldrh	r3, [r7, #0]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29b      	uxth	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	733b      	strb	r3, [r7, #12]
 8000940:	883b      	ldrh	r3, [r7, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe63 	bl	8000618 <lcd_spi_send_data>
	while (h--);
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	807a      	strh	r2, [r7, #2]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f4      	bne.n	8000946 <lcd_vline+0x42>
	lcd_end_write();
 800095c:	f7ff fe1e 	bl	800059c <lcd_end_write>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	4604      	mov	r4, r0
 8000970:	4608      	mov	r0, r1
 8000972:	4611      	mov	r1, r2
 8000974:	461a      	mov	r2, r3
 8000976:	4623      	mov	r3, r4
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	4603      	mov	r3, r0
 800097c:	80bb      	strh	r3, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
 8000982:	4613      	mov	r3, r2
 8000984:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	f1c3 0301 	rsb	r3, r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	461a      	mov	r2, r3
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	b29b      	uxth	r3, r3
 80009a0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80009a6:	887b      	ldrh	r3, [r7, #2]
 80009a8:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 80009b2:	e071      	b.n	8000a98 <lcd_fill_circle+0x130>
		if (f >= 0) {
 80009b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0e      	blt.n	80009da <lcd_fill_circle+0x72>
			y--;
 80009bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80009c8:	8a7b      	ldrh	r3, [r7, #18]
 80009ca:	3302      	adds	r3, #2
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80009d0:	8afa      	ldrh	r2, [r7, #22]
 80009d2:	8a7b      	ldrh	r3, [r7, #18]
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80009da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	3301      	adds	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80009e6:	8abb      	ldrh	r3, [r7, #20]
 80009e8:	3302      	adds	r3, #2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80009ee:	8afa      	ldrh	r2, [r7, #22]
 80009f0:	8abb      	ldrh	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	82fb      	strh	r3, [r7, #22]
		if (x < (y + 1)) {
 80009f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	db1f      	blt.n	8000a44 <lcd_fill_circle+0xdc>
			lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	8a3b      	ldrh	r3, [r7, #16]
 8000a08:	4413      	add	r3, r2
 8000a0a:	b298      	uxth	r0, r3
 8000a0c:	88ba      	ldrh	r2, [r7, #4]
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	b299      	uxth	r1, r3
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	883b      	ldrh	r3, [r7, #0]
 8000a20:	f7ff ff70 	bl	8000904 <lcd_vline>
			lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8000a24:	88fa      	ldrh	r2, [r7, #6]
 8000a26:	8a3b      	ldrh	r3, [r7, #16]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b298      	uxth	r0, r3
 8000a2c:	88ba      	ldrh	r2, [r7, #4]
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	b299      	uxth	r1, r3
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	883b      	ldrh	r3, [r7, #0]
 8000a40:	f7ff ff60 	bl	8000904 <lcd_vline>
		}
		if (y != py) {
 8000a44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d021      	beq.n	8000a94 <lcd_fill_circle+0x12c>
			lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8000a50:	88fa      	ldrh	r2, [r7, #6]
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	4413      	add	r3, r2
 8000a56:	b298      	uxth	r0, r3
 8000a58:	88ba      	ldrh	r2, [r7, #4]
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	89bb      	ldrh	r3, [r7, #12]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	883b      	ldrh	r3, [r7, #0]
 8000a6c:	f7ff ff4a 	bl	8000904 <lcd_vline>
			lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	897b      	ldrh	r3, [r7, #10]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	b298      	uxth	r0, r3
 8000a78:	88ba      	ldrh	r2, [r7, #4]
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	89bb      	ldrh	r3, [r7, #12]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	f7ff ff3a 	bl	8000904 <lcd_vline>
			py = y;
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8000a94:	8a3b      	ldrh	r3, [r7, #16]
 8000a96:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8000a98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	db87      	blt.n	80009b4 <lcd_fill_circle+0x4c>
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8000aa4:	88f8      	ldrh	r0, [r7, #6]
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b299      	uxth	r1, r3
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	883b      	ldrh	r3, [r7, #0]
 8000aba:	f7ff ff23 	bl	8000904 <lcd_vline>
}
 8000abe:	bf00      	nop
 8000ac0:	371c      	adds	r7, #28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}
	...

08000ac8 <__io_getchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char text[100];

int __io_getchar(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <__io_getchar+0x6c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <__io_getchar+0x70>)
 8000ada:	4413      	add	r3, r2
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <__io_getchar+0x74>)
 8000ade:	6013      	str	r3, [r2, #0]

	while (rx_tail == rx_head) {
 8000ae0:	e00b      	b.n	8000afa <__io_getchar+0x32>
		rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <__io_getchar+0x6c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <__io_getchar+0x70>)
 8000aee:	4413      	add	r3, r2
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <__io_getchar+0x74>)
 8000af2:	6013      	str	r3, [r2, #0]
 		osDelay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f004 fc0f 	bl	8005318 <osDelay>
	while (rx_tail == rx_head) {
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <__io_getchar+0x78>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <__io_getchar+0x74>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d0ed      	beq.n	8000ae2 <__io_getchar+0x1a>
	}

	uint8_t b = *rx_tail;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <__io_getchar+0x78>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	71fb      	strb	r3, [r7, #7]

	if (++rx_tail == (rx_buffer + UART_RX_BUF_SIZE))
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__io_getchar+0x78>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <__io_getchar+0x78>)
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <__io_getchar+0x78>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <__io_getchar+0x7c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d102      	bne.n	8000b28 <__io_getchar+0x60>
		rx_tail = rx_buffer;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <__io_getchar+0x78>)
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__io_getchar+0x70>)
 8000b26:	601a      	str	r2, [r3, #0]

	return (int)b;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000220 	.word	0x20000220
 8000b38:	20000298 	.word	0x20000298
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000004 	.word	0x20000004
 8000b44:	20000360 	.word	0x20000360

08000b48 <__io_putchar>:

int __io_putchar(int ch) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	2364      	movs	r3, #100	; 0x64
 8000b54:	2201      	movs	r2, #1
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <__io_putchar+0x20>)
 8000b58:	f003 f923 	bl	8003da2 <HAL_UART_Transmit>
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000198 	.word	0x20000198

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f000 fde3 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f8a9 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7a:	f000 fa23 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7e:	f000 fa01 	bl	8000f84 <MX_DMA_Init>
  MX_TIM9_Init();
 8000b82:	f000 f971 	bl	8000e68 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8000b86:	f000 f9a9 	bl	8000edc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b8a:	f000 f909 	bl	8000da0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b8e:	f000 f935 	bl	8000dfc <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000b92:	f000 f9cd 	bl	8000f30 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer)) != HAL_OK) {
 8000b96:	22c8      	movs	r2, #200	; 0xc8
 8000b98:	4937      	ldr	r1, [pc, #220]	; (8000c78 <main+0x10c>)
 8000b9a:	4838      	ldr	r0, [pc, #224]	; (8000c7c <main+0x110>)
 8000b9c:	f003 f993 	bl	8003ec6 <HAL_UART_Receive_DMA>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d012      	beq.n	8000bcc <main+0x60>
	  snprintf(text, countof(text), "Error start UART RX %d\n", __LINE__);
 8000ba6:	23b4      	movs	r3, #180	; 0xb4
 8000ba8:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <main+0x114>)
 8000baa:	2164      	movs	r1, #100	; 0x64
 8000bac:	4835      	ldr	r0, [pc, #212]	; (8000c84 <main+0x118>)
 8000bae:	f008 f8f5 	bl	8008d9c <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000bb2:	2164      	movs	r1, #100	; 0x64
 8000bb4:	4833      	ldr	r0, [pc, #204]	; (8000c84 <main+0x118>)
 8000bb6:	f008 f968 	bl	8008e8a <strnlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	4930      	ldr	r1, [pc, #192]	; (8000c84 <main+0x118>)
 8000bc4:	482d      	ldr	r0, [pc, #180]	; (8000c7c <main+0x110>)
 8000bc6:	f003 f8ec 	bl	8003da2 <HAL_UART_Transmit>
	  while (1) {}
 8000bca:	e7fe      	b.n	8000bca <main+0x5e>
  }

  snprintf(text, countof(text), "Start UART RX %d\n", __LINE__);
 8000bcc:	23b9      	movs	r3, #185	; 0xb9
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <main+0x11c>)
 8000bd0:	2164      	movs	r1, #100	; 0x64
 8000bd2:	482c      	ldr	r0, [pc, #176]	; (8000c84 <main+0x118>)
 8000bd4:	f008 f8e2 	bl	8008d9c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000bd8:	2164      	movs	r1, #100	; 0x64
 8000bda:	482a      	ldr	r0, [pc, #168]	; (8000c84 <main+0x118>)
 8000bdc:	f008 f955 	bl	8008e8a <strnlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be8:	4926      	ldr	r1, [pc, #152]	; (8000c84 <main+0x118>)
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <main+0x110>)
 8000bec:	f003 f8d9 	bl	8003da2 <HAL_UART_Transmit>
//  lcd_print("\nNew line!");

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bf0:	f004 fab6 	bl	8005160 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART_LOG */
  muxUART_LOGHandle = osMutexNew(&muxUART_LOG_attributes);
 8000bf4:	4825      	ldr	r0, [pc, #148]	; (8000c8c <main+0x120>)
 8000bf6:	f004 fbaa 	bl	800534e <osMutexNew>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <main+0x124>)
 8000bfe:	6013      	str	r3, [r2, #0]

  /* creation of muxLCD */
  muxLCDHandle = osMutexNew(&muxLCD_attributes);
 8000c00:	4824      	ldr	r0, [pc, #144]	; (8000c94 <main+0x128>)
 8000c02:	f004 fba4 	bl	800534e <osMutexNew>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <main+0x12c>)
 8000c0a:	6013      	str	r3, [r2, #0]

  /* creation of muxUART_WIFI */
  muxUART_WIFIHandle = osMutexNew(&muxUART_WIFI_attributes);
 8000c0c:	4823      	ldr	r0, [pc, #140]	; (8000c9c <main+0x130>)
 8000c0e:	f004 fb9e 	bl	800534e <osMutexNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <main+0x134>)
 8000c16:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUART_TX_WIFI */
  semUART_TX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_TX_WIFI_attributes);
 8000c18:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <main+0x138>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f004 fca4 	bl	800556a <osSemaphoreNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <main+0x13c>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* creation of semUART_RX_WIFI */
  semUART_RX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_RX_WIFI_attributes);
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <main+0x140>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f004 fc9c 	bl	800556a <osSemaphoreNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <main+0x144>)
 8000c36:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskWIFI */
  taskWIFIHandle = osThreadNew(StartTaskWIFI, NULL, &taskWIFI_attributes);
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <main+0x148>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <main+0x14c>)
 8000c3e:	f004 fad9 	bl	80051f4 <osThreadNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <main+0x150>)
 8000c46:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  lcd_init();
 8000c48:	f7ff fd6a 	bl	8000720 <lcd_init>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c4c:	f004 faac 	bl	80051a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("This text is from printf(), %d, %s, %s\n", __LINE__, __FILE__, __FUNCTION__);
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <main+0x154>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <main+0x158>)
 8000c54:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000c58:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <main+0x15c>)
 8000c5a:	f008 f80d 	bl	8008c78 <iprintf>

  while (1)
  {
	  int c = __io_getchar();
 8000c5e:	f7ff ff33 	bl	8000ac8 <__io_getchar>
 8000c62:	4603      	mov	r3, r0
 8000c64:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 1000);
 8000c66:	1d39      	adds	r1, r7, #4
 8000c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <main+0x110>)
 8000c70:	f003 f897 	bl	8003da2 <HAL_UART_Transmit>
  {
 8000c74:	e7f3      	b.n	8000c5e <main+0xf2>
 8000c76:	bf00      	nop
 8000c78:	20000298 	.word	0x20000298
 8000c7c:	20000198 	.word	0x20000198
 8000c80:	08009d94 	.word	0x08009d94
 8000c84:	20000360 	.word	0x20000360
 8000c88:	08009dac 	.word	0x08009dac
 8000c8c:	08009eac 	.word	0x08009eac
 8000c90:	20000284 	.word	0x20000284
 8000c94:	08009ebc 	.word	0x08009ebc
 8000c98:	20000288 	.word	0x20000288
 8000c9c:	08009ecc 	.word	0x08009ecc
 8000ca0:	2000028c 	.word	0x2000028c
 8000ca4:	08009edc 	.word	0x08009edc
 8000ca8:	20000290 	.word	0x20000290
 8000cac:	08009eec 	.word	0x08009eec
 8000cb0:	20000294 	.word	0x20000294
 8000cb4:	08009e88 	.word	0x08009e88
 8000cb8:	080010f9 	.word	0x080010f9
 8000cbc:	20000280 	.word	0x20000280
 8000cc0:	08009efc 	.word	0x08009efc
 8000cc4:	08009dc0 	.word	0x08009dc0
 8000cc8:	08009dd4 	.word	0x08009dd4

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f007 ff2f 	bl	8008b3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <SystemClock_Config+0xcc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d18:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d40:	2319      	movs	r3, #25
 8000d42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d44:	23a8      	movs	r3, #168	; 0xa8
 8000d46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fd71 	bl	800283c <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d60:	f000 f9fe 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 ffd3 	bl	8002d2c <HAL_RCC_ClockConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d8c:	f000 f9e8 	bl	8001160 <Error_Handler>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3750      	adds	r7, #80	; 0x50
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <MX_I2C1_Init+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_I2C1_Init+0x58>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dde:	f001 fbe9 	bl	80025b4 <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 f9ba 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000a4 	.word	0x200000a4
 8000df4:	40005400 	.word	0x40005400
 8000df8:	000186a0 	.word	0x000186a0

08000dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e02:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <MX_SPI1_Init+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e4e:	f002 f94d 	bl	80030ec <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e58:	f000 f982 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000f8 	.word	0x200000f8
 8000e64:	40013000 	.word	0x40013000

08000e68 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000e7c:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <MX_TIM9_Init+0x70>)
 8000e7e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000e82:	f240 3247 	movw	r2, #839	; 0x347
 8000e86:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000e90:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000e94:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000ea4:	f002 fbb2 	bl	800360c <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 f957 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM9_Init+0x6c>)
 8000ebe:	f002 fcfc 	bl	80038ba <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000ec8:	f000 f94a 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000150 	.word	0x20000150
 8000ed8:	40014000 	.word	0x40014000

08000edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_USART1_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f14:	f002 fef8 	bl	8003d08 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f91f 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000198 	.word	0x20000198
 8000f2c:	40011000 	.word	0x40011000

08000f30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_USART6_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART6_UART_Init+0x4c>)
 8000f68:	f002 fece 	bl	8003d08 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 f8f5 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001dc 	.word	0x200001dc
 8000f80:	40011400 	.word	0x40011400

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	203a      	movs	r0, #58	; 0x3a
 8000fac:	f000 fd13 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fb0:	203a      	movs	r0, #58	; 0x3a
 8000fb2:	f000 fd2c 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a3b      	ldr	r2, [pc, #236]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a2d      	ldr	r2, [pc, #180]	; (80010d0 <MX_GPIO_Init+0x10c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_GPIO_Init+0x10c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_GPIO_Init+0x110>)
 8001052:	f001 fa7d 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2158      	movs	r1, #88	; 0x58
 800105a:	481f      	ldr	r0, [pc, #124]	; (80010d8 <MX_GPIO_Init+0x114>)
 800105c:	f001 fa78 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4816      	ldr	r0, [pc, #88]	; (80010d4 <MX_GPIO_Init+0x110>)
 800107a:	f001 f8e5 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 800107e:	2358      	movs	r3, #88	; 0x58
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x114>)
 8001096:	f001 f8d7 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <MX_GPIO_Init+0x118>)
 80010b2:	f001 f8c9 	bl	8002248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2105      	movs	r1, #5
 80010ba:	2028      	movs	r0, #40	; 0x28
 80010bc:	f000 fc8b 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c0:	2028      	movs	r0, #40	; 0x28
 80010c2:	f000 fca4 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400

080010e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <StartTaskWIFI>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskWIFI */
void StartTaskWIFI(void *argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <StartTaskWIFI+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	4618      	mov	r0, r3
 800110a:	f004 f9a6 	bl	800545a <osMutexAcquire>
	  lcd_fill_circle(80, 80, 30, ST77XX_BLACK);
 800110e:	2300      	movs	r3, #0
 8001110:	221e      	movs	r2, #30
 8001112:	2150      	movs	r1, #80	; 0x50
 8001114:	2050      	movs	r0, #80	; 0x50
 8001116:	f7ff fc27 	bl	8000968 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <StartTaskWIFI+0x64>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f9e6 	bl	80054f0 <osMutexRelease>
	  osDelay(300);
 8001124:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001128:	f004 f8f6 	bl	8005318 <osDelay>

	  osMutexAcquire(muxLCDHandle, osWaitForever);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <StartTaskWIFI+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	4618      	mov	r0, r3
 8001136:	f004 f990 	bl	800545a <osMutexAcquire>
	  lcd_fill_circle(80, 80, 30, ST77XX_RED);
 800113a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800113e:	221e      	movs	r2, #30
 8001140:	2150      	movs	r1, #80	; 0x50
 8001142:	2050      	movs	r0, #80	; 0x50
 8001144:	f7ff fc10 	bl	8000968 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <StartTaskWIFI+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f004 f9cf 	bl	80054f0 <osMutexRelease>
	  osDelay(300);
 8001152:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001156:	f004 f8df 	bl	8005318 <osDelay>
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 800115a:	e7d1      	b.n	8001100 <StartTaskWIFI+0x8>
 800115c:	20000288 	.word	0x20000288

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_MspInit+0x54>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <HAL_MspInit+0x54>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x54>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_MspInit+0x54>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_MspInit+0x54>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_MspInit+0x54>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210f      	movs	r1, #15
 80011ae:	f06f 0001 	mvn.w	r0, #1
 80011b2:	f000 fc10 	bl	80019d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_I2C_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12c      	bne.n	8001240 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_I2C_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_I2C_MspInit+0x88>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_I2C_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001208:	2312      	movs	r3, #18
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001214:	2304      	movs	r3, #4
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <HAL_I2C_MspInit+0x8c>)
 8001220:	f001 f812 	bl	8002248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_I2C_MspInit+0x88>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_I2C_MspInit+0x88>)
 800122e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_I2C_MspInit+0x88>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40005400 	.word	0x40005400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_SPI_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12b      	bne.n	80012ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_SPI_MspInit+0x88>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_SPI_MspInit+0x88>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_SPI_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 80012ae:	23a0      	movs	r3, #160	; 0xa0
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012be:	2305      	movs	r3, #5
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 80012ca:	f000 ffbd 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40013000 	.word	0x40013000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d115      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2105      	movs	r1, #5
 8001316:	2018      	movs	r0, #24
 8001318:	f000 fb5d 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800131c:	2018      	movs	r0, #24
 800131e:	f000 fb76 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40014000 	.word	0x40014000
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_UART_MspInit+0x158>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d15c      	bne.n	8001410 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_UART_MspInit+0x15c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a45      	ldr	r2, [pc, #276]	; (8001490 <HAL_UART_MspInit+0x15c>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139e:	2307      	movs	r3, #7
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	483a      	ldr	r0, [pc, #232]	; (8001494 <HAL_UART_MspInit+0x160>)
 80013aa:	f000 ff4d 	bl	8002248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013b0:	4a3a      	ldr	r2, [pc, #232]	; (800149c <HAL_UART_MspInit+0x168>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b35      	ldr	r3, [pc, #212]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013f2:	4829      	ldr	r0, [pc, #164]	; (8001498 <HAL_UART_MspInit+0x164>)
 80013f4:	f000 fb26 	bl	8001a44 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80013fe:	f7ff feaf 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a24      	ldr	r2, [pc, #144]	; (8001498 <HAL_UART_MspInit+0x164>)
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_UART_MspInit+0x164>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800140e:	e039      	b.n	8001484 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART6)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_UART_MspInit+0x16c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d134      	bne.n	8001484 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART6_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x15c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x15c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_MspInit+0x15c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001452:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001464:	2308      	movs	r3, #8
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <HAL_UART_MspInit+0x170>)
 8001470:	f000 feea 	bl	8002248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2105      	movs	r1, #5
 8001478:	2047      	movs	r0, #71	; 0x47
 800147a:	f000 faac 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800147e:	2047      	movs	r0, #71	; 0x47
 8001480:	f000 fac5 	bl	8001a0e <HAL_NVIC_EnableIRQ>
}
 8001484:	bf00      	nop
 8001486:	3730      	adds	r7, #48	; 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40011000 	.word	0x40011000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400
 8001498:	20000220 	.word	0x20000220
 800149c:	40026440 	.word	0x40026440
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40020000 	.word	0x40020000

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f982 	bl	80017e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014dc:	f006 f896 	bl	800760c <xTaskGetSchedulerState>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014e6:	f006 ff7f 	bl	80083e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80014f6:	f002 f8d8 	bl	80036aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000150 	.word	0x20000150

08001504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001508:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800150c:	f001 f83a 	bl	8002584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <DMA2_Stream2_IRQHandler+0x10>)
 800151a:	f000 fc2b 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000220 	.word	0x20000220

08001528 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <USART6_IRQHandler+0x10>)
 800152e:	f002 fcfb 	bl	8003f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001dc 	.word	0x200001dc

0800153c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800154e:	f7ff fabb 	bl	8000ac8 <__io_getchar>
 8001552:	4601      	mov	r1, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf0      	blt.n	800154e <_read+0x12>
	}

return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e009      	b.n	800159c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fad9 	bl	8000b48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf1      	blt.n	8001588 <_write+0x12>
	}
	return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_close>:

int _close(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d6:	605a      	str	r2, [r3, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_isatty>:

int _isatty(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	return 1;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f007 f948 	bl	80088dc <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20010000 	.word	0x20010000
 8001678:	00000400 	.word	0x00000400
 800167c:	200003c4 	.word	0x200003c4
 8001680:	20004df0 	.word	0x20004df0

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <HAL_UART_TxCpltCallback>:
extern osSemaphoreId_t semUART_RX_WIFIHandle;

static char tx_buffer[128];
static char rx_buffer[128];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(semUART_TX_WIFIHandle);
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_UART_TxCpltCallback+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 ffe1 	bl	800567c <osSemaphoreRelease>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000290 	.word	0x20000290

080016c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(semUART_RX_WIFIHandle);
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_UART_RxCpltCallback+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 ffd1 	bl	800567c <osSemaphoreRelease>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000294 	.word	0x20000294

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001704:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001712:	f7ff ffb7 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f007 f9dd 	bl	8008ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff fa27 	bl	8000b6c <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800172c:	08009fcc 	.word	0x08009fcc
  ldr r2, =_sbss
 8001730:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001734:	20004dec 	.word	0x20004dec

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f92b 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fcfc 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f943 	bl	8001a2a <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f90b 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000010 	.word	0x20000010
 80017dc:	2000000c 	.word	0x2000000c

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000010 	.word	0x20000010
 8001804:	200003c8 	.word	0x200003c8

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200003c8 	.word	0x200003c8

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff feda 	bl	8001808 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e099      	b.n	8001b94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	e00f      	b.n	8001aa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff fec1 	bl	8001808 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d908      	bls.n	8001aa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e078      	b.n	8001b94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e8      	bne.n	8001a82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_DMA_Init+0x158>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d107      	bne.n	8001b0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4313      	orrs	r3, r2
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f023 0307 	bic.w	r3, r3, #7
 8001b22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d117      	bne.n	8001b66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fb01 	bl	8002150 <DMA_CheckFifoParam>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b62:	2301      	movs	r3, #1
 8001b64:	e016      	b.n	8001b94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fab8 	bl	80020e4 <DMA_CalcBaseAndBitshift>
 8001b74:	4603      	mov	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	f010803f 	.word	0xf010803f

08001ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_DMA_Start_IT+0x26>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e040      	b.n	8001c48 <HAL_DMA_Start_IT+0xa8>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d12f      	bne.n	8001c3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fa4a 	bl	8002088 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	223f      	movs	r2, #63	; 0x3f
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0216 	orr.w	r2, r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0208 	orr.w	r2, r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e005      	b.n	8001c46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c5e:	f7ff fdd3 	bl	8001808 <HAL_GetTick>
 8001c62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d008      	beq.n	8001c82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e052      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0216 	bic.w	r2, r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_DMA_Abort+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	e013      	b.n	8001cfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd4:	f7ff fd98 	bl	8001808 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d90c      	bls.n	8001cfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e015      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	223f      	movs	r2, #63	; 0x3f
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00c      	b.n	8001d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d80:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_DMA_IRQHandler+0x248>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a8e      	ldr	r2, [pc, #568]	; (8001fc0 <HAL_DMA_IRQHandler+0x24c>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0a9b      	lsrs	r3, r3, #10
 8001d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2208      	movs	r2, #8
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01a      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0204 	bic.w	r2, r2, #4
 8001dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2208      	movs	r2, #8
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d012      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2201      	movs	r2, #1
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2204      	movs	r2, #4
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2210      	movs	r2, #16
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d043      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03c      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2210      	movs	r2, #16
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d018      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d024      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
 8001ea2:	e01f      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
 8001eb4:	e016      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0208 	bic.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2220      	movs	r2, #32
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 808f 	beq.w	8002014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8087 	beq.w	8002014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d136      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0216 	bic.w	r2, r2, #22
 8001f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_DMA_IRQHandler+0x1da>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0208 	bic.w	r2, r2, #8
 8001f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07e      	beq.n	8002080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
        }
        return;
 8001f8a:	e079      	b.n	8002080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d031      	beq.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
 8001fb8:	e02c      	b.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d023      	beq.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e01e      	b.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0210 	bic.w	r2, r2, #16
 8001ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	2b00      	cmp	r3, #0
 800201a:	d032      	beq.n	8002082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d022      	beq.n	800206e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2205      	movs	r2, #5
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3301      	adds	r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d307      	bcc.n	800205c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f2      	bne.n	8002040 <HAL_DMA_IRQHandler+0x2cc>
 800205a:	e000      	b.n	800205e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800205c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
 800207e:	e000      	b.n	8002082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002080:	bf00      	nop
    }
  }
}
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d108      	bne.n	80020c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020c6:	e007      	b.n	80020d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3b10      	subs	r3, #16
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <DMA_CalcBaseAndBitshift+0x64>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <DMA_CalcBaseAndBitshift+0x68>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d909      	bls.n	8002126 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	1d1a      	adds	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
 8002124:	e007      	b.n	8002136 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	aaaaaaab 	.word	0xaaaaaaab
 800214c:	08009f1c 	.word	0x08009f1c

08002150 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11f      	bne.n	80021aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d856      	bhi.n	800221e <DMA_CheckFifoParam+0xce>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <DMA_CheckFifoParam+0x28>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	08002189 	.word	0x08002189
 800217c:	0800219b 	.word	0x0800219b
 8002180:	08002189 	.word	0x08002189
 8002184:	0800221f 	.word	0x0800221f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d046      	beq.n	8002222 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002198:	e043      	b.n	8002222 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a2:	d140      	bne.n	8002226 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e03d      	b.n	8002226 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b2:	d121      	bne.n	80021f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d837      	bhi.n	800222a <DMA_CheckFifoParam+0xda>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <DMA_CheckFifoParam+0x70>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021d7 	.word	0x080021d7
 80021c8:	080021d1 	.word	0x080021d1
 80021cc:	080021e9 	.word	0x080021e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
      break;
 80021d4:	e030      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d025      	beq.n	800222e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e6:	e022      	b.n	800222e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f0:	d11f      	bne.n	8002232 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021f6:	e01c      	b.n	8002232 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d903      	bls.n	8002206 <DMA_CheckFifoParam+0xb6>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d003      	beq.n	800220c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002204:	e018      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      break;
 800220a:	e015      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	e00b      	b.n	8002236 <DMA_CheckFifoParam+0xe6>
      break;
 800221e:	bf00      	nop
 8002220:	e00a      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e008      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e006      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e004      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e002      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;   
 8002232:	bf00      	nop
 8002234:	e000      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
    }
  } 
  
  return status; 
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e159      	b.n	8002518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8148 	bne.w	8002512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	2b02      	cmp	r3, #2
 8002298:	d130      	bne.n	80022fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b03      	cmp	r3, #3
 8002306:	d017      	beq.n	8002338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a2 	beq.w	8002512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ea:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x2ec>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	; (8002538 <HAL_GPIO_Init+0x2f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x202>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2f4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x1fe>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_GPIO_Init+0x2f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_GPIO_Init+0x2fc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x1f6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_GPIO_Init+0x300>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x1f2>
 8002436:	2304      	movs	r3, #4
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x204>
 800243a:	2307      	movs	r3, #7
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x204>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x204>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x204>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x204>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x2ec>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <HAL_GPIO_Init+0x304>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a2f      	ldr	r2, [pc, #188]	; (800254c <HAL_GPIO_Init+0x304>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_GPIO_Init+0x304>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_GPIO_Init+0x304>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <HAL_GPIO_Init+0x304>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e2:	4a1a      	ldr	r2, [pc, #104]	; (800254c <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_GPIO_Init+0x304>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250c:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f aea2 	bls.w	8002264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fd9c 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013c00 	.word	0x40013c00

080025b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e12b      	b.n	800281e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fdf2 	bl	80011c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002618:	f000 fd40 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a81      	ldr	r2, [pc, #516]	; (8002828 <HAL_I2C_Init+0x274>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d807      	bhi.n	8002638 <HAL_I2C_Init+0x84>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a80      	ldr	r2, [pc, #512]	; (800282c <HAL_I2C_Init+0x278>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e006      	b.n	8002646 <HAL_I2C_Init+0x92>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a7d      	ldr	r2, [pc, #500]	; (8002830 <HAL_I2C_Init+0x27c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	bf94      	ite	ls
 8002640:	2301      	movls	r3, #1
 8002642:	2300      	movhi	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e7      	b.n	800281e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a78      	ldr	r2, [pc, #480]	; (8002834 <HAL_I2C_Init+0x280>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a6a      	ldr	r2, [pc, #424]	; (8002828 <HAL_I2C_Init+0x274>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d802      	bhi.n	8002688 <HAL_I2C_Init+0xd4>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3301      	adds	r3, #1
 8002686:	e009      	b.n	800269c <HAL_I2C_Init+0xe8>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_I2C_Init+0x284>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	3301      	adds	r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	495c      	ldr	r1, [pc, #368]	; (8002828 <HAL_I2C_Init+0x274>)
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d819      	bhi.n	80026f0 <HAL_I2C_Init+0x13c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e59      	subs	r1, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026d0:	400b      	ands	r3, r1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_I2C_Init+0x138>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1e59      	subs	r1, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ea:	e051      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e04f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_I2C_Init+0x168>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e012      	b.n	8002742 <HAL_I2C_Init+0x18e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x196>
 8002746:	2301      	movs	r3, #1
 8002748:	e022      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_I2C_Init+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e58      	subs	r0, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	440b      	add	r3, r1
 8002760:	fbb0 f3f3 	udiv	r3, r0, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6809      	ldr	r1, [r1, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6911      	ldr	r1, [r2, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	000186a0 	.word	0x000186a0
 800282c:	001e847f 	.word	0x001e847f
 8002830:	003d08ff 	.word	0x003d08ff
 8002834:	431bde83 	.word	0x431bde83
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e267      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00c      	beq.n	8002880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05b      	beq.n	8002944 <HAL_RCC_OscConfig+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e242      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a75      	ldr	r2, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6f      	ldr	r2, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6c      	ldr	r2, [pc, #432]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028d4:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ff88 	bl	8001808 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe ff84 	bl	8001808 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e207      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xc0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe ff74 	bl	8001808 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe ff70 	bl	8001808 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1f3      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0xe8>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c7      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe ff29 	bl	8001808 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe ff25 	bl	8001808 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a8      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe ff08 	bl	8001808 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe ff04 	bl	8001808 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e187      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d036      	beq.n	8002a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe fee8 	bl	8001808 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fee4 	bl	8001808 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e167      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x200>
 8002a5a:	e01b      	b.n	8002a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fed1 	bl	8001808 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e00e      	b.n	8002a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fecd 	bl	8001808 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d907      	bls.n	8002a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e150      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470000 	.word	0x42470000
 8002a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ea      	bne.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8097 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a7c      	ldr	r2, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a73      	ldr	r2, [pc, #460]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fe8d 	bl	8001808 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe fe89 	bl	8001808 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e10c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2ea>
 8002b18:	4b64      	ldr	r3, [pc, #400]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e01c      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x30c>
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5b      	ldr	r2, [pc, #364]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fe4e 	bl	8001808 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fe4a 	bl	8001808 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0cb      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ee      	beq.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe fe38 	bl	8001808 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fe34 	bl	8001808 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0b5      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ee      	bne.n	8002b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a38      	ldr	r2, [pc, #224]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a1 	beq.w	8002d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bda:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d05c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d141      	bne.n	8002c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fe08 	bl	8001808 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fe04 	bl	8001808 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e087      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	491b      	ldr	r1, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fddd 	bl	8001808 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fdd9 	bl	8001808 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e05c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x416>
 8002c70:	e054      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fdc6 	bl	8001808 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fdc2 	bl	8001808 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e045      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
 8002c9e:	e03d      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e038      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d028      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d121      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d111      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fcf4 	bl	8001808 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fcf0 	bl	8001808 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fc54 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08009f04 	.word	0x08009f04
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	2000000c 	.word	0x2000000c

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b090      	sub	sp, #64	; 0x40
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	2300      	movs	r3, #0
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	f200 80a1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x34>
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2a:	e09b      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f30:	e09b      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f32:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f36:	e098      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f42:	4b4d      	ldr	r3, [pc, #308]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	623b      	str	r3, [r7, #32]
 8002f58:	627a      	str	r2, [r7, #36]	; 0x24
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f60:	2100      	movs	r1, #0
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f64:	fb03 f201 	mul.w	r2, r3, r1
 8002f68:	2300      	movs	r3, #0
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a43      	ldr	r2, [pc, #268]	; (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f72:	fba0 1202 	umull	r1, r2, r0, r2
 8002f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f78:	460a      	mov	r2, r1
 8002f7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7e:	4413      	add	r3, r2
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	2200      	movs	r2, #0
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	61fa      	str	r2, [r7, #28]
 8002f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f92:	f7fd f975 	bl	8000280 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f9e:	e053      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	617a      	str	r2, [r7, #20]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fb2:	f04f 0b00 	mov.w	fp, #0
 8002fb6:	4652      	mov	r2, sl
 8002fb8:	465b      	mov	r3, fp
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	0159      	lsls	r1, r3, #5
 8002fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc8:	0150      	lsls	r0, r2, #5
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	ebb2 080a 	subs.w	r8, r2, sl
 8002fd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fe2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fe6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fea:	ebb2 0408 	subs.w	r4, r2, r8
 8002fee:	eb63 0509 	sbc.w	r5, r3, r9
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	00eb      	lsls	r3, r5, #3
 8002ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003000:	00e2      	lsls	r2, r4, #3
 8003002:	4614      	mov	r4, r2
 8003004:	461d      	mov	r5, r3
 8003006:	eb14 030a 	adds.w	r3, r4, sl
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	eb45 030b 	adc.w	r3, r5, fp
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	2200      	movs	r2, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	60fa      	str	r2, [r7, #12]
 8003038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800303c:	f7fd f920 	bl	8000280 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetSysClockFreq+0x184>)
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800306c:	4618      	mov	r0, r3
 800306e:	3740      	adds	r7, #64	; 0x40
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	017d7840 	.word	0x017d7840

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000008 	.word	0x20000008

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08009f14 	.word	0x08009f14

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c8:	f7ff ffdc 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08009f14 	.word	0x08009f14

080030ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07b      	b.n	80031f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d009      	beq.n	8003124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
 8003116:	e005      	b.n	8003124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f888 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0104 	and.w	r1, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 0210 	and.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b088      	sub	sp, #32
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_SPI_Transmit+0x22>
 800321c:	2302      	movs	r3, #2
 800321e:	e126      	b.n	800346e <HAL_SPI_Transmit+0x270>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003228:	f7fe faee 	bl	8001808 <HAL_GetTick>
 800322c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d002      	beq.n	8003244 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003242:	e10b      	b.n	800345c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_SPI_Transmit+0x52>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003254:	e102      	b.n	800345c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329c:	d10f      	bne.n	80032be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d007      	beq.n	80032dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d14b      	bne.n	800337e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Transmit+0xf6>
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d13e      	bne.n	8003372 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003318:	e02b      	b.n	8003372 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d112      	bne.n	800334e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	86da      	strh	r2, [r3, #54]	; 0x36
 800334c:	e011      	b.n	8003372 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800334e:	f7fe fa5b 	bl	8001808 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d803      	bhi.n	8003366 <HAL_SPI_Transmit+0x168>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d102      	bne.n	800336c <HAL_SPI_Transmit+0x16e>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003370:	e074      	b.n	800345c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ce      	bne.n	800331a <HAL_SPI_Transmit+0x11c>
 800337c:	e04c      	b.n	8003418 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_SPI_Transmit+0x18e>
 8003386:	8afb      	ldrh	r3, [r7, #22]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d140      	bne.n	800340e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033b2:	e02c      	b.n	800340e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d113      	bne.n	80033ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033e8:	e011      	b.n	800340e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ea:	f7fe fa0d 	bl	8001808 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d803      	bhi.n	8003402 <HAL_SPI_Transmit+0x204>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d102      	bne.n	8003408 <HAL_SPI_Transmit+0x20a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800340c:	e026      	b.n	800345c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1cd      	bne.n	80033b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f8b3 	bl	8003588 <SPI_EndRxTxTransaction>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e000      	b.n	800345c <HAL_SPI_Transmit+0x25e>
  }

error:
 800345a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800346c:	7ffb      	ldrb	r3, [r7, #31]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003488:	f7fe f9be 	bl	8001808 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4413      	add	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003498:	f7fe f9b6 	bl	8001808 <HAL_GetTick>
 800349c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	015b      	lsls	r3, r3, #5
 80034a4:	0d1b      	lsrs	r3, r3, #20
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ae:	e054      	b.n	800355a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d050      	beq.n	800355a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b8:	f7fe f9a6 	bl	8001808 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d902      	bls.n	80034ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d13d      	bne.n	800354a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e6:	d111      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x94>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	d004      	beq.n	80034fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d107      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d10f      	bne.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e017      	b.n	800357a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3b01      	subs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	429a      	cmp	r2, r3
 8003576:	d19b      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000008 	.word	0x20000008

08003588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <SPI_EndRxTxTransaction+0x7c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <SPI_EndRxTxTransaction+0x80>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0d5b      	lsrs	r3, r3, #21
 80035a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b2:	d112      	bne.n	80035da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff5a 	bl	8003478 <SPI_WaitFlagStateUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d0f2      	beq.n	80035da <SPI_EndRxTxTransaction+0x52>
 80035f4:	e000      	b.n	80035f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80035f6:	bf00      	nop
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000008 	.word	0x20000008
 8003608:	165e9f81 	.word	0x165e9f81

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd fe56 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 fa2e 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d122      	bne.n	8003706 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d11b      	bne.n	8003706 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0202 	mvn.w	r2, #2
 80036d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f9bf 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 80036f2:	e005      	b.n	8003700 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f9b1 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9c2 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d122      	bne.n	800375a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d11b      	bne.n	800375a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0204 	mvn.w	r2, #4
 800372a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f995 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 8003746:	e005      	b.n	8003754 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f987 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f998 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d122      	bne.n	80037ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11b      	bne.n	80037ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0208 	mvn.w	r2, #8
 800377e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2204      	movs	r2, #4
 8003784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f96b 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 800379a:	e005      	b.n	80037a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f95d 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f96e 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d122      	bne.n	8003802 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0210 	mvn.w	r2, #16
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2208      	movs	r2, #8
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f941 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 80037ee:	e005      	b.n	80037fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f933 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f944 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10e      	bne.n	800382e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0201 	mvn.w	r2, #1
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f90d 	bl	8003a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d10e      	bne.n	800385a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d107      	bne.n	800385a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fa4d 	bl	8003cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d10e      	bne.n	8003886 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d107      	bne.n	8003886 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800387e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f909 	bl	8003a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d10e      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d107      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0220 	mvn.w	r2, #32
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa17 	bl	8003ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_ConfigClockSource+0x1c>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e0b4      	b.n	8003a40 <HAL_TIM_ConfigClockSource+0x186>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390e:	d03e      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xd4>
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	f200 8087 	bhi.w	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	f000 8086 	beq.w	8003a2c <HAL_TIM_ConfigClockSource+0x172>
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d87f      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	2b70      	cmp	r3, #112	; 0x70
 8003928:	d01a      	beq.n	8003960 <HAL_TIM_ConfigClockSource+0xa6>
 800392a:	2b70      	cmp	r3, #112	; 0x70
 800392c:	d87b      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 800392e:	2b60      	cmp	r3, #96	; 0x60
 8003930:	d050      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x11a>
 8003932:	2b60      	cmp	r3, #96	; 0x60
 8003934:	d877      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 8003936:	2b50      	cmp	r3, #80	; 0x50
 8003938:	d03c      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0xfa>
 800393a:	2b50      	cmp	r3, #80	; 0x50
 800393c:	d873      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d058      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0x13a>
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d86f      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 8003946:	2b30      	cmp	r3, #48	; 0x30
 8003948:	d064      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x15a>
 800394a:	2b30      	cmp	r3, #48	; 0x30
 800394c:	d86b      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d060      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x15a>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d867      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d05c      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x15a>
 800395a:	2b10      	cmp	r3, #16
 800395c:	d05a      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x15a>
 800395e:	e062      	b.n	8003a26 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6899      	ldr	r1, [r3, #8]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f000 f996 	bl	8003ca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003982:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
      break;
 800398c:	e04f      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f000 f97f 	bl	8003ca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b0:	609a      	str	r2, [r3, #8]
      break;
 80039b2:	e03c      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f000 f8f3 	bl	8003bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2150      	movs	r1, #80	; 0x50
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f94c 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 80039d2:	e02c      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	461a      	mov	r2, r3
 80039e2:	f000 f912 	bl	8003c0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2160      	movs	r1, #96	; 0x60
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f93c 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 80039f2:	e01c      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f000 f8d3 	bl	8003bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2140      	movs	r1, #64	; 0x40
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f92c 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 8003a12:	e00c      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 f923 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 8003a24:	e003      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2a:	e000      	b.n	8003a2e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <TIM_Base_SetConfig+0xe4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00f      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d00b      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <TIM_Base_SetConfig+0xe8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <TIM_Base_SetConfig+0xec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <TIM_Base_SetConfig+0xf0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d108      	bne.n	8003af6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <TIM_Base_SetConfig+0xe4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01b      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d017      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <TIM_Base_SetConfig+0xe8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <TIM_Base_SetConfig+0xec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <TIM_Base_SetConfig+0xf0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <TIM_Base_SetConfig+0xf4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <TIM_Base_SetConfig+0xf8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <TIM_Base_SetConfig+0xfc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <TIM_Base_SetConfig+0xe4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800

08003bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 030a 	bic.w	r3, r3, #10
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b087      	sub	sp, #28
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f023 0210 	bic.w	r2, r3, #16
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	031b      	lsls	r3, r3, #12
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f043 0307 	orr.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e03f      	b.n	8003d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fb00 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 ff5f 	bl	8004c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d17c      	bne.n	8003ebc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_Transmit+0x2c>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e075      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Transmit+0x3e>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e06e      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2221      	movs	r2, #33	; 0x21
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fd fd07 	bl	8001808 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d108      	bne.n	8003e24 <HAL_UART_Transmit+0x82>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e34:	e02a      	b.n	8003e8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fc17 	bl	8004674 <UART_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e036      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e007      	b.n	8003e7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cf      	bne.n	8003e36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fbe7 	bl	8004674 <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d11d      	bne.n	8003f1c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_UART_Receive_DMA+0x26>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e016      	b.n	8003f1e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Receive_DMA+0x38>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e00f      	b.n	8003f1e <HAL_UART_Receive_DMA+0x58>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fc1c 	bl	8004750 <UART_Start_Receive_DMA>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0ba      	sub	sp, #232	; 0xe8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_UART_IRQHandler+0x66>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fd87 	bl	8004a9a <UART_Receive_IT>
      return;
 8003f8c:	e256      	b.n	800443c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80de 	beq.w	8004154 <HAL_UART_IRQHandler+0x22c>
 8003f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80d1 	beq.w	8004154 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xae>
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_UART_IRQHandler+0xd2>
 8003fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_UART_IRQHandler+0xf6>
 8004006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d011      	beq.n	800404e <HAL_UART_IRQHandler+0x126>
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0208 	orr.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 81ed 	beq.w	8004432 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_UART_IRQHandler+0x14e>
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fd12 	bl	8004a9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_UART_IRQHandler+0x17a>
 800409a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04f      	beq.n	8004142 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fc1a 	bl	80048dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d141      	bne.n	800413a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3314      	adds	r3, #20
 80040de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1d9      	bne.n	80040b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2b00      	cmp	r3, #0
 8004108:	d013      	beq.n	8004132 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	4a7d      	ldr	r2, [pc, #500]	; (8004304 <HAL_UART_IRQHandler+0x3dc>)
 8004110:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd fe0a 	bl	8001d30 <HAL_DMA_Abort_IT>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800412c:	4610      	mov	r0, r2
 800412e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	e00e      	b.n	8004150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f990 	bl	8004458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	e00a      	b.n	8004150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f98c 	bl	8004458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	e006      	b.n	8004150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f988 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800414e:	e170      	b.n	8004432 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	bf00      	nop
    return;
 8004152:	e16e      	b.n	8004432 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	f040 814a 	bne.w	80043f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8143 	beq.w	80043f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 813c 	beq.w	80043f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	f040 80b4 	bne.w	8004308 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8140 	beq.w	8004436 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041be:	429a      	cmp	r2, r3
 80041c0:	f080 8139 	bcs.w	8004436 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d6:	f000 8088 	beq.w	80042ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004212:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1d9      	bne.n	80041da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800424e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004252:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800425c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e1      	bne.n	8004226 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004286:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004288:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800428c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ba:	f023 0310 	bic.w	r3, r3, #16
 80042be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e3      	bne.n	80042a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fd fcb3 	bl	8001c50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8b6 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004300:	e099      	b.n	8004436 <HAL_UART_IRQHandler+0x50e>
 8004302:	bf00      	nop
 8004304:	080049a3 	.word	0x080049a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808b 	beq.w	800443a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8086 	beq.w	800443a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004344:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004352:	647a      	str	r2, [r7, #68]	; 0x44
 8004354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e3      	bne.n	800432e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	623b      	str	r3, [r7, #32]
   return(result);
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f83e 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f0:	e023      	b.n	800443a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_UART_IRQHandler+0x4ea>
 80043fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fadd 	bl	80049ca <UART_Transmit_IT>
    return;
 8004410:	e014      	b.n	800443c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <HAL_UART_IRQHandler+0x514>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fb1d 	bl	8004a6a <UART_EndTransmit_IT>
    return;
 8004430:	e004      	b.n	800443c <HAL_UART_IRQHandler+0x514>
    return;
 8004432:	bf00      	nop
 8004434:	e002      	b.n	800443c <HAL_UART_IRQHandler+0x514>
      return;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <HAL_UART_IRQHandler+0x514>
      return;
 800443a:	bf00      	nop
  }
}
 800443c:	37e8      	adds	r7, #232	; 0xe8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop

08004444 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b09c      	sub	sp, #112	; 0x70
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d172      	bne.n	8004586 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a2:	2200      	movs	r2, #0
 80044a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80044c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	667b      	str	r3, [r7, #100]	; 0x64
 80044f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044fa:	647a      	str	r2, [r7, #68]	; 0x44
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	623b      	str	r3, [r7, #32]
   return(result);
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004524:	663b      	str	r3, [r7, #96]	; 0x60
 8004526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800452e:	633a      	str	r2, [r7, #48]	; 0x30
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	2b01      	cmp	r3, #1
 8004550:	d119      	bne.n	8004586 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	60fb      	str	r3, [r7, #12]
   return(result);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004572:	61fa      	str	r2, [r7, #28]
 8004574:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	617b      	str	r3, [r7, #20]
   return(result);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	2b01      	cmp	r3, #1
 800458c:	d106      	bne.n	800459c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004592:	4619      	mov	r1, r3
 8004594:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004596:	f7ff ff69 	bl	800446c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800459a:	e002      	b.n	80045a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800459c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800459e:	f7fd f893 	bl	80016c8 <HAL_UART_RxCpltCallback>
}
 80045a2:	bf00      	nop
 80045a4:	3770      	adds	r7, #112	; 0x70
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d108      	bne.n	80045d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff ff4e 	bl	800446c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045d0:	e002      	b.n	80045d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff36 	bl	8004444 <HAL_UART_RxHalfCpltCallback>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b21      	cmp	r3, #33	; 0x21
 8004612:	d108      	bne.n	8004626 <UART_DMAError+0x46>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2200      	movs	r2, #0
 800461e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	f000 f933 	bl	800488c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b22      	cmp	r3, #34	; 0x22
 8004646:	d108      	bne.n	800465a <UART_DMAError+0x7a>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2200      	movs	r2, #0
 8004652:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004654:	68b8      	ldr	r0, [r7, #8]
 8004656:	f000 f941 	bl	80048dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0210 	orr.w	r2, r3, #16
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004666:	68b8      	ldr	r0, [r7, #8]
 8004668:	f7ff fef6 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b090      	sub	sp, #64	; 0x40
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004684:	e050      	b.n	8004728 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d04c      	beq.n	8004728 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800468e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004694:	f7fd f8b8 	bl	8001808 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d241      	bcs.n	8004728 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046c4:	637a      	str	r2, [r7, #52]	; 0x34
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f8:	623a      	str	r2, [r7, #32]
 80046fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	6a3a      	ldr	r2, [r7, #32]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	61bb      	str	r3, [r7, #24]
   return(result);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e00f      	b.n	8004748 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d09f      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3740      	adds	r7, #64	; 0x40
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b098      	sub	sp, #96	; 0x60
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	; 0x22
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	4a40      	ldr	r2, [pc, #256]	; (8004880 <UART_Start_Receive_DMA+0x130>)
 800477e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	4a3f      	ldr	r2, [pc, #252]	; (8004884 <UART_Start_Receive_DMA+0x134>)
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	4a3e      	ldr	r2, [pc, #248]	; (8004888 <UART_Start_Receive_DMA+0x138>)
 800478e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	2200      	movs	r2, #0
 8004796:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	f7fd f9f6 	bl	8001ba0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d019      	beq.n	800480e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80047fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	657b      	str	r3, [r7, #84]	; 0x54
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800482e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	617b      	str	r3, [r7, #20]
   return(result);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004862:	627a      	str	r2, [r7, #36]	; 0x24
 8004864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6a39      	ldr	r1, [r7, #32]
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3760      	adds	r7, #96	; 0x60
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	08004485 	.word	0x08004485
 8004884:	080045ab 	.word	0x080045ab
 8004888:	080045e1 	.word	0x080045e1

0800488c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	61ba      	str	r2, [r7, #24]
 80048b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	613b      	str	r3, [r7, #16]
   return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80048d0:	bf00      	nop
 80048d2:	3724      	adds	r7, #36	; 0x24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b095      	sub	sp, #84	; 0x54
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004904:	643a      	str	r2, [r7, #64]	; 0x40
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800490a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	61fb      	str	r3, [r7, #28]
   return(result);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3314      	adds	r3, #20
 8004936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	2b01      	cmp	r3, #1
 8004952:	d119      	bne.n	8004988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	60bb      	str	r3, [r7, #8]
   return(result);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f023 0310 	bic.w	r3, r3, #16
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004974:	61ba      	str	r2, [r7, #24]
 8004976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6979      	ldr	r1, [r7, #20]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	613b      	str	r3, [r7, #16]
   return(result);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e5      	bne.n	8004954 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004996:	bf00      	nop
 8004998:	3754      	adds	r7, #84	; 0x54
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fd4b 	bl	8004458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b21      	cmp	r3, #33	; 0x21
 80049dc:	d13e      	bne.n	8004a5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d114      	bne.n	8004a12 <UART_Transmit_IT+0x48>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d110      	bne.n	8004a12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	621a      	str	r2, [r3, #32]
 8004a10:	e008      	b.n	8004a24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	1c59      	adds	r1, r3, #1
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6211      	str	r1, [r2, #32]
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4619      	mov	r1, r3
 8004a32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fe0c 	bl	80016a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08c      	sub	sp, #48	; 0x30
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b22      	cmp	r3, #34	; 0x22
 8004aac:	f040 80ab 	bne.w	8004c06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	d117      	bne.n	8004aea <UART_Receive_IT+0x50>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d113      	bne.n	8004aea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae8:	e026      	b.n	8004b38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afc:	d007      	beq.n	8004b0e <UART_Receive_IT+0x74>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <UART_Receive_IT+0x82>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e008      	b.n	8004b2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4619      	mov	r1, r3
 8004b46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d15a      	bne.n	8004c02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0220 	bic.w	r2, r2, #32
 8004b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d135      	bne.n	8004bf8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	623a      	str	r2, [r7, #32]
 8004bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	69f9      	ldr	r1, [r7, #28]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d10a      	bne.n	8004bea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fc3b 	bl	800446c <HAL_UARTEx_RxEventCallback>
 8004bf6:	e002      	b.n	8004bfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fc fd65 	bl	80016c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e002      	b.n	8004c08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3730      	adds	r7, #48	; 0x30
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b0c0      	sub	sp, #256	; 0x100
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	68d9      	ldr	r1, [r3, #12]
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	ea40 0301 	orr.w	r3, r0, r1
 8004c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c68:	f021 010c 	bic.w	r1, r1, #12
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c76:	430b      	orrs	r3, r1
 8004c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	6999      	ldr	r1, [r3, #24]
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	ea40 0301 	orr.w	r3, r0, r1
 8004c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b8f      	ldr	r3, [pc, #572]	; (8004edc <UART_SetConfig+0x2cc>)
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <UART_SetConfig+0xa0>
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <UART_SetConfig+0x2d0>)
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d104      	bne.n	8004cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fa08 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cb8:	e003      	b.n	8004cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cba:	f7fe f9ef 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ccc:	f040 810c 	bne.w	8004ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cea:	415b      	adcs	r3, r3
 8004cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	eb12 0801 	adds.w	r8, r2, r1
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	eb43 0901 	adc.w	r9, r3, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d12:	4690      	mov	r8, r2
 8004d14:	4699      	mov	r9, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	eb18 0303 	adds.w	r3, r8, r3
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d20:	462b      	mov	r3, r5
 8004d22:	eb49 0303 	adc.w	r3, r9, r3
 8004d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d3e:	460b      	mov	r3, r1
 8004d40:	18db      	adds	r3, r3, r3
 8004d42:	653b      	str	r3, [r7, #80]	; 0x50
 8004d44:	4613      	mov	r3, r2
 8004d46:	eb42 0303 	adc.w	r3, r2, r3
 8004d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d54:	f7fb fa94 	bl	8000280 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4b61      	ldr	r3, [pc, #388]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	011c      	lsls	r4, r3, #4
 8004d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	1891      	adds	r1, r2, r2
 8004d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d80:	415b      	adcs	r3, r3
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d88:	4641      	mov	r1, r8
 8004d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d8e:	4649      	mov	r1, r9
 8004d90:	eb43 0b01 	adc.w	fp, r3, r1
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da8:	4692      	mov	sl, r2
 8004daa:	469b      	mov	fp, r3
 8004dac:	4643      	mov	r3, r8
 8004dae:	eb1a 0303 	adds.w	r3, sl, r3
 8004db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004db6:	464b      	mov	r3, r9
 8004db8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	18db      	adds	r3, r3, r3
 8004dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dda:	4613      	mov	r3, r2
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	647b      	str	r3, [r7, #68]	; 0x44
 8004de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dea:	f7fb fa49 	bl	8000280 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004df6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2264      	movs	r2, #100	; 0x64
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	1acb      	subs	r3, r1, r3
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e18:	441c      	add	r4, r3
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	464b      	mov	r3, r9
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e34:	415b      	adcs	r3, r3
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	1851      	adds	r1, r2, r1
 8004e40:	6339      	str	r1, [r7, #48]	; 0x30
 8004e42:	4649      	mov	r1, r9
 8004e44:	414b      	adcs	r3, r1
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e54:	4659      	mov	r1, fp
 8004e56:	00cb      	lsls	r3, r1, #3
 8004e58:	4651      	mov	r1, sl
 8004e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5e:	4651      	mov	r1, sl
 8004e60:	00ca      	lsls	r2, r1, #3
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e70:	464b      	mov	r3, r9
 8004e72:	460a      	mov	r2, r1
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ea6:	f7fb f9eb 	bl	8000280 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4422      	add	r2, r4
 8004ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed8:	e105      	b.n	80050e6 <UART_SetConfig+0x4d6>
 8004eda:	bf00      	nop
 8004edc:	40011000 	.word	0x40011000
 8004ee0:	40011400 	.word	0x40011400
 8004ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004efa:	4642      	mov	r2, r8
 8004efc:	464b      	mov	r3, r9
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	6239      	str	r1, [r7, #32]
 8004f02:	415b      	adcs	r3, r3
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	1854      	adds	r4, r2, r1
 8004f0e:	4649      	mov	r1, r9
 8004f10:	eb43 0501 	adc.w	r5, r3, r1
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	00eb      	lsls	r3, r5, #3
 8004f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f22:	00e2      	lsls	r2, r4, #3
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	4643      	mov	r3, r8
 8004f2a:	18e3      	adds	r3, r4, r3
 8004f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f30:	464b      	mov	r3, r9
 8004f32:	eb45 0303 	adc.w	r3, r5, r3
 8004f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f56:	4629      	mov	r1, r5
 8004f58:	008b      	lsls	r3, r1, #2
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f60:	4621      	mov	r1, r4
 8004f62:	008a      	lsls	r2, r1, #2
 8004f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f68:	f7fb f98a 	bl	8000280 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4b60      	ldr	r3, [pc, #384]	; (80050f4 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2302 	umull	r2, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	011c      	lsls	r4, r3, #4
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	1891      	adds	r1, r2, r2
 8004f92:	61b9      	str	r1, [r7, #24]
 8004f94:	415b      	adcs	r3, r3
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	1851      	adds	r1, r2, r1
 8004fa0:	6139      	str	r1, [r7, #16]
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	414b      	adcs	r3, r1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	00cb      	lsls	r3, r1, #3
 8004fb8:	4651      	mov	r1, sl
 8004fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	00ca      	lsls	r2, r1, #3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	eb42 0303 	adc.w	r3, r2, r3
 8004fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	008b      	lsls	r3, r1, #2
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffe:	4641      	mov	r1, r8
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005006:	f7fb f93b 	bl	8000280 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <UART_SetConfig+0x4e4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	; 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <UART_SetConfig+0x4e4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502e:	441c      	add	r4, r3
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	673b      	str	r3, [r7, #112]	; 0x70
 8005038:	677a      	str	r2, [r7, #116]	; 0x74
 800503a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800503e:	4642      	mov	r2, r8
 8005040:	464b      	mov	r3, r9
 8005042:	1891      	adds	r1, r2, r2
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	415b      	adcs	r3, r3
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800504e:	4641      	mov	r1, r8
 8005050:	1851      	adds	r1, r2, r1
 8005052:	6039      	str	r1, [r7, #0]
 8005054:	4649      	mov	r1, r9
 8005056:	414b      	adcs	r3, r1
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005066:	4659      	mov	r1, fp
 8005068:	00cb      	lsls	r3, r1, #3
 800506a:	4651      	mov	r1, sl
 800506c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005070:	4651      	mov	r1, sl
 8005072:	00ca      	lsls	r2, r1, #3
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	4603      	mov	r3, r0
 800507a:	4642      	mov	r2, r8
 800507c:	189b      	adds	r3, r3, r2
 800507e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005080:	464b      	mov	r3, r9
 8005082:	460a      	mov	r2, r1
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	663b      	str	r3, [r7, #96]	; 0x60
 8005094:	667a      	str	r2, [r7, #100]	; 0x64
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050a2:	4649      	mov	r1, r9
 80050a4:	008b      	lsls	r3, r1, #2
 80050a6:	4641      	mov	r1, r8
 80050a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ac:	4641      	mov	r1, r8
 80050ae:	008a      	lsls	r2, r1, #2
 80050b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050b4:	f7fb f8e4 	bl	8000280 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <UART_SetConfig+0x4e4>)
 80050be:	fba3 1302 	umull	r1, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2164      	movs	r1, #100	; 0x64
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	3332      	adds	r3, #50	; 0x32
 80050d0:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <UART_SetConfig+0x4e4>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4422      	add	r2, r4
 80050e4:	609a      	str	r2, [r3, #8]
}
 80050e6:	bf00      	nop
 80050e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050ec:	46bd      	mov	sp, r7
 80050ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f2:	bf00      	nop
 80050f4:	51eb851f 	.word	0x51eb851f

080050f8 <__NVIC_SetPriority>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	6039      	str	r1, [r7, #0]
 8005102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005108:	2b00      	cmp	r3, #0
 800510a:	db0a      	blt.n	8005122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	490c      	ldr	r1, [pc, #48]	; (8005144 <__NVIC_SetPriority+0x4c>)
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	0112      	lsls	r2, r2, #4
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	440b      	add	r3, r1
 800511c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005120:	e00a      	b.n	8005138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4908      	ldr	r1, [pc, #32]	; (8005148 <__NVIC_SetPriority+0x50>)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	3b04      	subs	r3, #4
 8005130:	0112      	lsls	r2, r2, #4
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	440b      	add	r3, r1
 8005136:	761a      	strb	r2, [r3, #24]
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	e000e100 	.word	0xe000e100
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005150:	2100      	movs	r1, #0
 8005152:	f06f 0004 	mvn.w	r0, #4
 8005156:	f7ff ffcf 	bl	80050f8 <__NVIC_SetPriority>
#endif
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	603b      	str	r3, [r7, #0]
  return(result);
 800516c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005172:	f06f 0305 	mvn.w	r3, #5
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	e00c      	b.n	8005194 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <osKernelInitialize+0x44>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <osKernelInitialize+0x44>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e002      	b.n	8005194 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005194:	687b      	ldr	r3, [r7, #4]
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	200003cc 	.word	0x200003cc

080051a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ae:	f3ef 8305 	mrs	r3, IPSR
 80051b2:	603b      	str	r3, [r7, #0]
  return(result);
 80051b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051ba:	f06f 0305 	mvn.w	r3, #5
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e010      	b.n	80051e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <osKernelStart+0x48>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d109      	bne.n	80051de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051ca:	f7ff ffbf 	bl	800514c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051ce:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <osKernelStart+0x48>)
 80051d0:	2202      	movs	r2, #2
 80051d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051d4:	f001 fdae 	bl	8006d34 <vTaskStartScheduler>
      stat = osOK;
 80051d8:	2300      	movs	r3, #0
 80051da:	607b      	str	r3, [r7, #4]
 80051dc:	e002      	b.n	80051e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051de:	f04f 33ff 	mov.w	r3, #4294967295
 80051e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051e4:	687b      	ldr	r3, [r7, #4]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	200003cc 	.word	0x200003cc

080051f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	; 0x38
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005204:	f3ef 8305 	mrs	r3, IPSR
 8005208:	617b      	str	r3, [r7, #20]
  return(result);
 800520a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800520c:	2b00      	cmp	r3, #0
 800520e:	d17e      	bne.n	800530e <osThreadNew+0x11a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d07b      	beq.n	800530e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800521a:	2318      	movs	r3, #24
 800521c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d045      	beq.n	80052ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <osThreadNew+0x48>
        name = attr->name;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <osThreadNew+0x6e>
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b38      	cmp	r3, #56	; 0x38
 8005254:	d805      	bhi.n	8005262 <osThreadNew+0x6e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x72>
        return (NULL);
 8005262:	2300      	movs	r3, #0
 8005264:	e054      	b.n	8005310 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <osThreadNew+0xa8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2bbb      	cmp	r3, #187	; 0xbb
 8005284:	d90a      	bls.n	800529c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osThreadNew+0xa8>
        mem = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e010      	b.n	80052be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10c      	bne.n	80052be <osThreadNew+0xca>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <osThreadNew+0xca>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <osThreadNew+0xca>
          mem = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e001      	b.n	80052be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d110      	bne.n	80052e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052cc:	9202      	str	r2, [sp, #8]
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f001 fb3e 	bl	800695c <xTaskCreateStatic>
 80052e0:	4603      	mov	r3, r0
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	e013      	b.n	800530e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f107 0310 	add.w	r3, r7, #16
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f001 fb89 	bl	8006a16 <xTaskCreate>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <osThreadNew+0x11a>
            hTask = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800530e:	693b      	ldr	r3, [r7, #16]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005320:	f3ef 8305 	mrs	r3, IPSR
 8005324:	60bb      	str	r3, [r7, #8]
  return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <osDelay+0x1c>
    stat = osErrorISR;
 800532c:	f06f 0305 	mvn.w	r3, #5
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e007      	b.n	8005344 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <osDelay+0x2c>
      vTaskDelay(ticks);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 fcc4 	bl	8006ccc <vTaskDelay>
    }
  }

  return (stat);
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800534e:	b580      	push	{r7, lr}
 8005350:	b088      	sub	sp, #32
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535a:	f3ef 8305 	mrs	r3, IPSR
 800535e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005360:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005362:	2b00      	cmp	r3, #0
 8005364:	d174      	bne.n	8005450 <osMutexNew+0x102>
    if (attr != NULL) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <osMutexNew+0x26>
      type = attr->attr_bits;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e001      	b.n	8005378 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <osMutexNew+0x3a>
      rmtx = 1U;
 8005382:	2301      	movs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e001      	b.n	800538c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d15c      	bne.n	8005450 <osMutexNew+0x102>
      mem = -1;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d015      	beq.n	80053ce <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d006      	beq.n	80053b8 <osMutexNew+0x6a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b4f      	cmp	r3, #79	; 0x4f
 80053b0:	d902      	bls.n	80053b8 <osMutexNew+0x6a>
          mem = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	e00c      	b.n	80053d2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <osMutexNew+0x84>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <osMutexNew+0x84>
            mem = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	e001      	b.n	80053d2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d112      	bne.n	80053fe <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4619      	mov	r1, r3
 80053e4:	2004      	movs	r0, #4
 80053e6:	f000 fbe4 	bl	8005bb2 <xQueueCreateMutexStatic>
 80053ea:	61f8      	str	r0, [r7, #28]
 80053ec:	e016      	b.n	800541c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	4619      	mov	r1, r3
 80053f4:	2001      	movs	r0, #1
 80053f6:	f000 fbdc 	bl	8005bb2 <xQueueCreateMutexStatic>
 80053fa:	61f8      	str	r0, [r7, #28]
 80053fc:	e00e      	b.n	800541c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800540a:	2004      	movs	r0, #4
 800540c:	f000 fbb9 	bl	8005b82 <xQueueCreateMutex>
 8005410:	61f8      	str	r0, [r7, #28]
 8005412:	e003      	b.n	800541c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005414:	2001      	movs	r0, #1
 8005416:	f000 fbb4 	bl	8005b82 <xQueueCreateMutex>
 800541a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <osMutexNew+0xee>
        if (attr != NULL) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <osMutexNew+0xe2>
          name = attr->name;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e001      	b.n	8005434 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	69f8      	ldr	r0, [r7, #28]
 8005438:	f001 fa08 	bl	800684c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <osMutexNew+0x102>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005450:	69fb      	ldr	r3, [r7, #28]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005478:	f3ef 8305 	mrs	r3, IPSR
 800547c:	60bb      	str	r3, [r7, #8]
  return(result);
 800547e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005484:	f06f 0305 	mvn.w	r3, #5
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e02c      	b.n	80054e6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005492:	f06f 0303 	mvn.w	r3, #3
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e025      	b.n	80054e6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d011      	beq.n	80054c4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f000 fbd4 	bl	8005c50 <xQueueTakeMutexRecursive>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d01b      	beq.n	80054e6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80054b4:	f06f 0301 	mvn.w	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e014      	b.n	80054e6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80054bc:	f06f 0302 	mvn.w	r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e010      	b.n	80054e6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6938      	ldr	r0, [r7, #16]
 80054c8:	f000 ff68 	bl	800639c <xQueueSemaphoreTake>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d009      	beq.n	80054e6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80054d8:	f06f 0301 	mvn.w	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e002      	b.n	80054e6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80054e0:	f06f 0302 	mvn.w	r3, #2
 80054e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80054e6:	697b      	ldr	r3, [r7, #20]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550c:	f3ef 8305 	mrs	r3, IPSR
 8005510:	60bb      	str	r3, [r7, #8]
  return(result);
 8005512:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005518:	f06f 0305 	mvn.w	r3, #5
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e01f      	b.n	8005560 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005526:	f06f 0303 	mvn.w	r3, #3
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e018      	b.n	8005560 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005534:	6938      	ldr	r0, [r7, #16]
 8005536:	f000 fb57 	bl	8005be8 <xQueueGiveMutexRecursive>
 800553a:	4603      	mov	r3, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	d00f      	beq.n	8005560 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005540:	f06f 0302 	mvn.w	r3, #2
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e00b      	b.n	8005560 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005548:	2300      	movs	r3, #0
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f000 fc1e 	bl	8005d90 <xQueueGenericSend>
 8005554:	4603      	mov	r3, r0
 8005556:	2b01      	cmp	r3, #1
 8005558:	d002      	beq.n	8005560 <osMutexRelease+0x70>
        stat = osErrorResource;
 800555a:	f06f 0302 	mvn.w	r3, #2
 800555e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005560:	697b      	ldr	r3, [r7, #20]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800556a:	b580      	push	{r7, lr}
 800556c:	b08a      	sub	sp, #40	; 0x28
 800556e:	af02      	add	r7, sp, #8
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800557a:	f3ef 8305 	mrs	r3, IPSR
 800557e:	613b      	str	r3, [r7, #16]
  return(result);
 8005580:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005582:	2b00      	cmp	r3, #0
 8005584:	d175      	bne.n	8005672 <osSemaphoreNew+0x108>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d072      	beq.n	8005672 <osSemaphoreNew+0x108>
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	429a      	cmp	r2, r3
 8005592:	d86e      	bhi.n	8005672 <osSemaphoreNew+0x108>
    mem = -1;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <osSemaphoreNew+0x4c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b4f      	cmp	r3, #79	; 0x4f
 80055ae:	d902      	bls.n	80055b6 <osSemaphoreNew+0x4c>
        mem = 1;
 80055b0:	2301      	movs	r3, #1
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e00c      	b.n	80055d0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <osSemaphoreNew+0x66>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <osSemaphoreNew+0x66>
          mem = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e001      	b.n	80055d0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d6:	d04c      	beq.n	8005672 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d128      	bne.n	8005630 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10a      	bne.n	80055fa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2203      	movs	r2, #3
 80055ea:	9200      	str	r2, [sp, #0]
 80055ec:	2200      	movs	r2, #0
 80055ee:	2100      	movs	r1, #0
 80055f0:	2001      	movs	r0, #1
 80055f2:	f000 f9d7 	bl	80059a4 <xQueueGenericCreateStatic>
 80055f6:	61f8      	str	r0, [r7, #28]
 80055f8:	e005      	b.n	8005606 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80055fa:	2203      	movs	r2, #3
 80055fc:	2100      	movs	r1, #0
 80055fe:	2001      	movs	r0, #1
 8005600:	f000 fa48 	bl	8005a94 <xQueueGenericCreate>
 8005604:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d022      	beq.n	8005652 <osSemaphoreNew+0xe8>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01f      	beq.n	8005652 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005612:	2300      	movs	r3, #0
 8005614:	2200      	movs	r2, #0
 8005616:	2100      	movs	r1, #0
 8005618:	69f8      	ldr	r0, [r7, #28]
 800561a:	f000 fbb9 	bl	8005d90 <xQueueGenericSend>
 800561e:	4603      	mov	r3, r0
 8005620:	2b01      	cmp	r3, #1
 8005622:	d016      	beq.n	8005652 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005624:	69f8      	ldr	r0, [r7, #28]
 8005626:	f000 ffc5 	bl	80065b4 <vQueueDelete>
            hSemaphore = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	e010      	b.n	8005652 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d108      	bne.n	8005648 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	461a      	mov	r2, r3
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fb3c 	bl	8005cbc <xQueueCreateCountingSemaphoreStatic>
 8005644:	61f8      	str	r0, [r7, #28]
 8005646:	e004      	b.n	8005652 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fb6d 	bl	8005d2a <xQueueCreateCountingSemaphore>
 8005650:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <osSemaphoreNew+0xfc>
          name = attr->name;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e001      	b.n	800566a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800566a:	6979      	ldr	r1, [r7, #20]
 800566c:	69f8      	ldr	r0, [r7, #28]
 800566e:	f001 f8ed 	bl	800684c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005672:	69fb      	ldr	r3, [r7, #28]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005692:	f06f 0303 	mvn.w	r3, #3
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e02c      	b.n	80056f4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800569a:	f3ef 8305 	mrs	r3, IPSR
 800569e:	60fb      	str	r3, [r7, #12]
  return(result);
 80056a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01a      	beq.n	80056dc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	4619      	mov	r1, r3
 80056b0:	6938      	ldr	r0, [r7, #16]
 80056b2:	f000 fd06 	bl	80060c2 <xQueueGiveFromISR>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d003      	beq.n	80056c4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80056bc:	f06f 0302 	mvn.w	r3, #2
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e017      	b.n	80056f4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d014      	beq.n	80056f4 <osSemaphoreRelease+0x78>
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <osSemaphoreRelease+0x84>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	e00b      	b.n	80056f4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056dc:	2300      	movs	r3, #0
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	6938      	ldr	r0, [r7, #16]
 80056e4:	f000 fb54 	bl	8005d90 <xQueueGenericSend>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d002      	beq.n	80056f4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80056ee:	f06f 0302 	mvn.w	r3, #2
 80056f2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80056f4:	697b      	ldr	r3, [r7, #20]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a07      	ldr	r2, [pc, #28]	; (8005730 <vApplicationGetIdleTaskMemory+0x2c>)
 8005714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a06      	ldr	r2, [pc, #24]	; (8005734 <vApplicationGetIdleTaskMemory+0x30>)
 800571a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	200003d0 	.word	0x200003d0
 8005734:	2000048c 	.word	0x2000048c

08005738 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <vApplicationGetTimerTaskMemory+0x2c>)
 8005748:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a06      	ldr	r2, [pc, #24]	; (8005768 <vApplicationGetTimerTaskMemory+0x30>)
 800574e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005756:	601a      	str	r2, [r3, #0]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	2000068c 	.word	0x2000068c
 8005768:	20000748 	.word	0x20000748

0800576c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f103 0208 	add.w	r2, r3, #8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f04f 32ff 	mov.w	r2, #4294967295
 8005784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f103 0208 	add.w	r2, r3, #8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f103 0208 	add.w	r2, r3, #8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d103      	bne.n	800582e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e00c      	b.n	8005848 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3308      	adds	r3, #8
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e002      	b.n	800583c <vListInsert+0x2e>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	d2f6      	bcs.n	8005836 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6852      	ldr	r2, [r2, #4]
 80058a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d103      	bne.n	80058b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	1e5a      	subs	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058fe:	f002 fce1 	bl	80082c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	441a      	add	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	3b01      	subs	r3, #1
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	441a      	add	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	22ff      	movs	r2, #255	; 0xff
 8005942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	; 0xff
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d114      	bne.n	800597e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3310      	adds	r3, #16
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fc81 	bl	8007268 <xTaskRemoveFromEventList>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d012      	beq.n	8005992 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <xQueueGenericReset+0xcc>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	e009      	b.n	8005992 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3310      	adds	r3, #16
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fef2 	bl	800576c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3324      	adds	r3, #36	; 0x24
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff feed 	bl	800576c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005992:	f002 fcc7 	bl	8008324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005996:	2301      	movs	r3, #1
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08e      	sub	sp, #56	; 0x38
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <xQueueGenericCreateStatic+0x52>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <xQueueGenericCreateStatic+0x56>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <xQueueGenericCreateStatic+0x58>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	623b      	str	r3, [r7, #32]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueGenericCreateStatic+0x7e>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueGenericCreateStatic+0x82>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueGenericCreateStatic+0x84>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61fb      	str	r3, [r7, #28]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a42:	2350      	movs	r3, #80	; 0x50
 8005a44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b50      	cmp	r3, #80	; 0x50
 8005a4a:	d00a      	beq.n	8005a62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	61bb      	str	r3, [r7, #24]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f83f 	bl	8005b08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3730      	adds	r7, #48	; 0x30
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueGenericCreate+0x2a>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	613b      	str	r3, [r7, #16]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	3350      	adds	r3, #80	; 0x50
 8005acc:	4618      	mov	r0, r3
 8005ace:	f002 fd1b 	bl	8008508 <pvPortMalloc>
 8005ad2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d011      	beq.n	8005afe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3350      	adds	r3, #80	; 0x50
 8005ae2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aec:	79fa      	ldrb	r2, [r7, #7]
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f805 	bl	8005b08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005afe:	69bb      	ldr	r3, [r7, #24]
	}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d103      	bne.n	8005b24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e002      	b.n	8005b2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b36:	2101      	movs	r1, #1
 8005b38:	69b8      	ldr	r0, [r7, #24]
 8005b3a:	f7ff fecb 	bl	80058d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2200      	movs	r2, #0
 8005b72:	2100      	movs	r1, #0
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f90b 	bl	8005d90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	4603      	mov	r3, r0
 8005b8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6939      	ldr	r1, [r7, #16]
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7ff ff7a 	bl	8005a94 <xQueueGenericCreate>
 8005ba0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff ffd3 	bl	8005b4e <prvInitialiseMutex>

		return xNewQueue;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
	}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b088      	sub	sp, #32
 8005bb6:	af02      	add	r7, sp, #8
 8005bb8:	4603      	mov	r3, r0
 8005bba:	6039      	str	r1, [r7, #0]
 8005bbc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	6939      	ldr	r1, [r7, #16]
 8005bd0:	6978      	ldr	r0, [r7, #20]
 8005bd2:	f7ff fee7 	bl	80059a4 <xQueueGenericCreateStatic>
 8005bd6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ffb8 	bl	8005b4e <prvInitialiseMutex>

		return xNewQueue;
 8005bde:	68fb      	ldr	r3, [r7, #12]
	}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	60fb      	str	r3, [r7, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	689c      	ldr	r4, [r3, #8]
 8005c14:	f001 fcea 	bl	80075ec <xTaskGetCurrentTaskHandle>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	429c      	cmp	r4, r3
 8005c1c:	d111      	bne.n	8005c42 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	1e5a      	subs	r2, r3, #1
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005c30:	2300      	movs	r3, #0
 8005c32:	2200      	movs	r2, #0
 8005c34:	2100      	movs	r1, #0
 8005c36:	6938      	ldr	r0, [r7, #16]
 8005c38:	f000 f8aa 	bl	8005d90 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e001      	b.n	8005c46 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c46:	697b      	ldr	r3, [r7, #20]
	}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd90      	pop	{r4, r7, pc}

08005c50 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005c50:	b590      	push	{r4, r7, lr}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60fb      	str	r3, [r7, #12]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	689c      	ldr	r4, [r3, #8]
 8005c7e:	f001 fcb5 	bl	80075ec <xTaskGetCurrentTaskHandle>
 8005c82:	4603      	mov	r3, r0
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d107      	bne.n	8005c98 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c92:	2301      	movs	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e00c      	b.n	8005cb2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6938      	ldr	r0, [r7, #16]
 8005c9c:	f000 fb7e 	bl	800639c <xQueueSemaphoreTake>
 8005ca0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005cb2:	697b      	ldr	r3, [r7, #20]
	}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd90      	pop	{r4, r7, pc}

08005cbc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	61bb      	str	r3, [r7, #24]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d90a      	bls.n	8005d02 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	617b      	str	r3, [r7, #20]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d02:	2302      	movs	r3, #2
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff fe49 	bl	80059a4 <xQueueGenericCreateStatic>
 8005d12:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d20:	69fb      	ldr	r3, [r7, #28]
	}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	613b      	str	r3, [r7, #16]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d90a      	bls.n	8005d6e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60fb      	str	r3, [r7, #12]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d6e:	2202      	movs	r2, #2
 8005d70:	2100      	movs	r1, #0
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fe8e 	bl	8005a94 <xQueueGenericCreate>
 8005d78:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d86:	697b      	ldr	r3, [r7, #20]
	}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08e      	sub	sp, #56	; 0x38
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericSend+0x32>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <xQueueGenericSend+0x40>
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <xQueueGenericSend+0x44>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <xQueueGenericSend+0x46>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <xQueueGenericSend+0x60>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d103      	bne.n	8005dfe <xQueueGenericSend+0x6e>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <xQueueGenericSend+0x72>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <xQueueGenericSend+0x74>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <xQueueGenericSend+0x8e>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	623b      	str	r3, [r7, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e1e:	f001 fbf5 	bl	800760c <xTaskGetSchedulerState>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <xQueueGenericSend+0x9e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <xQueueGenericSend+0xa2>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <xQueueGenericSend+0xa4>
 8005e32:	2300      	movs	r3, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xQueueGenericSend+0xbe>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	61fb      	str	r3, [r7, #28]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e4e:	f002 fa39 	bl	80082c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <xQueueGenericSend+0xd4>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d129      	bne.n	8005eb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6a:	f000 fbde 	bl	800662a <prvCopyDataToQueue>
 8005e6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d010      	beq.n	8005e9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 f9f3 	bl	8007268 <xTaskRemoveFromEventList>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e88:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <xQueueGenericSend+0x1f8>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	e00a      	b.n	8005eb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ea0:	4b39      	ldr	r3, [pc, #228]	; (8005f88 <xQueueGenericSend+0x1f8>)
 8005ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005eb0:	f002 fa38 	bl	8008324 <vPortExitCritical>
				return pdPASS;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e063      	b.n	8005f80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ebe:	f002 fa31 	bl	8008324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e05c      	b.n	8005f80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ecc:	f107 0314 	add.w	r3, r7, #20
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fa2d 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eda:	f002 fa23 	bl	8008324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ede:	f000 ff99 	bl	8006e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ee2:	f002 f9ef 	bl	80082c4 <vPortEnterCritical>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eec:	b25b      	sxtb	r3, r3
 8005eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef2:	d103      	bne.n	8005efc <xQueueGenericSend+0x16c>
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f02:	b25b      	sxtb	r3, r3
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d103      	bne.n	8005f12 <xQueueGenericSend+0x182>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f12:	f002 fa07 	bl	8008324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f16:	1d3a      	adds	r2, r7, #4
 8005f18:	f107 0314 	add.w	r3, r7, #20
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fa1c 	bl	800735c <xTaskCheckForTimeOut>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d124      	bne.n	8005f74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2c:	f000 fc75 	bl	800681a <prvIsQueueFull>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	3310      	adds	r3, #16
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f942 	bl	80071c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f46:	f000 fc00 	bl	800674a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f4a:	f000 ff71 	bl	8006e30 <xTaskResumeAll>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f47f af7c 	bne.w	8005e4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <xQueueGenericSend+0x1f8>)
 8005f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	e772      	b.n	8005e4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6a:	f000 fbee 	bl	800674a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f6e:	f000 ff5f 	bl	8006e30 <xTaskResumeAll>
 8005f72:	e76c      	b.n	8005e4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f76:	f000 fbe8 	bl	800674a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f7a:	f000 ff59 	bl	8006e30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3738      	adds	r7, #56	; 0x38
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b090      	sub	sp, #64	; 0x40
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d103      	bne.n	8005fc8 <xQueueGenericSendFromISR+0x3c>
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <xQueueGenericSendFromISR+0x40>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <xQueueGenericSendFromISR+0x42>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d103      	bne.n	8005ff6 <xQueueGenericSendFromISR+0x6a>
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <xQueueGenericSendFromISR+0x6e>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xQueueGenericSendFromISR+0x70>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	623b      	str	r3, [r7, #32]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006016:	f002 fa37 	bl	8008488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800601a:	f3ef 8211 	mrs	r2, BASEPRI
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	61fa      	str	r2, [r7, #28]
 8006030:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006032:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <xQueueGenericSendFromISR+0xbc>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d12f      	bne.n	80060a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800605e:	f000 fae4 	bl	800662a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006062:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d112      	bne.n	8006092 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d016      	beq.n	80060a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	3324      	adds	r3, #36	; 0x24
 8006078:	4618      	mov	r0, r3
 800607a:	f001 f8f5 	bl	8007268 <xTaskRemoveFromEventList>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e007      	b.n	80060a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006096:	3301      	adds	r3, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	b25a      	sxtb	r2, r3
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060a2:	2301      	movs	r3, #1
 80060a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060a6:	e001      	b.n	80060ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3740      	adds	r7, #64	; 0x40
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08e      	sub	sp, #56	; 0x38
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	623b      	str	r3, [r7, #32]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <xQueueGiveFromISR+0x48>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61fb      	str	r3, [r7, #28]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <xQueueGiveFromISR+0x58>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <xQueueGiveFromISR+0x5c>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGiveFromISR+0x5e>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	61bb      	str	r3, [r7, #24]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800613a:	f002 f9a5 	bl	8008488 <vPortValidateInterruptPriority>
	__asm volatile
 800613e:	f3ef 8211 	mrs	r2, BASEPRI
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006156:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006166:	429a      	cmp	r2, r3
 8006168:	d22b      	bcs.n	80061c2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800617c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d112      	bne.n	80061ac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	3324      	adds	r3, #36	; 0x24
 8006192:	4618      	mov	r0, r3
 8006194:	f001 f868 	bl	8007268 <xTaskRemoveFromEventList>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e007      	b.n	80061bc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b0:	3301      	adds	r3, #1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	b25a      	sxtb	r2, r3
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061bc:	2301      	movs	r3, #1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
 80061c0:	e001      	b.n	80061c6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f383 8811 	msr	BASEPRI, r3
}
 80061d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3738      	adds	r7, #56	; 0x38
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	; 0x30
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xQueueReceive+0x30>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	623b      	str	r3, [r7, #32]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <xQueueReceive+0x3e>
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <xQueueReceive+0x42>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueReceive+0x44>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueReceive+0x5e>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	61fb      	str	r3, [r7, #28]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800623a:	f001 f9e7 	bl	800760c <xTaskGetSchedulerState>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <xQueueReceive+0x6e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <xQueueReceive+0x72>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <xQueueReceive+0x74>
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xQueueReceive+0x8e>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	61bb      	str	r3, [r7, #24]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800626a:	f002 f82b 	bl	80082c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01f      	beq.n	80062ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 fa3e 	bl	80066fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	3310      	adds	r3, #16
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ffe6 	bl	8007268 <xTaskRemoveFromEventList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062a2:	4b3d      	ldr	r3, [pc, #244]	; (8006398 <xQueueReceive+0x1bc>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062b2:	f002 f837 	bl	8008324 <vPortExitCritical>
				return pdPASS;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e069      	b.n	800638e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062c0:	f002 f830 	bl	8008324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e062      	b.n	800638e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ce:	f107 0310 	add.w	r3, r7, #16
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f82c 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062dc:	f002 f822 	bl	8008324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e0:	f000 fd98 	bl	8006e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062e4:	f001 ffee 	bl	80082c4 <vPortEnterCritical>
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ee:	b25b      	sxtb	r3, r3
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d103      	bne.n	80062fe <xQueueReceive+0x122>
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006304:	b25b      	sxtb	r3, r3
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d103      	bne.n	8006314 <xQueueReceive+0x138>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006314:	f002 f806 	bl	8008324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006318:	1d3a      	adds	r2, r7, #4
 800631a:	f107 0310 	add.w	r3, r7, #16
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f81b 	bl	800735c <xTaskCheckForTimeOut>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d123      	bne.n	8006374 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800632c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632e:	f000 fa5e 	bl	80067ee <prvIsQueueEmpty>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d017      	beq.n	8006368 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f000 ff41 	bl	80071c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006348:	f000 f9ff 	bl	800674a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800634c:	f000 fd70 	bl	8006e30 <xTaskResumeAll>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d189      	bne.n	800626a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006356:	4b10      	ldr	r3, [pc, #64]	; (8006398 <xQueueReceive+0x1bc>)
 8006358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	e780      	b.n	800626a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636a:	f000 f9ee 	bl	800674a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800636e:	f000 fd5f 	bl	8006e30 <xTaskResumeAll>
 8006372:	e77a      	b.n	800626a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006376:	f000 f9e8 	bl	800674a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800637a:	f000 fd59 	bl	8006e30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800637e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006380:	f000 fa35 	bl	80067ee <prvIsQueueEmpty>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f43f af6f 	beq.w	800626a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800638c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800638e:	4618      	mov	r0, r3
 8006390:	3730      	adds	r7, #48	; 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08e      	sub	sp, #56	; 0x38
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	623b      	str	r3, [r7, #32]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	61fb      	str	r3, [r7, #28]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ec:	f001 f90e 	bl	800760c <xTaskGetSchedulerState>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <xQueueSemaphoreTake+0x60>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <xQueueSemaphoreTake+0x64>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <xQueueSemaphoreTake+0x66>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	61bb      	str	r3, [r7, #24]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641c:	f001 ff52 	bl	80082c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	2b00      	cmp	r3, #0
 800642a:	d024      	beq.n	8006476 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800643c:	f001 fa5c 	bl	80078f8 <pvTaskIncrementMutexHeldCount>
 8006440:	4602      	mov	r2, r0
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00f      	beq.n	800646e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	3310      	adds	r3, #16
 8006452:	4618      	mov	r0, r3
 8006454:	f000 ff08 	bl	8007268 <xTaskRemoveFromEventList>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800645e:	4b54      	ldr	r3, [pc, #336]	; (80065b0 <xQueueSemaphoreTake+0x214>)
 8006460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800646e:	f001 ff59 	bl	8008324 <vPortExitCritical>
				return pdPASS;
 8006472:	2301      	movs	r3, #1
 8006474:	e097      	b.n	80065a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d111      	bne.n	80064a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	617b      	str	r3, [r7, #20]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006498:	f001 ff44 	bl	8008324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800649c:	2300      	movs	r3, #0
 800649e:	e082      	b.n	80065a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a6:	f107 030c 	add.w	r3, r7, #12
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 ff40 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b4:	f001 ff36 	bl	8008324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b8:	f000 fcac 	bl	8006e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064bc:	f001 ff02 	bl	80082c4 <vPortEnterCritical>
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c6:	b25b      	sxtb	r3, r3
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d103      	bne.n	80064d6 <xQueueSemaphoreTake+0x13a>
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d103      	bne.n	80064ec <xQueueSemaphoreTake+0x150>
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ec:	f001 ff1a 	bl	8008324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f0:	463a      	mov	r2, r7
 80064f2:	f107 030c 	add.w	r3, r7, #12
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ff2f 	bl	800735c <xTaskCheckForTimeOut>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d132      	bne.n	800656a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006506:	f000 f972 	bl	80067ee <prvIsQueueEmpty>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d026      	beq.n	800655e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006518:	f001 fed4 	bl	80082c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f891 	bl	8007648 <xTaskPriorityInherit>
 8006526:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006528:	f001 fefc 	bl	8008324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	3324      	adds	r3, #36	; 0x24
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fe47 	bl	80071c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800653a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800653c:	f000 f905 	bl	800674a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006540:	f000 fc76 	bl	8006e30 <xTaskResumeAll>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	f47f af68 	bne.w	800641c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800654c:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <xQueueSemaphoreTake+0x214>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	e75e      	b.n	800641c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800655e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006560:	f000 f8f3 	bl	800674a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006564:	f000 fc64 	bl	8006e30 <xTaskResumeAll>
 8006568:	e758      	b.n	800641c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800656a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800656c:	f000 f8ed 	bl	800674a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006570:	f000 fc5e 	bl	8006e30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006576:	f000 f93a 	bl	80067ee <prvIsQueueEmpty>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	f43f af4d 	beq.w	800641c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00d      	beq.n	80065a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006588:	f001 fe9c 	bl	80082c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800658c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800658e:	f000 f834 	bl	80065fa <prvGetDisinheritPriorityAfterTimeout>
 8006592:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f92a 	bl	80077f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065a0:	f001 fec0 	bl	8008324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3738      	adds	r7, #56	; 0x38
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <vQueueDelete+0x28>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60bb      	str	r3, [r7, #8]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f95f 	bl	80068a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f002 f857 	bl	80086a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d006      	beq.n	8006618 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e001      	b.n	800661c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800661c:	68fb      	ldr	r3, [r7, #12]
	}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10d      	bne.n	8006664 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d14d      	bne.n	80066ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f85f 	bl	8007718 <xTaskPriorityDisinherit>
 800665a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	609a      	str	r2, [r3, #8]
 8006662:	e043      	b.n	80066ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d119      	bne.n	800669e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6858      	ldr	r0, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	461a      	mov	r2, r3
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	f002 fa54 	bl	8008b22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d32b      	bcc.n	80066ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	e026      	b.n	80066ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	68d8      	ldr	r0, [r3, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	461a      	mov	r2, r3
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	f002 fa3a 	bl	8008b22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	425b      	negs	r3, r3
 80066b8:	441a      	add	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d207      	bcs.n	80066da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	425b      	negs	r3, r3
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d105      	bne.n	80066ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066f4:	697b      	ldr	r3, [r7, #20]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d018      	beq.n	8006742 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	441a      	add	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	d303      	bcc.n	8006732 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68d9      	ldr	r1, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	461a      	mov	r2, r3
 800673c:	6838      	ldr	r0, [r7, #0]
 800673e:	f002 f9f0 	bl	8008b22 <memcpy>
	}
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006752:	f001 fdb7 	bl	80082c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800675c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800675e:	e011      	b.n	8006784 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d012      	beq.n	800678e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3324      	adds	r3, #36	; 0x24
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fd7b 	bl	8007268 <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006778:	f000 fe52 	bl	8007420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	3b01      	subs	r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dce9      	bgt.n	8006760 <prvUnlockQueue+0x16>
 800678c:	e000      	b.n	8006790 <prvUnlockQueue+0x46>
					break;
 800678e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	22ff      	movs	r2, #255	; 0xff
 8006794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006798:	f001 fdc4 	bl	8008324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800679c:	f001 fd92 	bl	80082c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067a8:	e011      	b.n	80067ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d012      	beq.n	80067d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3310      	adds	r3, #16
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fd56 	bl	8007268 <xTaskRemoveFromEventList>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067c2:	f000 fe2d 	bl	8007420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dce9      	bgt.n	80067aa <prvUnlockQueue+0x60>
 80067d6:	e000      	b.n	80067da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	22ff      	movs	r2, #255	; 0xff
 80067de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067e2:	f001 fd9f 	bl	8008324 <vPortExitCritical>
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067f6:	f001 fd65 	bl	80082c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e001      	b.n	800680c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800680c:	f001 fd8a 	bl	8008324 <vPortExitCritical>

	return xReturn;
 8006810:	68fb      	ldr	r3, [r7, #12]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006822:	f001 fd4f 	bl	80082c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	429a      	cmp	r2, r3
 8006830:	d102      	bne.n	8006838 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006832:	2301      	movs	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e001      	b.n	800683c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683c:	f001 fd72 	bl	8008324 <vPortExitCritical>

	return xReturn;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e014      	b.n	8006886 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800685c:	4a0f      	ldr	r2, [pc, #60]	; (800689c <vQueueAddToRegistry+0x50>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006868:	490c      	ldr	r1, [pc, #48]	; (800689c <vQueueAddToRegistry+0x50>)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <vQueueAddToRegistry+0x50>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800687e:	e006      	b.n	800688e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b07      	cmp	r3, #7
 800688a:	d9e7      	bls.n	800685c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20000b48 	.word	0x20000b48

080068a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e016      	b.n	80068dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068ae:	4a10      	ldr	r2, [pc, #64]	; (80068f0 <vQueueUnregisterQueue+0x50>)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	4413      	add	r3, r2
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d10b      	bne.n	80068d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068be:	4a0c      	ldr	r2, [pc, #48]	; (80068f0 <vQueueUnregisterQueue+0x50>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2100      	movs	r1, #0
 80068c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <vQueueUnregisterQueue+0x50>)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4413      	add	r3, r2
 80068d0:	2200      	movs	r2, #0
 80068d2:	605a      	str	r2, [r3, #4]
				break;
 80068d4:	e006      	b.n	80068e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b07      	cmp	r3, #7
 80068e0:	d9e5      	bls.n	80068ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20000b48 	.word	0x20000b48

080068f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006904:	f001 fcde 	bl	80082c4 <vPortEnterCritical>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800690e:	b25b      	sxtb	r3, r3
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d103      	bne.n	800691e <vQueueWaitForMessageRestricted+0x2a>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006924:	b25b      	sxtb	r3, r3
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d103      	bne.n	8006934 <vQueueWaitForMessageRestricted+0x40>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006934:	f001 fcf6 	bl	8008324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3324      	adds	r3, #36	; 0x24
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fc61 	bl	8007210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800694e:	6978      	ldr	r0, [r7, #20]
 8006950:	f7ff fefb 	bl	800674a <prvUnlockQueue>
	}
 8006954:	bf00      	nop
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08e      	sub	sp, #56	; 0x38
 8006960:	af04      	add	r7, sp, #16
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	623b      	str	r3, [r7, #32]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	61fb      	str	r3, [r7, #28]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069a2:	23bc      	movs	r3, #188	; 0xbc
 80069a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2bbc      	cmp	r3, #188	; 0xbc
 80069aa:	d00a      	beq.n	80069c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61bb      	str	r3, [r7, #24]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01e      	beq.n	8006a08 <xTaskCreateStatic+0xac>
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01b      	beq.n	8006a08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2202      	movs	r2, #2
 80069de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069e2:	2300      	movs	r3, #0
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	9302      	str	r3, [sp, #8]
 80069ea:	f107 0314 	add.w	r3, r7, #20
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f850 	bl	8006aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a02:	f000 f8f3 	bl	8006bec <prvAddNewTaskToReadyList>
 8006a06:	e001      	b.n	8006a0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a0c:	697b      	ldr	r3, [r7, #20]
	}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3728      	adds	r7, #40	; 0x28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08c      	sub	sp, #48	; 0x30
 8006a1a:	af04      	add	r7, sp, #16
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 fd6c 	bl	8008508 <pvPortMalloc>
 8006a30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a38:	20bc      	movs	r0, #188	; 0xbc
 8006a3a:	f001 fd65 	bl	8008508 <pvPortMalloc>
 8006a3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a4c:	e005      	b.n	8006a5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a4e:	6978      	ldr	r0, [r7, #20]
 8006a50:	f001 fe26 	bl	80086a0 <vPortFree>
 8006a54:	e001      	b.n	8006a5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d017      	beq.n	8006a90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a68:	88fa      	ldrh	r2, [r7, #6]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9303      	str	r3, [sp, #12]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	9302      	str	r3, [sp, #8]
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f80e 	bl	8006aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a84:	69f8      	ldr	r0, [r7, #28]
 8006a86:	f000 f8b1 	bl	8006bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e002      	b.n	8006a96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a96:	69bb      	ldr	r3, [r7, #24]
	}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	21a5      	movs	r1, #165	; 0xa5
 8006aba:	f002 f840 	bl	8008b3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f023 0307 	bic.w	r3, r3, #7
 8006ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	617b      	str	r3, [r7, #20]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01f      	beq.n	8006b3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e012      	b.n	8006b2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	7819      	ldrb	r1, [r3, #0]
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	3334      	adds	r3, #52	; 0x34
 8006b14:	460a      	mov	r2, r1
 8006b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b0f      	cmp	r3, #15
 8006b2e:	d9e9      	bls.n	8006b04 <prvInitialiseNewTask+0x64>
 8006b30:	e000      	b.n	8006b34 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b3c:	e003      	b.n	8006b46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	2b37      	cmp	r3, #55	; 0x37
 8006b4a:	d901      	bls.n	8006b50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b4c:	2337      	movs	r3, #55	; 0x37
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fe20 	bl	80057ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	3318      	adds	r3, #24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe fe1b 	bl	80057ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	3354      	adds	r3, #84	; 0x54
 8006ba0:	2260      	movs	r2, #96	; 0x60
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 ffca 	bl	8008b3e <memset>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <prvInitialiseNewTask+0x140>)
 8006bae:	659a      	str	r2, [r3, #88]	; 0x58
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	4a0c      	ldr	r2, [pc, #48]	; (8006be4 <prvInitialiseNewTask+0x144>)
 8006bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <prvInitialiseNewTask+0x148>)
 8006bba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	69b8      	ldr	r0, [r7, #24]
 8006bc2:	f001 fa4f 	bl	8008064 <pxPortInitialiseStack>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd8:	bf00      	nop
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	08009f44 	.word	0x08009f44
 8006be4:	08009f64 	.word	0x08009f64
 8006be8:	08009f24 	.word	0x08009f24

08006bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf4:	f001 fb66 	bl	80082c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf8:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c0a:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d110      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c18:	f000 fc26 	bl	8007468 <prvInitialiseTaskLists>
 8006c1c:	e00d      	b.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c1e:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <prvAddNewTaskToReadyList+0xcc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c26:	4b23      	ldr	r3, [pc, #140]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d802      	bhi.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c34:	4a1f      	ldr	r2, [pc, #124]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c3a:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c50:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <prvAddNewTaskToReadyList+0xd4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d903      	bls.n	8006c60 <prvAddNewTaskToReadyList+0x74>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	4a18      	ldr	r2, [pc, #96]	; (8006cc0 <prvAddNewTaskToReadyList+0xd4>)
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4a15      	ldr	r2, [pc, #84]	; (8006cc4 <prvAddNewTaskToReadyList+0xd8>)
 8006c6e:	441a      	add	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f7fe fda5 	bl	80057c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c7c:	f001 fb52 	bl	8008324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c80:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <prvAddNewTaskToReadyList+0xcc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00e      	beq.n	8006ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c88:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d207      	bcs.n	8006ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvAddNewTaskToReadyList+0xdc>)
 8006c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2000105c 	.word	0x2000105c
 8006cb4:	20000b88 	.word	0x20000b88
 8006cb8:	20001068 	.word	0x20001068
 8006cbc:	20001078 	.word	0x20001078
 8006cc0:	20001064 	.word	0x20001064
 8006cc4:	20000b8c 	.word	0x20000b8c
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d017      	beq.n	8006d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <vTaskDelay+0x60>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <vTaskDelay+0x30>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60bb      	str	r3, [r7, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cfc:	f000 f88a 	bl	8006e14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d00:	2100      	movs	r1, #0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fe0c 	bl	8007920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d08:	f000 f892 	bl	8006e30 <xTaskResumeAll>
 8006d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <vTaskDelay+0x64>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20001084 	.word	0x20001084
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d42:	463a      	mov	r2, r7
 8006d44:	1d39      	adds	r1, r7, #4
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fcda 	bl	8005704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	9202      	str	r2, [sp, #8]
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	460a      	mov	r2, r1
 8006d62:	4924      	ldr	r1, [pc, #144]	; (8006df4 <vTaskStartScheduler+0xc0>)
 8006d64:	4824      	ldr	r0, [pc, #144]	; (8006df8 <vTaskStartScheduler+0xc4>)
 8006d66:	f7ff fdf9 	bl	800695c <xTaskCreateStatic>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4a23      	ldr	r2, [pc, #140]	; (8006dfc <vTaskStartScheduler+0xc8>)
 8006d6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d70:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <vTaskStartScheduler+0xc8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e001      	b.n	8006d82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d102      	bne.n	8006d8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d88:	f000 fe1e 	bl	80079c8 <xTimerCreateTimerTask>
 8006d8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d11b      	bne.n	8006dcc <vTaskStartScheduler+0x98>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	613b      	str	r3, [r7, #16]
}
 8006da6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <vTaskStartScheduler+0xcc>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3354      	adds	r3, #84	; 0x54
 8006dae:	4a15      	ldr	r2, [pc, #84]	; (8006e04 <vTaskStartScheduler+0xd0>)
 8006db0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006db2:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <vTaskStartScheduler+0xd4>)
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dba:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <vTaskStartScheduler+0xd8>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dc0:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <vTaskStartScheduler+0xdc>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dc6:	f001 f9db 	bl	8008180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dca:	e00e      	b.n	8006dea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd2:	d10a      	bne.n	8006dea <vTaskStartScheduler+0xb6>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	60fb      	str	r3, [r7, #12]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <vTaskStartScheduler+0xb4>
}
 8006dea:	bf00      	nop
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	08009dfc 	.word	0x08009dfc
 8006df8:	08007439 	.word	0x08007439
 8006dfc:	20001080 	.word	0x20001080
 8006e00:	20000b88 	.word	0x20000b88
 8006e04:	20000018 	.word	0x20000018
 8006e08:	2000107c 	.word	0x2000107c
 8006e0c:	20001068 	.word	0x20001068
 8006e10:	20001060 	.word	0x20001060

08006e14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e18:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <vTaskSuspendAll+0x18>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	4a03      	ldr	r2, [pc, #12]	; (8006e2c <vTaskSuspendAll+0x18>)
 8006e20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e22:	bf00      	nop
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20001084 	.word	0x20001084

08006e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e3e:	4b42      	ldr	r3, [pc, #264]	; (8006f48 <xTaskResumeAll+0x118>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	603b      	str	r3, [r7, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e5c:	f001 fa32 	bl	80082c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e60:	4b39      	ldr	r3, [pc, #228]	; (8006f48 <xTaskResumeAll+0x118>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	4a38      	ldr	r2, [pc, #224]	; (8006f48 <xTaskResumeAll+0x118>)
 8006e68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6a:	4b37      	ldr	r3, [pc, #220]	; (8006f48 <xTaskResumeAll+0x118>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d162      	bne.n	8006f38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <xTaskResumeAll+0x11c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d05e      	beq.n	8006f38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e7a:	e02f      	b.n	8006edc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7c:	4b34      	ldr	r3, [pc, #208]	; (8006f50 <xTaskResumeAll+0x120>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3318      	adds	r3, #24
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe fcf9 	bl	8005880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fcf4 	bl	8005880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9c:	4b2d      	ldr	r3, [pc, #180]	; (8006f54 <xTaskResumeAll+0x124>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <xTaskResumeAll+0x7c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <xTaskResumeAll+0x124>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4a27      	ldr	r2, [pc, #156]	; (8006f58 <xTaskResumeAll+0x128>)
 8006eba:	441a      	add	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7fe fc7f 	bl	80057c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <xTaskResumeAll+0x12c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ed6:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <xTaskResumeAll+0x130>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006edc:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <xTaskResumeAll+0x120>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1cb      	bne.n	8006e7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006eea:	f000 fb5f 	bl	80075ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006eee:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <xTaskResumeAll+0x134>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d010      	beq.n	8006f1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006efa:	f000 f847 	bl	8006f8c <xTaskIncrementTick>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <xTaskResumeAll+0x130>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f1      	bne.n	8006efa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f16:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <xTaskResumeAll+0x134>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <xTaskResumeAll+0x130>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d009      	beq.n	8006f38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <xTaskResumeAll+0x138>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f38:	f001 f9f4 	bl	8008324 <vPortExitCritical>

	return xAlreadyYielded;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20001084 	.word	0x20001084
 8006f4c:	2000105c 	.word	0x2000105c
 8006f50:	2000101c 	.word	0x2000101c
 8006f54:	20001064 	.word	0x20001064
 8006f58:	20000b8c 	.word	0x20000b8c
 8006f5c:	20000b88 	.word	0x20000b88
 8006f60:	20001070 	.word	0x20001070
 8006f64:	2000106c 	.word	0x2000106c
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <xTaskGetTickCount+0x1c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f78:	687b      	ldr	r3, [r7, #4]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20001060 	.word	0x20001060

08006f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f96:	4b4f      	ldr	r3, [pc, #316]	; (80070d4 <xTaskIncrementTick+0x148>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 808f 	bne.w	80070be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fa0:	4b4d      	ldr	r3, [pc, #308]	; (80070d8 <xTaskIncrementTick+0x14c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa8:	4a4b      	ldr	r2, [pc, #300]	; (80070d8 <xTaskIncrementTick+0x14c>)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d120      	bne.n	8006ff6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fb4:	4b49      	ldr	r3, [pc, #292]	; (80070dc <xTaskIncrementTick+0x150>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	603b      	str	r3, [r7, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <xTaskIncrementTick+0x46>
 8006fd4:	4b41      	ldr	r3, [pc, #260]	; (80070dc <xTaskIncrementTick+0x150>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <xTaskIncrementTick+0x154>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a3f      	ldr	r2, [pc, #252]	; (80070dc <xTaskIncrementTick+0x150>)
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4a3f      	ldr	r2, [pc, #252]	; (80070e0 <xTaskIncrementTick+0x154>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <xTaskIncrementTick+0x158>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3301      	adds	r3, #1
 8006fee:	4a3d      	ldr	r2, [pc, #244]	; (80070e4 <xTaskIncrementTick+0x158>)
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	f000 fadb 	bl	80075ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ff6:	4b3c      	ldr	r3, [pc, #240]	; (80070e8 <xTaskIncrementTick+0x15c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d349      	bcc.n	8007094 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007000:	4b36      	ldr	r3, [pc, #216]	; (80070dc <xTaskIncrementTick+0x150>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d104      	bne.n	8007014 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <xTaskIncrementTick+0x15c>)
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	601a      	str	r2, [r3, #0]
					break;
 8007012:	e03f      	b.n	8007094 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007014:	4b31      	ldr	r3, [pc, #196]	; (80070dc <xTaskIncrementTick+0x150>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d203      	bcs.n	8007034 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800702c:	4a2e      	ldr	r2, [pc, #184]	; (80070e8 <xTaskIncrementTick+0x15c>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007032:	e02f      	b.n	8007094 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fc21 	bl	8005880 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	3318      	adds	r3, #24
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fc18 	bl	8005880 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4b25      	ldr	r3, [pc, #148]	; (80070ec <xTaskIncrementTick+0x160>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d903      	bls.n	8007064 <xTaskIncrementTick+0xd8>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <xTaskIncrementTick+0x160>)
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <xTaskIncrementTick+0x164>)
 8007072:	441a      	add	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f7fe fba3 	bl	80057c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <xTaskIncrementTick+0x168>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	429a      	cmp	r2, r3
 800708c:	d3b8      	bcc.n	8007000 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800708e:	2301      	movs	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007092:	e7b5      	b.n	8007000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007094:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <xTaskIncrementTick+0x168>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709a:	4915      	ldr	r1, [pc, #84]	; (80070f0 <xTaskIncrementTick+0x164>)
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d901      	bls.n	80070b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070b0:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <xTaskIncrementTick+0x16c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	e004      	b.n	80070c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <xTaskIncrementTick+0x170>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a0d      	ldr	r2, [pc, #52]	; (80070fc <xTaskIncrementTick+0x170>)
 80070c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070c8:	697b      	ldr	r3, [r7, #20]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20001084 	.word	0x20001084
 80070d8:	20001060 	.word	0x20001060
 80070dc:	20001014 	.word	0x20001014
 80070e0:	20001018 	.word	0x20001018
 80070e4:	20001074 	.word	0x20001074
 80070e8:	2000107c 	.word	0x2000107c
 80070ec:	20001064 	.word	0x20001064
 80070f0:	20000b8c 	.word	0x20000b8c
 80070f4:	20000b88 	.word	0x20000b88
 80070f8:	20001070 	.word	0x20001070
 80070fc:	2000106c 	.word	0x2000106c

08007100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <vTaskSwitchContext+0xb0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800710e:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <vTaskSwitchContext+0xb4>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007114:	e046      	b.n	80071a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <vTaskSwitchContext+0xb4>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <vTaskSwitchContext+0xb8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e010      	b.n	8007146 <vTaskSwitchContext+0x46>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <vTaskSwitchContext+0x40>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <vTaskSwitchContext+0x3e>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3b01      	subs	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	491d      	ldr	r1, [pc, #116]	; (80071bc <vTaskSwitchContext+0xbc>)
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0e4      	beq.n	8007124 <vTaskSwitchContext+0x24>
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a15      	ldr	r2, [pc, #84]	; (80071bc <vTaskSwitchContext+0xbc>)
 8007166:	4413      	add	r3, r2
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	3308      	adds	r3, #8
 800717c:	429a      	cmp	r2, r3
 800717e:	d104      	bne.n	800718a <vTaskSwitchContext+0x8a>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a0b      	ldr	r2, [pc, #44]	; (80071c0 <vTaskSwitchContext+0xc0>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <vTaskSwitchContext+0xb8>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <vTaskSwitchContext+0xc0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3354      	adds	r3, #84	; 0x54
 80071a0:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <vTaskSwitchContext+0xc4>)
 80071a2:	6013      	str	r3, [r2, #0]
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	20001084 	.word	0x20001084
 80071b4:	20001070 	.word	0x20001070
 80071b8:	20001064 	.word	0x20001064
 80071bc:	20000b8c 	.word	0x20000b8c
 80071c0:	20000b88 	.word	0x20000b88
 80071c4:	20000018 	.word	0x20000018

080071c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <vTaskPlaceOnEventList+0x44>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3318      	adds	r3, #24
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fe fb09 	bl	800580e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071fc:	2101      	movs	r1, #1
 80071fe:	6838      	ldr	r0, [r7, #0]
 8007200:	f000 fb8e 	bl	8007920 <prvAddCurrentTaskToDelayedList>
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	20000b88 	.word	0x20000b88

08007210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	617b      	str	r3, [r7, #20]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <vTaskPlaceOnEventListRestricted+0x54>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3318      	adds	r3, #24
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7fe fac0 	bl	80057c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	68b8      	ldr	r0, [r7, #8]
 8007256:	f000 fb63 	bl	8007920 <prvAddCurrentTaskToDelayedList>
	}
 800725a:	bf00      	nop
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000b88 	.word	0x20000b88

08007268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	3318      	adds	r3, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe faf1 	bl	8005880 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729e:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <xTaskRemoveFromEventList+0xb0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d11d      	bne.n	80072e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fae8 	bl	8005880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4b19      	ldr	r3, [pc, #100]	; (800731c <xTaskRemoveFromEventList+0xb4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d903      	bls.n	80072c4 <xTaskRemoveFromEventList+0x5c>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a16      	ldr	r2, [pc, #88]	; (800731c <xTaskRemoveFromEventList+0xb4>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a13      	ldr	r2, [pc, #76]	; (8007320 <xTaskRemoveFromEventList+0xb8>)
 80072d2:	441a      	add	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe fa73 	bl	80057c6 <vListInsertEnd>
 80072e0:	e005      	b.n	80072ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3318      	adds	r3, #24
 80072e6:	4619      	mov	r1, r3
 80072e8:	480e      	ldr	r0, [pc, #56]	; (8007324 <xTaskRemoveFromEventList+0xbc>)
 80072ea:	f7fe fa6c 	bl	80057c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <xTaskRemoveFromEventList+0xc0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d905      	bls.n	8007308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007300:	4b0a      	ldr	r3, [pc, #40]	; (800732c <xTaskRemoveFromEventList+0xc4>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e001      	b.n	800730c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800730c:	697b      	ldr	r3, [r7, #20]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20001084 	.word	0x20001084
 800731c:	20001064 	.word	0x20001064
 8007320:	20000b8c 	.word	0x20000b8c
 8007324:	2000101c 	.word	0x2000101c
 8007328:	20000b88 	.word	0x20000b88
 800732c:	20001070 	.word	0x20001070

08007330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <vTaskInternalSetTimeOutState+0x24>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <vTaskInternalSetTimeOutState+0x28>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20001074 	.word	0x20001074
 8007358:	20001060 	.word	0x20001060

0800735c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	613b      	str	r3, [r7, #16]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	60fb      	str	r3, [r7, #12]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800739e:	f000 ff91 	bl	80082c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073a2:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <xTaskCheckForTimeOut+0xbc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d102      	bne.n	80073c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e023      	b.n	800740a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <xTaskCheckForTimeOut+0xc0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d007      	beq.n	80073de <xTaskCheckForTimeOut+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
 80073dc:	e015      	b.n	800740a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d20b      	bcs.n	8007400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff ff9b 	bl	8007330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	e004      	b.n	800740a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800740a:	f000 ff8b 	bl	8008324 <vPortExitCritical>

	return xReturn;
 800740e:	69fb      	ldr	r3, [r7, #28]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20001060 	.word	0x20001060
 800741c:	20001074 	.word	0x20001074

08007420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <vTaskMissedYield+0x14>)
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20001070 	.word	0x20001070

08007438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007440:	f000 f852 	bl	80074e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <prvIdleTask+0x28>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d9f9      	bls.n	8007440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <prvIdleTask+0x2c>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800745c:	e7f0      	b.n	8007440 <prvIdleTask+0x8>
 800745e:	bf00      	nop
 8007460:	20000b8c 	.word	0x20000b8c
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e00c      	b.n	800748e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <prvInitialiseTaskLists+0x60>)
 8007480:	4413      	add	r3, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f972 	bl	800576c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b37      	cmp	r3, #55	; 0x37
 8007492:	d9ef      	bls.n	8007474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007494:	480d      	ldr	r0, [pc, #52]	; (80074cc <prvInitialiseTaskLists+0x64>)
 8007496:	f7fe f969 	bl	800576c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800749a:	480d      	ldr	r0, [pc, #52]	; (80074d0 <prvInitialiseTaskLists+0x68>)
 800749c:	f7fe f966 	bl	800576c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074a0:	480c      	ldr	r0, [pc, #48]	; (80074d4 <prvInitialiseTaskLists+0x6c>)
 80074a2:	f7fe f963 	bl	800576c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074a6:	480c      	ldr	r0, [pc, #48]	; (80074d8 <prvInitialiseTaskLists+0x70>)
 80074a8:	f7fe f960 	bl	800576c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074ac:	480b      	ldr	r0, [pc, #44]	; (80074dc <prvInitialiseTaskLists+0x74>)
 80074ae:	f7fe f95d 	bl	800576c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <prvInitialiseTaskLists+0x78>)
 80074b4:	4a05      	ldr	r2, [pc, #20]	; (80074cc <prvInitialiseTaskLists+0x64>)
 80074b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvInitialiseTaskLists+0x7c>)
 80074ba:	4a05      	ldr	r2, [pc, #20]	; (80074d0 <prvInitialiseTaskLists+0x68>)
 80074bc:	601a      	str	r2, [r3, #0]
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000b8c 	.word	0x20000b8c
 80074cc:	20000fec 	.word	0x20000fec
 80074d0:	20001000 	.word	0x20001000
 80074d4:	2000101c 	.word	0x2000101c
 80074d8:	20001030 	.word	0x20001030
 80074dc:	20001048 	.word	0x20001048
 80074e0:	20001014 	.word	0x20001014
 80074e4:	20001018 	.word	0x20001018

080074e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ee:	e019      	b.n	8007524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074f0:	f000 fee8 	bl	80082c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f4:	4b10      	ldr	r3, [pc, #64]	; (8007538 <prvCheckTasksWaitingTermination+0x50>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f9bd 	bl	8005880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <prvCheckTasksWaitingTermination+0x54>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3b01      	subs	r3, #1
 800750c:	4a0b      	ldr	r2, [pc, #44]	; (800753c <prvCheckTasksWaitingTermination+0x54>)
 800750e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3b01      	subs	r3, #1
 8007516:	4a0a      	ldr	r2, [pc, #40]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800751a:	f000 ff03 	bl	8008324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f810 	bl	8007544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e1      	bne.n	80074f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20001030 	.word	0x20001030
 800753c:	2000105c 	.word	0x2000105c
 8007540:	20001044 	.word	0x20001044

08007544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3354      	adds	r3, #84	; 0x54
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fbb7 	bl	8008cc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800755c:	2b00      	cmp	r3, #0
 800755e:	d108      	bne.n	8007572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4618      	mov	r0, r3
 8007566:	f001 f89b 	bl	80086a0 <vPortFree>
				vPortFree( pxTCB );
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f898 	bl	80086a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007570:	e018      	b.n	80075a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007578:	2b01      	cmp	r3, #1
 800757a:	d103      	bne.n	8007584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f88f 	bl	80086a0 <vPortFree>
	}
 8007582:	e00f      	b.n	80075a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800758a:	2b02      	cmp	r3, #2
 800758c:	d00a      	beq.n	80075a4 <prvDeleteTCB+0x60>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <prvDeleteTCB+0x5e>
	}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <prvResetNextTaskUnblockTime+0x38>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <prvResetNextTaskUnblockTime+0x3c>)
 80075be:	f04f 32ff 	mov.w	r2, #4294967295
 80075c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075c4:	e008      	b.n	80075d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <prvResetNextTaskUnblockTime+0x38>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <prvResetNextTaskUnblockTime+0x3c>)
 80075d6:	6013      	str	r3, [r2, #0]
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20001014 	.word	0x20001014
 80075e8:	2000107c 	.word	0x2000107c

080075ec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <xTaskGetCurrentTaskHandle+0x1c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80075f8:	687b      	ldr	r3, [r7, #4]
	}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20000b88 	.word	0x20000b88

0800760c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <xTaskGetSchedulerState+0x34>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800761a:	2301      	movs	r3, #1
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	e008      	b.n	8007632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007620:	4b08      	ldr	r3, [pc, #32]	; (8007644 <xTaskGetSchedulerState+0x38>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007628:	2302      	movs	r3, #2
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	e001      	b.n	8007632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007632:	687b      	ldr	r3, [r7, #4]
	}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20001068 	.word	0x20001068
 8007644:	20001084 	.word	0x20001084

08007648 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d051      	beq.n	8007702 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	4b2a      	ldr	r3, [pc, #168]	; (800770c <xTaskPriorityInherit+0xc4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d241      	bcs.n	80076f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	db06      	blt.n	8007682 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <xTaskPriorityInherit+0xc4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6959      	ldr	r1, [r3, #20]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a1f      	ldr	r2, [pc, #124]	; (8007710 <xTaskPriorityInherit+0xc8>)
 8007694:	4413      	add	r3, r2
 8007696:	4299      	cmp	r1, r3
 8007698:	d122      	bne.n	80076e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe f8ee 	bl	8005880 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <xTaskPriorityInherit+0xc4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4b18      	ldr	r3, [pc, #96]	; (8007714 <xTaskPriorityInherit+0xcc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <xTaskPriorityInherit+0x7a>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	4a15      	ldr	r2, [pc, #84]	; (8007714 <xTaskPriorityInherit+0xcc>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a10      	ldr	r2, [pc, #64]	; (8007710 <xTaskPriorityInherit+0xc8>)
 80076d0:	441a      	add	r2, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fe f874 	bl	80057c6 <vListInsertEnd>
 80076de:	e004      	b.n	80076ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <xTaskPriorityInherit+0xc4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e008      	b.n	8007702 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <xTaskPriorityInherit+0xc4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d201      	bcs.n	8007702 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007702:	68fb      	ldr	r3, [r7, #12]
	}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000b88 	.word	0x20000b88
 8007710:	20000b8c 	.word	0x20000b8c
 8007714:	20001064 	.word	0x20001064

08007718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d056      	beq.n	80077dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800772e:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <xTaskPriorityDisinherit+0xd0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	429a      	cmp	r2, r3
 8007736:	d00a      	beq.n	800774e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	60fb      	str	r3, [r7, #12]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	60bb      	str	r3, [r7, #8]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007770:	1e5a      	subs	r2, r3, #1
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777e:	429a      	cmp	r2, r3
 8007780:	d02c      	beq.n	80077dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007786:	2b00      	cmp	r3, #0
 8007788:	d128      	bne.n	80077dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe f876 	bl	8005880 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <xTaskPriorityDisinherit+0xd4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d903      	bls.n	80077bc <xTaskPriorityDisinherit+0xa4>
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <xTaskPriorityDisinherit+0xd4>)
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <xTaskPriorityDisinherit+0xd8>)
 80077ca:	441a      	add	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7fd fff7 	bl	80057c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077dc:	697b      	ldr	r3, [r7, #20]
	}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000b88 	.word	0x20000b88
 80077ec:	20001064 	.word	0x20001064
 80077f0:	20000b8c 	.word	0x20000b8c

080077f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007802:	2301      	movs	r3, #1
 8007804:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d06a      	beq.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d902      	bls.n	800783a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e002      	b.n	8007840 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	429a      	cmp	r2, r3
 8007848:	d04b      	beq.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	429a      	cmp	r2, r3
 8007852:	d146      	bne.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007854:	4b25      	ldr	r3, [pc, #148]	; (80078ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	429a      	cmp	r2, r3
 800785c:	d10a      	bne.n	8007874 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60bb      	str	r3, [r7, #8]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	db04      	blt.n	8007892 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	6959      	ldr	r1, [r3, #20]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80078a2:	4413      	add	r3, r2
 80078a4:	4299      	cmp	r1, r3
 80078a6:	d11c      	bne.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd ffe7 	bl	8005880 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d903      	bls.n	80078c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a0c      	ldr	r2, [pc, #48]	; (80078f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4a07      	ldr	r2, [pc, #28]	; (80078f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80078d4:	441a      	add	r2, r3
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	3304      	adds	r3, #4
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7fd ff72 	bl	80057c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078e2:	bf00      	nop
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000b88 	.word	0x20000b88
 80078f0:	20000b8c 	.word	0x20000b8c
 80078f4:	20001064 	.word	0x20001064

080078f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <pvTaskIncrementMutexHeldCount+0x24>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <pvTaskIncrementMutexHeldCount+0x24>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800790a:	3201      	adds	r2, #1
 800790c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800790e:	4b03      	ldr	r3, [pc, #12]	; (800791c <pvTaskIncrementMutexHeldCount+0x24>)
 8007910:	681b      	ldr	r3, [r3, #0]
	}
 8007912:	4618      	mov	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20000b88 	.word	0x20000b88

08007920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800792a:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007930:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3304      	adds	r3, #4
 8007936:	4618      	mov	r0, r3
 8007938:	f7fd ffa2 	bl	8005880 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d10a      	bne.n	800795a <prvAddCurrentTaskToDelayedList+0x3a>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800794a:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4819      	ldr	r0, [pc, #100]	; (80079b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007954:	f7fd ff37 	bl	80057c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007958:	e026      	b.n	80079a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4413      	add	r3, r2
 8007960:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	429a      	cmp	r2, r3
 8007970:	d209      	bcs.n	8007986 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f7fd ff45 	bl	800580e <vListInsert>
}
 8007984:	e010      	b.n	80079a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3304      	adds	r3, #4
 8007990:	4619      	mov	r1, r3
 8007992:	4610      	mov	r0, r2
 8007994:	f7fd ff3b 	bl	800580e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d202      	bcs.n	80079a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079a2:	4a08      	ldr	r2, [pc, #32]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6013      	str	r3, [r2, #0]
}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20001060 	.word	0x20001060
 80079b4:	20000b88 	.word	0x20000b88
 80079b8:	20001048 	.word	0x20001048
 80079bc:	20001018 	.word	0x20001018
 80079c0:	20001014 	.word	0x20001014
 80079c4:	2000107c 	.word	0x2000107c

080079c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079d2:	f000 fb07 	bl	8007fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079d6:	4b1c      	ldr	r3, [pc, #112]	; (8007a48 <xTimerCreateTimerTask+0x80>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d021      	beq.n	8007a22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079e6:	1d3a      	adds	r2, r7, #4
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	f107 030c 	add.w	r3, r7, #12
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fd fea1 	bl	8005738 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	9202      	str	r2, [sp, #8]
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	2302      	movs	r3, #2
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	460a      	mov	r2, r1
 8007a08:	4910      	ldr	r1, [pc, #64]	; (8007a4c <xTimerCreateTimerTask+0x84>)
 8007a0a:	4811      	ldr	r0, [pc, #68]	; (8007a50 <xTimerCreateTimerTask+0x88>)
 8007a0c:	f7fe ffa6 	bl	800695c <xTaskCreateStatic>
 8007a10:	4603      	mov	r3, r0
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <xTimerCreateTimerTask+0x8c>)
 8007a14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <xTimerCreateTimerTask+0x8c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	613b      	str	r3, [r7, #16]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a3e:	697b      	ldr	r3, [r7, #20]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	200010b8 	.word	0x200010b8
 8007a4c:	08009e04 	.word	0x08009e04
 8007a50:	08007b8d 	.word	0x08007b8d
 8007a54:	200010bc 	.word	0x200010bc

08007a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	623b      	str	r3, [r7, #32]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a86:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <xTimerGenericCommand+0x98>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02a      	beq.n	8007ae4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b05      	cmp	r3, #5
 8007a9e:	dc18      	bgt.n	8007ad2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007aa0:	f7ff fdb4 	bl	800760c <xTaskGetSchedulerState>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d109      	bne.n	8007abe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007aaa:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <xTimerGenericCommand+0x98>)
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	f107 0110 	add.w	r1, r7, #16
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab6:	f7fe f96b 	bl	8005d90 <xQueueGenericSend>
 8007aba:	6278      	str	r0, [r7, #36]	; 0x24
 8007abc:	e012      	b.n	8007ae4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <xTimerGenericCommand+0x98>)
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f107 0110 	add.w	r1, r7, #16
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f7fe f961 	bl	8005d90 <xQueueGenericSend>
 8007ace:	6278      	str	r0, [r7, #36]	; 0x24
 8007ad0:	e008      	b.n	8007ae4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <xTimerGenericCommand+0x98>)
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	f107 0110 	add.w	r1, r7, #16
 8007ada:	2300      	movs	r3, #0
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	f7fe fa55 	bl	8005f8c <xQueueGenericSendFromISR>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3728      	adds	r7, #40	; 0x28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200010b8 	.word	0x200010b8

08007af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afe:	4b22      	ldr	r3, [pc, #136]	; (8007b88 <prvProcessExpiredTimer+0x94>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd feb7 	bl	8005880 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d022      	beq.n	8007b66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	18d1      	adds	r1, r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	6978      	ldr	r0, [r7, #20]
 8007b2e:	f000 f8d1 	bl	8007cd4 <prvInsertTimerInActiveList>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01f      	beq.n	8007b78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	2100      	movs	r1, #0
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f7ff ff88 	bl	8007a58 <xTimerGenericCommand>
 8007b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d113      	bne.n	8007b78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	6978      	ldr	r0, [r7, #20]
 8007b7e:	4798      	blx	r3
}
 8007b80:	bf00      	nop
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200010b0 	.word	0x200010b0

08007b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b94:	f107 0308 	add.w	r3, r7, #8
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f857 	bl	8007c4c <prvGetNextExpireTime>
 8007b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f803 	bl	8007bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007baa:	f000 f8d5 	bl	8007d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bae:	e7f1      	b.n	8007b94 <prvTimerTask+0x8>

08007bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bba:	f7ff f92b 	bl	8006e14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bbe:	f107 0308 	add.w	r3, r7, #8
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f866 	bl	8007c94 <prvSampleTimeNow>
 8007bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d130      	bne.n	8007c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <prvProcessTimerOrBlockTask+0x3c>
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d806      	bhi.n	8007bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007bde:	f7ff f927 	bl	8006e30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ff85 	bl	8007af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007bea:	e024      	b.n	8007c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bf2:	4b13      	ldr	r3, [pc, #76]	; (8007c40 <prvProcessTimerOrBlockTask+0x90>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <prvProcessTimerOrBlockTask+0x50>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <prvProcessTimerOrBlockTask+0x52>
 8007c00:	2300      	movs	r3, #0
 8007c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c04:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <prvProcessTimerOrBlockTask+0x94>)
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f7fe fe6f 	bl	80068f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c16:	f7ff f90b 	bl	8006e30 <xTaskResumeAll>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c20:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <prvProcessTimerOrBlockTask+0x98>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
}
 8007c30:	e001      	b.n	8007c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c32:	f7ff f8fd 	bl	8006e30 <xTaskResumeAll>
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200010b4 	.word	0x200010b4
 8007c44:	200010b8 	.word	0x200010b8
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c54:	4b0e      	ldr	r3, [pc, #56]	; (8007c90 <prvGetNextExpireTime+0x44>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <prvGetNextExpireTime+0x16>
 8007c5e:	2201      	movs	r2, #1
 8007c60:	e000      	b.n	8007c64 <prvGetNextExpireTime+0x18>
 8007c62:	2200      	movs	r2, #0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <prvGetNextExpireTime+0x44>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e001      	b.n	8007c80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c80:	68fb      	ldr	r3, [r7, #12]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	200010b0 	.word	0x200010b0

08007c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c9c:	f7ff f966 	bl	8006f6c <xTaskGetTickCount>
 8007ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <prvSampleTimeNow+0x3c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d205      	bcs.n	8007cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cac:	f000 f936 	bl	8007f1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cbe:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <prvSampleTimeNow+0x3c>)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	200010c0 	.word	0x200010c0

08007cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d812      	bhi.n	8007d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d302      	bcc.n	8007d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e01b      	b.n	8007d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d0e:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <prvInsertTimerInActiveList+0x7c>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3304      	adds	r3, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7fd fd78 	bl	800580e <vListInsert>
 8007d1e:	e012      	b.n	8007d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d206      	bcs.n	8007d36 <prvInsertTimerInActiveList+0x62>
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	e007      	b.n	8007d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <prvInsertTimerInActiveList+0x80>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7fd fd64 	bl	800580e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d46:	697b      	ldr	r3, [r7, #20]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200010b4 	.word	0x200010b4
 8007d54:	200010b0 	.word	0x200010b0

08007d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08e      	sub	sp, #56	; 0x38
 8007d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d5e:	e0ca      	b.n	8007ef6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da18      	bge.n	8007d98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d66:	1d3b      	adds	r3, r7, #4
 8007d68:	3304      	adds	r3, #4
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61fb      	str	r3, [r7, #28]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d8e:	6850      	ldr	r0, [r2, #4]
 8007d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d92:	6892      	ldr	r2, [r2, #8]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f2c0 80aa 	blt.w	8007ef4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	3304      	adds	r3, #4
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fd fd65 	bl	8005880 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007db6:	463b      	mov	r3, r7
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ff6b 	bl	8007c94 <prvSampleTimeNow>
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	f200 8097 	bhi.w	8007ef6 <prvProcessReceivedCommands+0x19e>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <prvProcessReceivedCommands+0x78>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007df9 	.word	0x08007df9
 8007dd4:	08007df9 	.word	0x08007df9
 8007dd8:	08007df9 	.word	0x08007df9
 8007ddc:	08007e6d 	.word	0x08007e6d
 8007de0:	08007e81 	.word	0x08007e81
 8007de4:	08007ecb 	.word	0x08007ecb
 8007de8:	08007df9 	.word	0x08007df9
 8007dec:	08007df9 	.word	0x08007df9
 8007df0:	08007e6d 	.word	0x08007e6d
 8007df4:	08007e81 	.word	0x08007e81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	18d1      	adds	r1, r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e18:	f7ff ff5c 	bl	8007cd4 <prvInsertTimerInActiveList>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d069      	beq.n	8007ef6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d05e      	beq.n	8007ef6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	441a      	add	r2, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	2100      	movs	r1, #0
 8007e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4a:	f7ff fe05 	bl	8007a58 <xTimerGenericCommand>
 8007e4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d14f      	bne.n	8007ef6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	61bb      	str	r3, [r7, #24]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e7e:	e03a      	b.n	8007ef6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	617b      	str	r3, [r7, #20]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	18d1      	adds	r1, r2, r3
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec4:	f7ff ff06 	bl	8007cd4 <prvInsertTimerInActiveList>
					break;
 8007ec8:	e015      	b.n	8007ef6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d103      	bne.n	8007ee0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eda:	f000 fbe1 	bl	80086a0 <vPortFree>
 8007ede:	e00a      	b.n	8007ef6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ef2:	e000      	b.n	8007ef6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ef6:	4b08      	ldr	r3, [pc, #32]	; (8007f18 <prvProcessReceivedCommands+0x1c0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	1d39      	adds	r1, r7, #4
 8007efc:	2200      	movs	r2, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe f96c 	bl	80061dc <xQueueReceive>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f47f af2a 	bne.w	8007d60 <prvProcessReceivedCommands+0x8>
	}
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	3730      	adds	r7, #48	; 0x30
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	200010b8 	.word	0x200010b8

08007f1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f22:	e048      	b.n	8007fb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f24:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <prvSwitchTimerLists+0xc0>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2e:	4b2b      	ldr	r3, [pc, #172]	; (8007fdc <prvSwitchTimerLists+0xc0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd fc9f 	bl	8005880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02e      	beq.n	8007fb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4413      	add	r3, r2
 8007f60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d90e      	bls.n	8007f88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f76:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <prvSwitchTimerLists+0xc0>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7fd fc44 	bl	800580e <vListInsert>
 8007f86:	e016      	b.n	8007fb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	2100      	movs	r1, #0
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f7ff fd60 	bl	8007a58 <xTimerGenericCommand>
 8007f98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	603b      	str	r3, [r7, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <prvSwitchTimerLists+0xc0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1b1      	bne.n	8007f24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <prvSwitchTimerLists+0xc0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <prvSwitchTimerLists+0xc4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <prvSwitchTimerLists+0xc0>)
 8007fcc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fce:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <prvSwitchTimerLists+0xc4>)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	6013      	str	r3, [r2, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200010b0 	.word	0x200010b0
 8007fe0:	200010b4 	.word	0x200010b4

08007fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fea:	f000 f96b 	bl	80082c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fee:	4b15      	ldr	r3, [pc, #84]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d120      	bne.n	8008038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ff6:	4814      	ldr	r0, [pc, #80]	; (8008048 <prvCheckForValidListAndQueue+0x64>)
 8007ff8:	f7fd fbb8 	bl	800576c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ffc:	4813      	ldr	r0, [pc, #76]	; (800804c <prvCheckForValidListAndQueue+0x68>)
 8007ffe:	f7fd fbb5 	bl	800576c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008002:	4b13      	ldr	r3, [pc, #76]	; (8008050 <prvCheckForValidListAndQueue+0x6c>)
 8008004:	4a10      	ldr	r2, [pc, #64]	; (8008048 <prvCheckForValidListAndQueue+0x64>)
 8008006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008008:	4b12      	ldr	r3, [pc, #72]	; (8008054 <prvCheckForValidListAndQueue+0x70>)
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <prvCheckForValidListAndQueue+0x68>)
 800800c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <prvCheckForValidListAndQueue+0x74>)
 8008014:	4a11      	ldr	r2, [pc, #68]	; (800805c <prvCheckForValidListAndQueue+0x78>)
 8008016:	2110      	movs	r1, #16
 8008018:	200a      	movs	r0, #10
 800801a:	f7fd fcc3 	bl	80059a4 <xQueueGenericCreateStatic>
 800801e:	4603      	mov	r3, r0
 8008020:	4a08      	ldr	r2, [pc, #32]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 8008022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <prvCheckForValidListAndQueue+0x60>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	490b      	ldr	r1, [pc, #44]	; (8008060 <prvCheckForValidListAndQueue+0x7c>)
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fc0a 	bl	800684c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008038:	f000 f974 	bl	8008324 <vPortExitCritical>
}
 800803c:	bf00      	nop
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	200010b8 	.word	0x200010b8
 8008048:	20001088 	.word	0x20001088
 800804c:	2000109c 	.word	0x2000109c
 8008050:	200010b0 	.word	0x200010b0
 8008054:	200010b4 	.word	0x200010b4
 8008058:	20001164 	.word	0x20001164
 800805c:	200010c4 	.word	0x200010c4
 8008060:	08009e0c 	.word	0x08009e0c

08008064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3b04      	subs	r3, #4
 8008074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800807c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3b04      	subs	r3, #4
 8008082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f023 0201 	bic.w	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b04      	subs	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008094:	4a0c      	ldr	r2, [pc, #48]	; (80080c8 <pxPortInitialiseStack+0x64>)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3b14      	subs	r3, #20
 800809e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b04      	subs	r3, #4
 80080aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f06f 0202 	mvn.w	r2, #2
 80080b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3b20      	subs	r3, #32
 80080b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ba:	68fb      	ldr	r3, [r7, #12]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	080080cd 	.word	0x080080cd

080080cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080d6:	4b12      	ldr	r3, [pc, #72]	; (8008120 <prvTaskExitError+0x54>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d00a      	beq.n	80080f6 <prvTaskExitError+0x2a>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <prvTaskExitError+0x28>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	60bb      	str	r3, [r7, #8]
}
 8008108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800810a:	bf00      	nop
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0fc      	beq.n	800810c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000014 	.word	0x20000014
	...

08008130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <pxCurrentTCBConst2>)
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	6808      	ldr	r0, [r1, #0]
 8008136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	f380 8809 	msr	PSP, r0
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f04f 0000 	mov.w	r0, #0
 8008146:	f380 8811 	msr	BASEPRI, r0
 800814a:	4770      	bx	lr
 800814c:	f3af 8000 	nop.w

08008150 <pxCurrentTCBConst2>:
 8008150:	20000b88 	.word	0x20000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008158:	4808      	ldr	r0, [pc, #32]	; (800817c <prvPortStartFirstTask+0x24>)
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	6800      	ldr	r0, [r0, #0]
 800815e:	f380 8808 	msr	MSP, r0
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8814 	msr	CONTROL, r0
 800816a:	b662      	cpsie	i
 800816c:	b661      	cpsie	f
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	df00      	svc	0
 8008178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800817a:	bf00      	nop
 800817c:	e000ed08 	.word	0xe000ed08

08008180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008186:	4b46      	ldr	r3, [pc, #280]	; (80082a0 <xPortStartScheduler+0x120>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a46      	ldr	r2, [pc, #280]	; (80082a4 <xPortStartScheduler+0x124>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d10a      	bne.n	80081a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	613b      	str	r3, [r7, #16]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081a6:	4b3e      	ldr	r3, [pc, #248]	; (80082a0 <xPortStartScheduler+0x120>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a3f      	ldr	r2, [pc, #252]	; (80082a8 <xPortStartScheduler+0x128>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10a      	bne.n	80081c6 <xPortStartScheduler+0x46>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	60fb      	str	r3, [r7, #12]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081c6:	4b39      	ldr	r3, [pc, #228]	; (80082ac <xPortStartScheduler+0x12c>)
 80081c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	22ff      	movs	r2, #255	; 0xff
 80081d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	4b31      	ldr	r3, [pc, #196]	; (80082b0 <xPortStartScheduler+0x130>)
 80081ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081ee:	4b31      	ldr	r3, [pc, #196]	; (80082b4 <xPortStartScheduler+0x134>)
 80081f0:	2207      	movs	r2, #7
 80081f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081f4:	e009      	b.n	800820a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081f6:	4b2f      	ldr	r3, [pc, #188]	; (80082b4 <xPortStartScheduler+0x134>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	4a2d      	ldr	r2, [pc, #180]	; (80082b4 <xPortStartScheduler+0x134>)
 80081fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	b2db      	uxtb	r3, r3
 8008208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d0ef      	beq.n	80081f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008216:	4b27      	ldr	r3, [pc, #156]	; (80082b4 <xPortStartScheduler+0x134>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1c3 0307 	rsb	r3, r3, #7
 800821e:	2b04      	cmp	r3, #4
 8008220:	d00a      	beq.n	8008238 <xPortStartScheduler+0xb8>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	60bb      	str	r3, [r7, #8]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008238:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <xPortStartScheduler+0x134>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <xPortStartScheduler+0x134>)
 8008240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008242:	4b1c      	ldr	r3, [pc, #112]	; (80082b4 <xPortStartScheduler+0x134>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800824a:	4a1a      	ldr	r2, [pc, #104]	; (80082b4 <xPortStartScheduler+0x134>)
 800824c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	b2da      	uxtb	r2, r3
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008256:	4b18      	ldr	r3, [pc, #96]	; (80082b8 <xPortStartScheduler+0x138>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <xPortStartScheduler+0x138>)
 800825c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <xPortStartScheduler+0x138>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a14      	ldr	r2, [pc, #80]	; (80082b8 <xPortStartScheduler+0x138>)
 8008268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800826c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800826e:	f000 f8dd 	bl	800842c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008272:	4b12      	ldr	r3, [pc, #72]	; (80082bc <xPortStartScheduler+0x13c>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008278:	f000 f8fc 	bl	8008474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800827c:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <xPortStartScheduler+0x140>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0f      	ldr	r2, [pc, #60]	; (80082c0 <xPortStartScheduler+0x140>)
 8008282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008288:	f7ff ff66 	bl	8008158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800828c:	f7fe ff38 	bl	8007100 <vTaskSwitchContext>
	prvTaskExitError();
 8008290:	f7ff ff1c 	bl	80080cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	e000ed00 	.word	0xe000ed00
 80082a4:	410fc271 	.word	0x410fc271
 80082a8:	410fc270 	.word	0x410fc270
 80082ac:	e000e400 	.word	0xe000e400
 80082b0:	200011b4 	.word	0x200011b4
 80082b4:	200011b8 	.word	0x200011b8
 80082b8:	e000ed20 	.word	0xe000ed20
 80082bc:	20000014 	.word	0x20000014
 80082c0:	e000ef34 	.word	0xe000ef34

080082c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	607b      	str	r3, [r7, #4]
}
 80082dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082de:	4b0f      	ldr	r3, [pc, #60]	; (800831c <vPortEnterCritical+0x58>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	4a0d      	ldr	r2, [pc, #52]	; (800831c <vPortEnterCritical+0x58>)
 80082e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082e8:	4b0c      	ldr	r3, [pc, #48]	; (800831c <vPortEnterCritical+0x58>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d10f      	bne.n	8008310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082f0:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <vPortEnterCritical+0x5c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <vPortEnterCritical+0x4c>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	603b      	str	r3, [r7, #0]
}
 800830c:	bf00      	nop
 800830e:	e7fe      	b.n	800830e <vPortEnterCritical+0x4a>
	}
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	20000014 	.word	0x20000014
 8008320:	e000ed04 	.word	0xe000ed04

08008324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800832a:	4b12      	ldr	r3, [pc, #72]	; (8008374 <vPortExitCritical+0x50>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <vPortExitCritical+0x24>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	607b      	str	r3, [r7, #4]
}
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <vPortExitCritical+0x50>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3b01      	subs	r3, #1
 800834e:	4a09      	ldr	r2, [pc, #36]	; (8008374 <vPortExitCritical+0x50>)
 8008350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008352:	4b08      	ldr	r3, [pc, #32]	; (8008374 <vPortExitCritical+0x50>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <vPortExitCritical+0x42>
 800835a:	2300      	movs	r3, #0
 800835c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f383 8811 	msr	BASEPRI, r3
}
 8008364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000014 	.word	0x20000014
	...

08008380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008380:	f3ef 8009 	mrs	r0, PSP
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <pxCurrentTCBConst>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	f01e 0f10 	tst.w	lr, #16
 8008390:	bf08      	it	eq
 8008392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083a4:	f380 8811 	msr	BASEPRI, r0
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f7fe fea6 	bl	8007100 <vTaskSwitchContext>
 80083b4:	f04f 0000 	mov.w	r0, #0
 80083b8:	f380 8811 	msr	BASEPRI, r0
 80083bc:	bc09      	pop	{r0, r3}
 80083be:	6819      	ldr	r1, [r3, #0]
 80083c0:	6808      	ldr	r0, [r1, #0]
 80083c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c6:	f01e 0f10 	tst.w	lr, #16
 80083ca:	bf08      	it	eq
 80083cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083d0:	f380 8809 	msr	PSP, r0
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w

080083e0 <pxCurrentTCBConst>:
 80083e0:	20000b88 	.word	0x20000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop

080083e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	607b      	str	r3, [r7, #4]
}
 8008400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008402:	f7fe fdc3 	bl	8006f8c <xTaskIncrementTick>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800840c:	4b06      	ldr	r3, [pc, #24]	; (8008428 <xPortSysTickHandler+0x40>)
 800840e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	2300      	movs	r3, #0
 8008416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	f383 8811 	msr	BASEPRI, r3
}
 800841e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008430:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <vPortSetupTimerInterrupt+0x34>)
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <vPortSetupTimerInterrupt+0x38>)
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <vPortSetupTimerInterrupt+0x3c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a0a      	ldr	r2, [pc, #40]	; (800846c <vPortSetupTimerInterrupt+0x40>)
 8008442:	fba2 2303 	umull	r2, r3, r2, r3
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	4a09      	ldr	r2, [pc, #36]	; (8008470 <vPortSetupTimerInterrupt+0x44>)
 800844a:	3b01      	subs	r3, #1
 800844c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800844e:	4b04      	ldr	r3, [pc, #16]	; (8008460 <vPortSetupTimerInterrupt+0x34>)
 8008450:	2207      	movs	r2, #7
 8008452:	601a      	str	r2, [r3, #0]
}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	e000e010 	.word	0xe000e010
 8008464:	e000e018 	.word	0xe000e018
 8008468:	20000008 	.word	0x20000008
 800846c:	10624dd3 	.word	0x10624dd3
 8008470:	e000e014 	.word	0xe000e014

08008474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008484 <vPortEnableVFP+0x10>
 8008478:	6801      	ldr	r1, [r0, #0]
 800847a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800847e:	6001      	str	r1, [r0, #0]
 8008480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008482:	bf00      	nop
 8008484:	e000ed88 	.word	0xe000ed88

08008488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800848e:	f3ef 8305 	mrs	r3, IPSR
 8008492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b0f      	cmp	r3, #15
 8008498:	d914      	bls.n	80084c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800849a:	4a17      	ldr	r2, [pc, #92]	; (80084f8 <vPortValidateInterruptPriority+0x70>)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084a4:	4b15      	ldr	r3, [pc, #84]	; (80084fc <vPortValidateInterruptPriority+0x74>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	7afa      	ldrb	r2, [r7, #11]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d20a      	bcs.n	80084c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <vPortValidateInterruptPriority+0x78>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <vPortValidateInterruptPriority+0x7c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d90a      	bls.n	80084ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	603b      	str	r3, [r7, #0]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <vPortValidateInterruptPriority+0x60>
	}
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	e000e3f0 	.word	0xe000e3f0
 80084fc:	200011b4 	.word	0x200011b4
 8008500:	e000ed0c 	.word	0xe000ed0c
 8008504:	200011b8 	.word	0x200011b8

08008508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	; 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008514:	f7fe fc7e 	bl	8006e14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008518:	4b5b      	ldr	r3, [pc, #364]	; (8008688 <pvPortMalloc+0x180>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008520:	f000 f920 	bl	8008764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008524:	4b59      	ldr	r3, [pc, #356]	; (800868c <pvPortMalloc+0x184>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4013      	ands	r3, r2
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 8093 	bne.w	8008658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01d      	beq.n	8008574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008538:	2208      	movs	r2, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d014      	beq.n	8008574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f023 0307 	bic.w	r3, r3, #7
 8008550:	3308      	adds	r3, #8
 8008552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <pvPortMalloc+0x6c>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	617b      	str	r3, [r7, #20]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d06e      	beq.n	8008658 <pvPortMalloc+0x150>
 800857a:	4b45      	ldr	r3, [pc, #276]	; (8008690 <pvPortMalloc+0x188>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d869      	bhi.n	8008658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008584:	4b43      	ldr	r3, [pc, #268]	; (8008694 <pvPortMalloc+0x18c>)
 8008586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008588:	4b42      	ldr	r3, [pc, #264]	; (8008694 <pvPortMalloc+0x18c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800858e:	e004      	b.n	800859a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d903      	bls.n	80085ac <pvPortMalloc+0xa4>
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1f1      	bne.n	8008590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085ac:	4b36      	ldr	r3, [pc, #216]	; (8008688 <pvPortMalloc+0x180>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d050      	beq.n	8008658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2208      	movs	r2, #8
 80085bc:	4413      	add	r3, r2
 80085be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	2308      	movs	r3, #8
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d91f      	bls.n	8008618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <pvPortMalloc+0xf8>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	613b      	str	r3, [r7, #16]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008612:	69b8      	ldr	r0, [r7, #24]
 8008614:	f000 f908 	bl	8008828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008618:	4b1d      	ldr	r3, [pc, #116]	; (8008690 <pvPortMalloc+0x188>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <pvPortMalloc+0x188>)
 8008624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008626:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <pvPortMalloc+0x188>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <pvPortMalloc+0x190>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d203      	bcs.n	800863a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008632:	4b17      	ldr	r3, [pc, #92]	; (8008690 <pvPortMalloc+0x188>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a18      	ldr	r2, [pc, #96]	; (8008698 <pvPortMalloc+0x190>)
 8008638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <pvPortMalloc+0x184>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	431a      	orrs	r2, r3
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <pvPortMalloc+0x194>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	4a11      	ldr	r2, [pc, #68]	; (800869c <pvPortMalloc+0x194>)
 8008656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008658:	f7fe fbea 	bl	8006e30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <pvPortMalloc+0x174>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60fb      	str	r3, [r7, #12]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <pvPortMalloc+0x172>
	return pvReturn;
 800867c:	69fb      	ldr	r3, [r7, #28]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	; 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20004dc4 	.word	0x20004dc4
 800868c:	20004dd8 	.word	0x20004dd8
 8008690:	20004dc8 	.word	0x20004dc8
 8008694:	20004dbc 	.word	0x20004dbc
 8008698:	20004dcc 	.word	0x20004dcc
 800869c:	20004dd0 	.word	0x20004dd0

080086a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d04d      	beq.n	800874e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086b2:	2308      	movs	r3, #8
 80086b4:	425b      	negs	r3, r3
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4413      	add	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	4b24      	ldr	r3, [pc, #144]	; (8008758 <vPortFree+0xb8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10a      	bne.n	80086e4 <vPortFree+0x44>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <vPortFree+0x62>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	60bb      	str	r3, [r7, #8]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	4b14      	ldr	r3, [pc, #80]	; (8008758 <vPortFree+0xb8>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01e      	beq.n	800874e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11a      	bne.n	800874e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <vPortFree+0xb8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	43db      	mvns	r3, r3
 8008722:	401a      	ands	r2, r3
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008728:	f7fe fb74 	bl	8006e14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	4b0a      	ldr	r3, [pc, #40]	; (800875c <vPortFree+0xbc>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4413      	add	r3, r2
 8008736:	4a09      	ldr	r2, [pc, #36]	; (800875c <vPortFree+0xbc>)
 8008738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f000 f874 	bl	8008828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <vPortFree+0xc0>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a06      	ldr	r2, [pc, #24]	; (8008760 <vPortFree+0xc0>)
 8008748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800874a:	f7fe fb71 	bl	8006e30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20004dd8 	.word	0x20004dd8
 800875c:	20004dc8 	.word	0x20004dc8
 8008760:	20004dd4 	.word	0x20004dd4

08008764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800876a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800876e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008770:	4b27      	ldr	r3, [pc, #156]	; (8008810 <prvHeapInit+0xac>)
 8008772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3307      	adds	r3, #7
 8008782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0307 	bic.w	r3, r3, #7
 800878a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <prvHeapInit+0xac>)
 8008794:	4413      	add	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800879c:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <prvHeapInit+0xb0>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087a2:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <prvHeapInit+0xb0>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087b0:	2208      	movs	r2, #8
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4a15      	ldr	r2, [pc, #84]	; (8008818 <prvHeapInit+0xb4>)
 80087c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087c6:	4b14      	ldr	r3, [pc, #80]	; (8008818 <prvHeapInit+0xb4>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2200      	movs	r2, #0
 80087cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087ce:	4b12      	ldr	r3, [pc, #72]	; (8008818 <prvHeapInit+0xb4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087e4:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <prvHeapInit+0xb4>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	4a0a      	ldr	r2, [pc, #40]	; (800881c <prvHeapInit+0xb8>)
 80087f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	4a09      	ldr	r2, [pc, #36]	; (8008820 <prvHeapInit+0xbc>)
 80087fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <prvHeapInit+0xc0>)
 80087fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	200011bc 	.word	0x200011bc
 8008814:	20004dbc 	.word	0x20004dbc
 8008818:	20004dc4 	.word	0x20004dc4
 800881c:	20004dcc 	.word	0x20004dcc
 8008820:	20004dc8 	.word	0x20004dc8
 8008824:	20004dd8 	.word	0x20004dd8

08008828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008830:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <prvInsertBlockIntoFreeList+0xac>)
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e002      	b.n	800883c <prvInsertBlockIntoFreeList+0x14>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d8f7      	bhi.n	8008836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d108      	bne.n	800886a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	441a      	add	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	441a      	add	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d118      	bne.n	80088b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d00d      	beq.n	80088a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	441a      	add	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e008      	b.n	80088b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <prvInsertBlockIntoFreeList+0xb0>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e003      	b.n	80088b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d002      	beq.n	80088c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088c6:	bf00      	nop
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20004dbc 	.word	0x20004dbc
 80088d8:	20004dc4 	.word	0x20004dc4

080088dc <__errno>:
 80088dc:	4b01      	ldr	r3, [pc, #4]	; (80088e4 <__errno+0x8>)
 80088de:	6818      	ldr	r0, [r3, #0]
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20000018 	.word	0x20000018

080088e8 <std>:
 80088e8:	2300      	movs	r3, #0
 80088ea:	b510      	push	{r4, lr}
 80088ec:	4604      	mov	r4, r0
 80088ee:	e9c0 3300 	strd	r3, r3, [r0]
 80088f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088f6:	6083      	str	r3, [r0, #8]
 80088f8:	8181      	strh	r1, [r0, #12]
 80088fa:	6643      	str	r3, [r0, #100]	; 0x64
 80088fc:	81c2      	strh	r2, [r0, #14]
 80088fe:	6183      	str	r3, [r0, #24]
 8008900:	4619      	mov	r1, r3
 8008902:	2208      	movs	r2, #8
 8008904:	305c      	adds	r0, #92	; 0x5c
 8008906:	f000 f91a 	bl	8008b3e <memset>
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <std+0x38>)
 800890c:	6263      	str	r3, [r4, #36]	; 0x24
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <std+0x3c>)
 8008910:	62a3      	str	r3, [r4, #40]	; 0x28
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <std+0x40>)
 8008914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008916:	4b05      	ldr	r3, [pc, #20]	; (800892c <std+0x44>)
 8008918:	6224      	str	r4, [r4, #32]
 800891a:	6323      	str	r3, [r4, #48]	; 0x30
 800891c:	bd10      	pop	{r4, pc}
 800891e:	bf00      	nop
 8008920:	08008e05 	.word	0x08008e05
 8008924:	08008e27 	.word	0x08008e27
 8008928:	08008e5f 	.word	0x08008e5f
 800892c:	08008e83 	.word	0x08008e83

08008930 <_cleanup_r>:
 8008930:	4901      	ldr	r1, [pc, #4]	; (8008938 <_cleanup_r+0x8>)
 8008932:	f000 b8af 	b.w	8008a94 <_fwalk_reent>
 8008936:	bf00      	nop
 8008938:	08008ff5 	.word	0x08008ff5

0800893c <__sfmoreglue>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	2268      	movs	r2, #104	; 0x68
 8008940:	1e4d      	subs	r5, r1, #1
 8008942:	4355      	muls	r5, r2
 8008944:	460e      	mov	r6, r1
 8008946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800894a:	f000 f921 	bl	8008b90 <_malloc_r>
 800894e:	4604      	mov	r4, r0
 8008950:	b140      	cbz	r0, 8008964 <__sfmoreglue+0x28>
 8008952:	2100      	movs	r1, #0
 8008954:	e9c0 1600 	strd	r1, r6, [r0]
 8008958:	300c      	adds	r0, #12
 800895a:	60a0      	str	r0, [r4, #8]
 800895c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008960:	f000 f8ed 	bl	8008b3e <memset>
 8008964:	4620      	mov	r0, r4
 8008966:	bd70      	pop	{r4, r5, r6, pc}

08008968 <__sfp_lock_acquire>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__sfp_lock_acquire+0x8>)
 800896a:	f000 b8d8 	b.w	8008b1e <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	20004ddd 	.word	0x20004ddd

08008974 <__sfp_lock_release>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__sfp_lock_release+0x8>)
 8008976:	f000 b8d3 	b.w	8008b20 <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	20004ddd 	.word	0x20004ddd

08008980 <__sinit_lock_acquire>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__sinit_lock_acquire+0x8>)
 8008982:	f000 b8cc 	b.w	8008b1e <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	20004dde 	.word	0x20004dde

0800898c <__sinit_lock_release>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__sinit_lock_release+0x8>)
 800898e:	f000 b8c7 	b.w	8008b20 <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	20004dde 	.word	0x20004dde

08008998 <__sinit>:
 8008998:	b510      	push	{r4, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	f7ff fff0 	bl	8008980 <__sinit_lock_acquire>
 80089a0:	69a3      	ldr	r3, [r4, #24]
 80089a2:	b11b      	cbz	r3, 80089ac <__sinit+0x14>
 80089a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a8:	f7ff bff0 	b.w	800898c <__sinit_lock_release>
 80089ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089b0:	6523      	str	r3, [r4, #80]	; 0x50
 80089b2:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <__sinit+0x68>)
 80089b4:	4a13      	ldr	r2, [pc, #76]	; (8008a04 <__sinit+0x6c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	bf04      	itt	eq
 80089be:	2301      	moveq	r3, #1
 80089c0:	61a3      	streq	r3, [r4, #24]
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f820 	bl	8008a08 <__sfp>
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 f81c 	bl	8008a08 <__sfp>
 80089d0:	60a0      	str	r0, [r4, #8]
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 f818 	bl	8008a08 <__sfp>
 80089d8:	2200      	movs	r2, #0
 80089da:	60e0      	str	r0, [r4, #12]
 80089dc:	2104      	movs	r1, #4
 80089de:	6860      	ldr	r0, [r4, #4]
 80089e0:	f7ff ff82 	bl	80088e8 <std>
 80089e4:	68a0      	ldr	r0, [r4, #8]
 80089e6:	2201      	movs	r2, #1
 80089e8:	2109      	movs	r1, #9
 80089ea:	f7ff ff7d 	bl	80088e8 <std>
 80089ee:	68e0      	ldr	r0, [r4, #12]
 80089f0:	2202      	movs	r2, #2
 80089f2:	2112      	movs	r1, #18
 80089f4:	f7ff ff78 	bl	80088e8 <std>
 80089f8:	2301      	movs	r3, #1
 80089fa:	61a3      	str	r3, [r4, #24]
 80089fc:	e7d2      	b.n	80089a4 <__sinit+0xc>
 80089fe:	bf00      	nop
 8008a00:	08009f84 	.word	0x08009f84
 8008a04:	08008931 	.word	0x08008931

08008a08 <__sfp>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	f7ff ffac 	bl	8008968 <__sfp_lock_acquire>
 8008a10:	4b1e      	ldr	r3, [pc, #120]	; (8008a8c <__sfp+0x84>)
 8008a12:	681e      	ldr	r6, [r3, #0]
 8008a14:	69b3      	ldr	r3, [r6, #24]
 8008a16:	b913      	cbnz	r3, 8008a1e <__sfp+0x16>
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff ffbd 	bl	8008998 <__sinit>
 8008a1e:	3648      	adds	r6, #72	; 0x48
 8008a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	d503      	bpl.n	8008a30 <__sfp+0x28>
 8008a28:	6833      	ldr	r3, [r6, #0]
 8008a2a:	b30b      	cbz	r3, 8008a70 <__sfp+0x68>
 8008a2c:	6836      	ldr	r6, [r6, #0]
 8008a2e:	e7f7      	b.n	8008a20 <__sfp+0x18>
 8008a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a34:	b9d5      	cbnz	r5, 8008a6c <__sfp+0x64>
 8008a36:	4b16      	ldr	r3, [pc, #88]	; (8008a90 <__sfp+0x88>)
 8008a38:	60e3      	str	r3, [r4, #12]
 8008a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8008a40:	f000 f86c 	bl	8008b1c <__retarget_lock_init_recursive>
 8008a44:	f7ff ff96 	bl	8008974 <__sfp_lock_release>
 8008a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a50:	6025      	str	r5, [r4, #0]
 8008a52:	61a5      	str	r5, [r4, #24]
 8008a54:	2208      	movs	r2, #8
 8008a56:	4629      	mov	r1, r5
 8008a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a5c:	f000 f86f 	bl	8008b3e <memset>
 8008a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a68:	4620      	mov	r0, r4
 8008a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6c:	3468      	adds	r4, #104	; 0x68
 8008a6e:	e7d9      	b.n	8008a24 <__sfp+0x1c>
 8008a70:	2104      	movs	r1, #4
 8008a72:	4638      	mov	r0, r7
 8008a74:	f7ff ff62 	bl	800893c <__sfmoreglue>
 8008a78:	4604      	mov	r4, r0
 8008a7a:	6030      	str	r0, [r6, #0]
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d1d5      	bne.n	8008a2c <__sfp+0x24>
 8008a80:	f7ff ff78 	bl	8008974 <__sfp_lock_release>
 8008a84:	230c      	movs	r3, #12
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	e7ee      	b.n	8008a68 <__sfp+0x60>
 8008a8a:	bf00      	nop
 8008a8c:	08009f84 	.word	0x08009f84
 8008a90:	ffff0001 	.word	0xffff0001

08008a94 <_fwalk_reent>:
 8008a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a98:	4606      	mov	r6, r0
 8008a9a:	4688      	mov	r8, r1
 8008a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008aa0:	2700      	movs	r7, #0
 8008aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8008aaa:	d505      	bpl.n	8008ab8 <_fwalk_reent+0x24>
 8008aac:	6824      	ldr	r4, [r4, #0]
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	d1f7      	bne.n	8008aa2 <_fwalk_reent+0xe>
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab8:	89ab      	ldrh	r3, [r5, #12]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d907      	bls.n	8008ace <_fwalk_reent+0x3a>
 8008abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	d003      	beq.n	8008ace <_fwalk_reent+0x3a>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	47c0      	blx	r8
 8008acc:	4307      	orrs	r7, r0
 8008ace:	3568      	adds	r5, #104	; 0x68
 8008ad0:	e7e9      	b.n	8008aa6 <_fwalk_reent+0x12>
	...

08008ad4 <__libc_init_array>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	4d0d      	ldr	r5, [pc, #52]	; (8008b0c <__libc_init_array+0x38>)
 8008ad8:	4c0d      	ldr	r4, [pc, #52]	; (8008b10 <__libc_init_array+0x3c>)
 8008ada:	1b64      	subs	r4, r4, r5
 8008adc:	10a4      	asrs	r4, r4, #2
 8008ade:	2600      	movs	r6, #0
 8008ae0:	42a6      	cmp	r6, r4
 8008ae2:	d109      	bne.n	8008af8 <__libc_init_array+0x24>
 8008ae4:	4d0b      	ldr	r5, [pc, #44]	; (8008b14 <__libc_init_array+0x40>)
 8008ae6:	4c0c      	ldr	r4, [pc, #48]	; (8008b18 <__libc_init_array+0x44>)
 8008ae8:	f001 f920 	bl	8009d2c <_init>
 8008aec:	1b64      	subs	r4, r4, r5
 8008aee:	10a4      	asrs	r4, r4, #2
 8008af0:	2600      	movs	r6, #0
 8008af2:	42a6      	cmp	r6, r4
 8008af4:	d105      	bne.n	8008b02 <__libc_init_array+0x2e>
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afc:	4798      	blx	r3
 8008afe:	3601      	adds	r6, #1
 8008b00:	e7ee      	b.n	8008ae0 <__libc_init_array+0xc>
 8008b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b06:	4798      	blx	r3
 8008b08:	3601      	adds	r6, #1
 8008b0a:	e7f2      	b.n	8008af2 <__libc_init_array+0x1e>
 8008b0c:	08009fc4 	.word	0x08009fc4
 8008b10:	08009fc4 	.word	0x08009fc4
 8008b14:	08009fc4 	.word	0x08009fc4
 8008b18:	08009fc8 	.word	0x08009fc8

08008b1c <__retarget_lock_init_recursive>:
 8008b1c:	4770      	bx	lr

08008b1e <__retarget_lock_acquire_recursive>:
 8008b1e:	4770      	bx	lr

08008b20 <__retarget_lock_release_recursive>:
 8008b20:	4770      	bx	lr

08008b22 <memcpy>:
 8008b22:	440a      	add	r2, r1
 8008b24:	4291      	cmp	r1, r2
 8008b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2a:	d100      	bne.n	8008b2e <memcpy+0xc>
 8008b2c:	4770      	bx	lr
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b38:	4291      	cmp	r1, r2
 8008b3a:	d1f9      	bne.n	8008b30 <memcpy+0xe>
 8008b3c:	bd10      	pop	{r4, pc}

08008b3e <memset>:
 8008b3e:	4402      	add	r2, r0
 8008b40:	4603      	mov	r3, r0
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d100      	bne.n	8008b48 <memset+0xa>
 8008b46:	4770      	bx	lr
 8008b48:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4c:	e7f9      	b.n	8008b42 <memset+0x4>
	...

08008b50 <sbrk_aligned>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4e0e      	ldr	r6, [pc, #56]	; (8008b8c <sbrk_aligned+0x3c>)
 8008b54:	460c      	mov	r4, r1
 8008b56:	6831      	ldr	r1, [r6, #0]
 8008b58:	4605      	mov	r5, r0
 8008b5a:	b911      	cbnz	r1, 8008b62 <sbrk_aligned+0x12>
 8008b5c:	f000 f90e 	bl	8008d7c <_sbrk_r>
 8008b60:	6030      	str	r0, [r6, #0]
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f909 	bl	8008d7c <_sbrk_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d00a      	beq.n	8008b84 <sbrk_aligned+0x34>
 8008b6e:	1cc4      	adds	r4, r0, #3
 8008b70:	f024 0403 	bic.w	r4, r4, #3
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d007      	beq.n	8008b88 <sbrk_aligned+0x38>
 8008b78:	1a21      	subs	r1, r4, r0
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f8fe 	bl	8008d7c <_sbrk_r>
 8008b80:	3001      	adds	r0, #1
 8008b82:	d101      	bne.n	8008b88 <sbrk_aligned+0x38>
 8008b84:	f04f 34ff 	mov.w	r4, #4294967295
 8008b88:	4620      	mov	r0, r4
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	20004de4 	.word	0x20004de4

08008b90 <_malloc_r>:
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	1ccd      	adds	r5, r1, #3
 8008b96:	f025 0503 	bic.w	r5, r5, #3
 8008b9a:	3508      	adds	r5, #8
 8008b9c:	2d0c      	cmp	r5, #12
 8008b9e:	bf38      	it	cc
 8008ba0:	250c      	movcc	r5, #12
 8008ba2:	2d00      	cmp	r5, #0
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	db01      	blt.n	8008bac <_malloc_r+0x1c>
 8008ba8:	42a9      	cmp	r1, r5
 8008baa:	d905      	bls.n	8008bb8 <_malloc_r+0x28>
 8008bac:	230c      	movs	r3, #12
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb8:	4e2e      	ldr	r6, [pc, #184]	; (8008c74 <_malloc_r+0xe4>)
 8008bba:	f000 fa69 	bl	8009090 <__malloc_lock>
 8008bbe:	6833      	ldr	r3, [r6, #0]
 8008bc0:	461c      	mov	r4, r3
 8008bc2:	bb34      	cbnz	r4, 8008c12 <_malloc_r+0x82>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7ff ffc2 	bl	8008b50 <sbrk_aligned>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	4604      	mov	r4, r0
 8008bd0:	d14d      	bne.n	8008c6e <_malloc_r+0xde>
 8008bd2:	6834      	ldr	r4, [r6, #0]
 8008bd4:	4626      	mov	r6, r4
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	d140      	bne.n	8008c5c <_malloc_r+0xcc>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4638      	mov	r0, r7
 8008be0:	eb04 0803 	add.w	r8, r4, r3
 8008be4:	f000 f8ca 	bl	8008d7c <_sbrk_r>
 8008be8:	4580      	cmp	r8, r0
 8008bea:	d13a      	bne.n	8008c62 <_malloc_r+0xd2>
 8008bec:	6821      	ldr	r1, [r4, #0]
 8008bee:	3503      	adds	r5, #3
 8008bf0:	1a6d      	subs	r5, r5, r1
 8008bf2:	f025 0503 	bic.w	r5, r5, #3
 8008bf6:	3508      	adds	r5, #8
 8008bf8:	2d0c      	cmp	r5, #12
 8008bfa:	bf38      	it	cc
 8008bfc:	250c      	movcc	r5, #12
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ffa5 	bl	8008b50 <sbrk_aligned>
 8008c06:	3001      	adds	r0, #1
 8008c08:	d02b      	beq.n	8008c62 <_malloc_r+0xd2>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	442b      	add	r3, r5
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	e00e      	b.n	8008c30 <_malloc_r+0xa0>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	1b52      	subs	r2, r2, r5
 8008c16:	d41e      	bmi.n	8008c56 <_malloc_r+0xc6>
 8008c18:	2a0b      	cmp	r2, #11
 8008c1a:	d916      	bls.n	8008c4a <_malloc_r+0xba>
 8008c1c:	1961      	adds	r1, r4, r5
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	6025      	str	r5, [r4, #0]
 8008c22:	bf18      	it	ne
 8008c24:	6059      	strne	r1, [r3, #4]
 8008c26:	6863      	ldr	r3, [r4, #4]
 8008c28:	bf08      	it	eq
 8008c2a:	6031      	streq	r1, [r6, #0]
 8008c2c:	5162      	str	r2, [r4, r5]
 8008c2e:	604b      	str	r3, [r1, #4]
 8008c30:	4638      	mov	r0, r7
 8008c32:	f104 060b 	add.w	r6, r4, #11
 8008c36:	f000 fa31 	bl	800909c <__malloc_unlock>
 8008c3a:	f026 0607 	bic.w	r6, r6, #7
 8008c3e:	1d23      	adds	r3, r4, #4
 8008c40:	1af2      	subs	r2, r6, r3
 8008c42:	d0b6      	beq.n	8008bb2 <_malloc_r+0x22>
 8008c44:	1b9b      	subs	r3, r3, r6
 8008c46:	50a3      	str	r3, [r4, r2]
 8008c48:	e7b3      	b.n	8008bb2 <_malloc_r+0x22>
 8008c4a:	6862      	ldr	r2, [r4, #4]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	bf0c      	ite	eq
 8008c50:	6032      	streq	r2, [r6, #0]
 8008c52:	605a      	strne	r2, [r3, #4]
 8008c54:	e7ec      	b.n	8008c30 <_malloc_r+0xa0>
 8008c56:	4623      	mov	r3, r4
 8008c58:	6864      	ldr	r4, [r4, #4]
 8008c5a:	e7b2      	b.n	8008bc2 <_malloc_r+0x32>
 8008c5c:	4634      	mov	r4, r6
 8008c5e:	6876      	ldr	r6, [r6, #4]
 8008c60:	e7b9      	b.n	8008bd6 <_malloc_r+0x46>
 8008c62:	230c      	movs	r3, #12
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	4638      	mov	r0, r7
 8008c68:	f000 fa18 	bl	800909c <__malloc_unlock>
 8008c6c:	e7a1      	b.n	8008bb2 <_malloc_r+0x22>
 8008c6e:	6025      	str	r5, [r4, #0]
 8008c70:	e7de      	b.n	8008c30 <_malloc_r+0xa0>
 8008c72:	bf00      	nop
 8008c74:	20004de0 	.word	0x20004de0

08008c78 <iprintf>:
 8008c78:	b40f      	push	{r0, r1, r2, r3}
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <iprintf+0x2c>)
 8008c7c:	b513      	push	{r0, r1, r4, lr}
 8008c7e:	681c      	ldr	r4, [r3, #0]
 8008c80:	b124      	cbz	r4, 8008c8c <iprintf+0x14>
 8008c82:	69a3      	ldr	r3, [r4, #24]
 8008c84:	b913      	cbnz	r3, 8008c8c <iprintf+0x14>
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7ff fe86 	bl	8008998 <__sinit>
 8008c8c:	ab05      	add	r3, sp, #20
 8008c8e:	9a04      	ldr	r2, [sp, #16]
 8008c90:	68a1      	ldr	r1, [r4, #8]
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 fbd9 	bl	800944c <_vfiprintf_r>
 8008c9a:	b002      	add	sp, #8
 8008c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca0:	b004      	add	sp, #16
 8008ca2:	4770      	bx	lr
 8008ca4:	20000018 	.word	0x20000018

08008ca8 <cleanup_glue>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	460c      	mov	r4, r1
 8008cac:	6809      	ldr	r1, [r1, #0]
 8008cae:	4605      	mov	r5, r0
 8008cb0:	b109      	cbz	r1, 8008cb6 <cleanup_glue+0xe>
 8008cb2:	f7ff fff9 	bl	8008ca8 <cleanup_glue>
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cbe:	f000 b9f3 	b.w	80090a8 <_free_r>
	...

08008cc4 <_reclaim_reent>:
 8008cc4:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <_reclaim_reent+0xb4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4283      	cmp	r3, r0
 8008cca:	b570      	push	{r4, r5, r6, lr}
 8008ccc:	4604      	mov	r4, r0
 8008cce:	d051      	beq.n	8008d74 <_reclaim_reent+0xb0>
 8008cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cd2:	b143      	cbz	r3, 8008ce6 <_reclaim_reent+0x22>
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d14a      	bne.n	8008d70 <_reclaim_reent+0xac>
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	6819      	ldr	r1, [r3, #0]
 8008cde:	b111      	cbz	r1, 8008ce6 <_reclaim_reent+0x22>
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 f9e1 	bl	80090a8 <_free_r>
 8008ce6:	6961      	ldr	r1, [r4, #20]
 8008ce8:	b111      	cbz	r1, 8008cf0 <_reclaim_reent+0x2c>
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 f9dc 	bl	80090a8 <_free_r>
 8008cf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cf2:	b111      	cbz	r1, 8008cfa <_reclaim_reent+0x36>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 f9d7 	bl	80090a8 <_free_r>
 8008cfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008cfc:	b111      	cbz	r1, 8008d04 <_reclaim_reent+0x40>
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 f9d2 	bl	80090a8 <_free_r>
 8008d04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008d06:	b111      	cbz	r1, 8008d0e <_reclaim_reent+0x4a>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 f9cd 	bl	80090a8 <_free_r>
 8008d0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d10:	b111      	cbz	r1, 8008d18 <_reclaim_reent+0x54>
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f9c8 	bl	80090a8 <_free_r>
 8008d18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008d1a:	b111      	cbz	r1, 8008d22 <_reclaim_reent+0x5e>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 f9c3 	bl	80090a8 <_free_r>
 8008d22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008d24:	b111      	cbz	r1, 8008d2c <_reclaim_reent+0x68>
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 f9be 	bl	80090a8 <_free_r>
 8008d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d2e:	b111      	cbz	r1, 8008d36 <_reclaim_reent+0x72>
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 f9b9 	bl	80090a8 <_free_r>
 8008d36:	69a3      	ldr	r3, [r4, #24]
 8008d38:	b1e3      	cbz	r3, 8008d74 <_reclaim_reent+0xb0>
 8008d3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4798      	blx	r3
 8008d40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d42:	b1b9      	cbz	r1, 8008d74 <_reclaim_reent+0xb0>
 8008d44:	4620      	mov	r0, r4
 8008d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d4a:	f7ff bfad 	b.w	8008ca8 <cleanup_glue>
 8008d4e:	5949      	ldr	r1, [r1, r5]
 8008d50:	b941      	cbnz	r1, 8008d64 <_reclaim_reent+0xa0>
 8008d52:	3504      	adds	r5, #4
 8008d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d56:	2d80      	cmp	r5, #128	; 0x80
 8008d58:	68d9      	ldr	r1, [r3, #12]
 8008d5a:	d1f8      	bne.n	8008d4e <_reclaim_reent+0x8a>
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 f9a3 	bl	80090a8 <_free_r>
 8008d62:	e7ba      	b.n	8008cda <_reclaim_reent+0x16>
 8008d64:	680e      	ldr	r6, [r1, #0]
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 f99e 	bl	80090a8 <_free_r>
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	e7ef      	b.n	8008d50 <_reclaim_reent+0x8c>
 8008d70:	2500      	movs	r5, #0
 8008d72:	e7ef      	b.n	8008d54 <_reclaim_reent+0x90>
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
 8008d76:	bf00      	nop
 8008d78:	20000018 	.word	0x20000018

08008d7c <_sbrk_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d06      	ldr	r5, [pc, #24]	; (8008d98 <_sbrk_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	602b      	str	r3, [r5, #0]
 8008d88:	f7f8 fc46 	bl	8001618 <_sbrk>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_sbrk_r+0x1a>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_sbrk_r+0x1a>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20004de8 	.word	0x20004de8

08008d9c <sniprintf>:
 8008d9c:	b40c      	push	{r2, r3}
 8008d9e:	b530      	push	{r4, r5, lr}
 8008da0:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <sniprintf+0x64>)
 8008da2:	1e0c      	subs	r4, r1, #0
 8008da4:	681d      	ldr	r5, [r3, #0]
 8008da6:	b09d      	sub	sp, #116	; 0x74
 8008da8:	da08      	bge.n	8008dbc <sniprintf+0x20>
 8008daa:	238b      	movs	r3, #139	; 0x8b
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	b01d      	add	sp, #116	; 0x74
 8008db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008db8:	b002      	add	sp, #8
 8008dba:	4770      	bx	lr
 8008dbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008dc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008dc4:	bf14      	ite	ne
 8008dc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008dca:	4623      	moveq	r3, r4
 8008dcc:	9304      	str	r3, [sp, #16]
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008dd4:	9002      	str	r0, [sp, #8]
 8008dd6:	9006      	str	r0, [sp, #24]
 8008dd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008dde:	ab21      	add	r3, sp, #132	; 0x84
 8008de0:	a902      	add	r1, sp, #8
 8008de2:	4628      	mov	r0, r5
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	f000 fa07 	bl	80091f8 <_svfiprintf_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	bfbc      	itt	lt
 8008dee:	238b      	movlt	r3, #139	; 0x8b
 8008df0:	602b      	strlt	r3, [r5, #0]
 8008df2:	2c00      	cmp	r4, #0
 8008df4:	d0dd      	beq.n	8008db2 <sniprintf+0x16>
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
 8008dfc:	e7d9      	b.n	8008db2 <sniprintf+0x16>
 8008dfe:	bf00      	nop
 8008e00:	20000018 	.word	0x20000018

08008e04 <__sread>:
 8008e04:	b510      	push	{r4, lr}
 8008e06:	460c      	mov	r4, r1
 8008e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0c:	f000 fde2 	bl	80099d4 <_read_r>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	bfab      	itete	ge
 8008e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e16:	89a3      	ldrhlt	r3, [r4, #12]
 8008e18:	181b      	addge	r3, r3, r0
 8008e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e1e:	bfac      	ite	ge
 8008e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e22:	81a3      	strhlt	r3, [r4, #12]
 8008e24:	bd10      	pop	{r4, pc}

08008e26 <__swrite>:
 8008e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	898b      	ldrh	r3, [r1, #12]
 8008e2e:	05db      	lsls	r3, r3, #23
 8008e30:	4605      	mov	r5, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	4616      	mov	r6, r2
 8008e36:	d505      	bpl.n	8008e44 <__swrite+0x1e>
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f000 f914 	bl	800906c <_lseek_r>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4e:	81a3      	strh	r3, [r4, #12]
 8008e50:	4632      	mov	r2, r6
 8008e52:	463b      	mov	r3, r7
 8008e54:	4628      	mov	r0, r5
 8008e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	f000 b823 	b.w	8008ea4 <_write_r>

08008e5e <__sseek>:
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	460c      	mov	r4, r1
 8008e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e66:	f000 f901 	bl	800906c <_lseek_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	bf15      	itete	ne
 8008e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e7a:	81a3      	strheq	r3, [r4, #12]
 8008e7c:	bf18      	it	ne
 8008e7e:	81a3      	strhne	r3, [r4, #12]
 8008e80:	bd10      	pop	{r4, pc}

08008e82 <__sclose>:
 8008e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e86:	f000 b81f 	b.w	8008ec8 <_close_r>

08008e8a <strnlen>:
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4401      	add	r1, r0
 8008e90:	428a      	cmp	r2, r1
 8008e92:	4613      	mov	r3, r2
 8008e94:	d003      	beq.n	8008e9e <strnlen+0x14>
 8008e96:	781c      	ldrb	r4, [r3, #0]
 8008e98:	3201      	adds	r2, #1
 8008e9a:	2c00      	cmp	r4, #0
 8008e9c:	d1f8      	bne.n	8008e90 <strnlen+0x6>
 8008e9e:	1a18      	subs	r0, r3, r0
 8008ea0:	bd10      	pop	{r4, pc}
	...

08008ea4 <_write_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_write_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f8 fb5f 	bl	8001576 <_write>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_write_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_write_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20004de8 	.word	0x20004de8

08008ec8 <_close_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	; (8008ee4 <_close_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f8 fb6b 	bl	80015ae <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_close_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_close_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20004de8 	.word	0x20004de8

08008ee8 <__sflush_r>:
 8008ee8:	898a      	ldrh	r2, [r1, #12]
 8008eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eee:	4605      	mov	r5, r0
 8008ef0:	0710      	lsls	r0, r2, #28
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	d458      	bmi.n	8008fa8 <__sflush_r+0xc0>
 8008ef6:	684b      	ldr	r3, [r1, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dc05      	bgt.n	8008f08 <__sflush_r+0x20>
 8008efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dc02      	bgt.n	8008f08 <__sflush_r+0x20>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f0a:	2e00      	cmp	r6, #0
 8008f0c:	d0f9      	beq.n	8008f02 <__sflush_r+0x1a>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f14:	682f      	ldr	r7, [r5, #0]
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	d032      	beq.n	8008f80 <__sflush_r+0x98>
 8008f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	075a      	lsls	r2, r3, #29
 8008f20:	d505      	bpl.n	8008f2e <__sflush_r+0x46>
 8008f22:	6863      	ldr	r3, [r4, #4]
 8008f24:	1ac0      	subs	r0, r0, r3
 8008f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f28:	b10b      	cbz	r3, 8008f2e <__sflush_r+0x46>
 8008f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f2c:	1ac0      	subs	r0, r0, r3
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4602      	mov	r2, r0
 8008f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f34:	6a21      	ldr	r1, [r4, #32]
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b0      	blx	r6
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	d106      	bne.n	8008f4e <__sflush_r+0x66>
 8008f40:	6829      	ldr	r1, [r5, #0]
 8008f42:	291d      	cmp	r1, #29
 8008f44:	d82c      	bhi.n	8008fa0 <__sflush_r+0xb8>
 8008f46:	4a2a      	ldr	r2, [pc, #168]	; (8008ff0 <__sflush_r+0x108>)
 8008f48:	40ca      	lsrs	r2, r1
 8008f4a:	07d6      	lsls	r6, r2, #31
 8008f4c:	d528      	bpl.n	8008fa0 <__sflush_r+0xb8>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	6062      	str	r2, [r4, #4]
 8008f52:	04d9      	lsls	r1, r3, #19
 8008f54:	6922      	ldr	r2, [r4, #16]
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	d504      	bpl.n	8008f64 <__sflush_r+0x7c>
 8008f5a:	1c42      	adds	r2, r0, #1
 8008f5c:	d101      	bne.n	8008f62 <__sflush_r+0x7a>
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	b903      	cbnz	r3, 8008f64 <__sflush_r+0x7c>
 8008f62:	6560      	str	r0, [r4, #84]	; 0x54
 8008f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f66:	602f      	str	r7, [r5, #0]
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d0ca      	beq.n	8008f02 <__sflush_r+0x1a>
 8008f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f70:	4299      	cmp	r1, r3
 8008f72:	d002      	beq.n	8008f7a <__sflush_r+0x92>
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 f897 	bl	80090a8 <_free_r>
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f7e:	e7c1      	b.n	8008f04 <__sflush_r+0x1c>
 8008f80:	6a21      	ldr	r1, [r4, #32]
 8008f82:	2301      	movs	r3, #1
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b0      	blx	r6
 8008f88:	1c41      	adds	r1, r0, #1
 8008f8a:	d1c7      	bne.n	8008f1c <__sflush_r+0x34>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0c4      	beq.n	8008f1c <__sflush_r+0x34>
 8008f92:	2b1d      	cmp	r3, #29
 8008f94:	d001      	beq.n	8008f9a <__sflush_r+0xb2>
 8008f96:	2b16      	cmp	r3, #22
 8008f98:	d101      	bne.n	8008f9e <__sflush_r+0xb6>
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	e7b1      	b.n	8008f02 <__sflush_r+0x1a>
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	e7ad      	b.n	8008f04 <__sflush_r+0x1c>
 8008fa8:	690f      	ldr	r7, [r1, #16]
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	d0a9      	beq.n	8008f02 <__sflush_r+0x1a>
 8008fae:	0793      	lsls	r3, r2, #30
 8008fb0:	680e      	ldr	r6, [r1, #0]
 8008fb2:	bf08      	it	eq
 8008fb4:	694b      	ldreq	r3, [r1, #20]
 8008fb6:	600f      	str	r7, [r1, #0]
 8008fb8:	bf18      	it	ne
 8008fba:	2300      	movne	r3, #0
 8008fbc:	eba6 0807 	sub.w	r8, r6, r7
 8008fc0:	608b      	str	r3, [r1, #8]
 8008fc2:	f1b8 0f00 	cmp.w	r8, #0
 8008fc6:	dd9c      	ble.n	8008f02 <__sflush_r+0x1a>
 8008fc8:	6a21      	ldr	r1, [r4, #32]
 8008fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fcc:	4643      	mov	r3, r8
 8008fce:	463a      	mov	r2, r7
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b0      	blx	r6
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	dc06      	bgt.n	8008fe6 <__sflush_r+0xfe>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe4:	e78e      	b.n	8008f04 <__sflush_r+0x1c>
 8008fe6:	4407      	add	r7, r0
 8008fe8:	eba8 0800 	sub.w	r8, r8, r0
 8008fec:	e7e9      	b.n	8008fc2 <__sflush_r+0xda>
 8008fee:	bf00      	nop
 8008ff0:	20400001 	.word	0x20400001

08008ff4 <_fflush_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	690b      	ldr	r3, [r1, #16]
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	b913      	cbnz	r3, 8009004 <_fflush_r+0x10>
 8008ffe:	2500      	movs	r5, #0
 8009000:	4628      	mov	r0, r5
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	b118      	cbz	r0, 800900e <_fflush_r+0x1a>
 8009006:	6983      	ldr	r3, [r0, #24]
 8009008:	b90b      	cbnz	r3, 800900e <_fflush_r+0x1a>
 800900a:	f7ff fcc5 	bl	8008998 <__sinit>
 800900e:	4b14      	ldr	r3, [pc, #80]	; (8009060 <_fflush_r+0x6c>)
 8009010:	429c      	cmp	r4, r3
 8009012:	d11b      	bne.n	800904c <_fflush_r+0x58>
 8009014:	686c      	ldr	r4, [r5, #4]
 8009016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0ef      	beq.n	8008ffe <_fflush_r+0xa>
 800901e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009020:	07d0      	lsls	r0, r2, #31
 8009022:	d404      	bmi.n	800902e <_fflush_r+0x3a>
 8009024:	0599      	lsls	r1, r3, #22
 8009026:	d402      	bmi.n	800902e <_fflush_r+0x3a>
 8009028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800902a:	f7ff fd78 	bl	8008b1e <__retarget_lock_acquire_recursive>
 800902e:	4628      	mov	r0, r5
 8009030:	4621      	mov	r1, r4
 8009032:	f7ff ff59 	bl	8008ee8 <__sflush_r>
 8009036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009038:	07da      	lsls	r2, r3, #31
 800903a:	4605      	mov	r5, r0
 800903c:	d4e0      	bmi.n	8009000 <_fflush_r+0xc>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	059b      	lsls	r3, r3, #22
 8009042:	d4dd      	bmi.n	8009000 <_fflush_r+0xc>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f7ff fd6b 	bl	8008b20 <__retarget_lock_release_recursive>
 800904a:	e7d9      	b.n	8009000 <_fflush_r+0xc>
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <_fflush_r+0x70>)
 800904e:	429c      	cmp	r4, r3
 8009050:	d101      	bne.n	8009056 <_fflush_r+0x62>
 8009052:	68ac      	ldr	r4, [r5, #8]
 8009054:	e7df      	b.n	8009016 <_fflush_r+0x22>
 8009056:	4b04      	ldr	r3, [pc, #16]	; (8009068 <_fflush_r+0x74>)
 8009058:	429c      	cmp	r4, r3
 800905a:	bf08      	it	eq
 800905c:	68ec      	ldreq	r4, [r5, #12]
 800905e:	e7da      	b.n	8009016 <_fflush_r+0x22>
 8009060:	08009f44 	.word	0x08009f44
 8009064:	08009f64 	.word	0x08009f64
 8009068:	08009f24 	.word	0x08009f24

0800906c <_lseek_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_lseek_r+0x20>)
 8009070:	4604      	mov	r4, r0
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	2200      	movs	r2, #0
 8009078:	602a      	str	r2, [r5, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f7f8 fabe 	bl	80015fc <_lseek>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_lseek_r+0x1e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_lseek_r+0x1e>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20004de8 	.word	0x20004de8

08009090 <__malloc_lock>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__malloc_lock+0x8>)
 8009092:	f7ff bd44 	b.w	8008b1e <__retarget_lock_acquire_recursive>
 8009096:	bf00      	nop
 8009098:	20004ddc 	.word	0x20004ddc

0800909c <__malloc_unlock>:
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <__malloc_unlock+0x8>)
 800909e:	f7ff bd3f 	b.w	8008b20 <__retarget_lock_release_recursive>
 80090a2:	bf00      	nop
 80090a4:	20004ddc 	.word	0x20004ddc

080090a8 <_free_r>:
 80090a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090aa:	2900      	cmp	r1, #0
 80090ac:	d044      	beq.n	8009138 <_free_r+0x90>
 80090ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b2:	9001      	str	r0, [sp, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f1a1 0404 	sub.w	r4, r1, #4
 80090ba:	bfb8      	it	lt
 80090bc:	18e4      	addlt	r4, r4, r3
 80090be:	f7ff ffe7 	bl	8009090 <__malloc_lock>
 80090c2:	4a1e      	ldr	r2, [pc, #120]	; (800913c <_free_r+0x94>)
 80090c4:	9801      	ldr	r0, [sp, #4]
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	b933      	cbnz	r3, 80090d8 <_free_r+0x30>
 80090ca:	6063      	str	r3, [r4, #4]
 80090cc:	6014      	str	r4, [r2, #0]
 80090ce:	b003      	add	sp, #12
 80090d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090d4:	f7ff bfe2 	b.w	800909c <__malloc_unlock>
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d908      	bls.n	80090ee <_free_r+0x46>
 80090dc:	6825      	ldr	r5, [r4, #0]
 80090de:	1961      	adds	r1, r4, r5
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf01      	itttt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	1949      	addeq	r1, r1, r5
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	e7ed      	b.n	80090ca <_free_r+0x22>
 80090ee:	461a      	mov	r2, r3
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	b10b      	cbz	r3, 80090f8 <_free_r+0x50>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d9fa      	bls.n	80090ee <_free_r+0x46>
 80090f8:	6811      	ldr	r1, [r2, #0]
 80090fa:	1855      	adds	r5, r2, r1
 80090fc:	42a5      	cmp	r5, r4
 80090fe:	d10b      	bne.n	8009118 <_free_r+0x70>
 8009100:	6824      	ldr	r4, [r4, #0]
 8009102:	4421      	add	r1, r4
 8009104:	1854      	adds	r4, r2, r1
 8009106:	42a3      	cmp	r3, r4
 8009108:	6011      	str	r1, [r2, #0]
 800910a:	d1e0      	bne.n	80090ce <_free_r+0x26>
 800910c:	681c      	ldr	r4, [r3, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	6053      	str	r3, [r2, #4]
 8009112:	4421      	add	r1, r4
 8009114:	6011      	str	r1, [r2, #0]
 8009116:	e7da      	b.n	80090ce <_free_r+0x26>
 8009118:	d902      	bls.n	8009120 <_free_r+0x78>
 800911a:	230c      	movs	r3, #12
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	e7d6      	b.n	80090ce <_free_r+0x26>
 8009120:	6825      	ldr	r5, [r4, #0]
 8009122:	1961      	adds	r1, r4, r5
 8009124:	428b      	cmp	r3, r1
 8009126:	bf04      	itt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	6063      	str	r3, [r4, #4]
 800912e:	bf04      	itt	eq
 8009130:	1949      	addeq	r1, r1, r5
 8009132:	6021      	streq	r1, [r4, #0]
 8009134:	6054      	str	r4, [r2, #4]
 8009136:	e7ca      	b.n	80090ce <_free_r+0x26>
 8009138:	b003      	add	sp, #12
 800913a:	bd30      	pop	{r4, r5, pc}
 800913c:	20004de0 	.word	0x20004de0

08009140 <__ssputs_r>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	688e      	ldr	r6, [r1, #8]
 8009146:	429e      	cmp	r6, r3
 8009148:	4682      	mov	sl, r0
 800914a:	460c      	mov	r4, r1
 800914c:	4690      	mov	r8, r2
 800914e:	461f      	mov	r7, r3
 8009150:	d838      	bhi.n	80091c4 <__ssputs_r+0x84>
 8009152:	898a      	ldrh	r2, [r1, #12]
 8009154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009158:	d032      	beq.n	80091c0 <__ssputs_r+0x80>
 800915a:	6825      	ldr	r5, [r4, #0]
 800915c:	6909      	ldr	r1, [r1, #16]
 800915e:	eba5 0901 	sub.w	r9, r5, r1
 8009162:	6965      	ldr	r5, [r4, #20]
 8009164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800916c:	3301      	adds	r3, #1
 800916e:	444b      	add	r3, r9
 8009170:	106d      	asrs	r5, r5, #1
 8009172:	429d      	cmp	r5, r3
 8009174:	bf38      	it	cc
 8009176:	461d      	movcc	r5, r3
 8009178:	0553      	lsls	r3, r2, #21
 800917a:	d531      	bpl.n	80091e0 <__ssputs_r+0xa0>
 800917c:	4629      	mov	r1, r5
 800917e:	f7ff fd07 	bl	8008b90 <_malloc_r>
 8009182:	4606      	mov	r6, r0
 8009184:	b950      	cbnz	r0, 800919c <__ssputs_r+0x5c>
 8009186:	230c      	movs	r3, #12
 8009188:	f8ca 3000 	str.w	r3, [sl]
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	6921      	ldr	r1, [r4, #16]
 800919e:	464a      	mov	r2, r9
 80091a0:	f7ff fcbf 	bl	8008b22 <memcpy>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	6126      	str	r6, [r4, #16]
 80091b2:	6165      	str	r5, [r4, #20]
 80091b4:	444e      	add	r6, r9
 80091b6:	eba5 0509 	sub.w	r5, r5, r9
 80091ba:	6026      	str	r6, [r4, #0]
 80091bc:	60a5      	str	r5, [r4, #8]
 80091be:	463e      	mov	r6, r7
 80091c0:	42be      	cmp	r6, r7
 80091c2:	d900      	bls.n	80091c6 <__ssputs_r+0x86>
 80091c4:	463e      	mov	r6, r7
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	4632      	mov	r2, r6
 80091ca:	4641      	mov	r1, r8
 80091cc:	f000 fd3a 	bl	8009c44 <memmove>
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	1b9b      	subs	r3, r3, r6
 80091d4:	60a3      	str	r3, [r4, #8]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	4433      	add	r3, r6
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	2000      	movs	r0, #0
 80091de:	e7db      	b.n	8009198 <__ssputs_r+0x58>
 80091e0:	462a      	mov	r2, r5
 80091e2:	f000 fd49 	bl	8009c78 <_realloc_r>
 80091e6:	4606      	mov	r6, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1e1      	bne.n	80091b0 <__ssputs_r+0x70>
 80091ec:	6921      	ldr	r1, [r4, #16]
 80091ee:	4650      	mov	r0, sl
 80091f0:	f7ff ff5a 	bl	80090a8 <_free_r>
 80091f4:	e7c7      	b.n	8009186 <__ssputs_r+0x46>
	...

080091f8 <_svfiprintf_r>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	4698      	mov	r8, r3
 80091fe:	898b      	ldrh	r3, [r1, #12]
 8009200:	061b      	lsls	r3, r3, #24
 8009202:	b09d      	sub	sp, #116	; 0x74
 8009204:	4607      	mov	r7, r0
 8009206:	460d      	mov	r5, r1
 8009208:	4614      	mov	r4, r2
 800920a:	d50e      	bpl.n	800922a <_svfiprintf_r+0x32>
 800920c:	690b      	ldr	r3, [r1, #16]
 800920e:	b963      	cbnz	r3, 800922a <_svfiprintf_r+0x32>
 8009210:	2140      	movs	r1, #64	; 0x40
 8009212:	f7ff fcbd 	bl	8008b90 <_malloc_r>
 8009216:	6028      	str	r0, [r5, #0]
 8009218:	6128      	str	r0, [r5, #16]
 800921a:	b920      	cbnz	r0, 8009226 <_svfiprintf_r+0x2e>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	e0d1      	b.n	80093ca <_svfiprintf_r+0x1d2>
 8009226:	2340      	movs	r3, #64	; 0x40
 8009228:	616b      	str	r3, [r5, #20]
 800922a:	2300      	movs	r3, #0
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	2320      	movs	r3, #32
 8009230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009234:	f8cd 800c 	str.w	r8, [sp, #12]
 8009238:	2330      	movs	r3, #48	; 0x30
 800923a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093e4 <_svfiprintf_r+0x1ec>
 800923e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009242:	f04f 0901 	mov.w	r9, #1
 8009246:	4623      	mov	r3, r4
 8009248:	469a      	mov	sl, r3
 800924a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924e:	b10a      	cbz	r2, 8009254 <_svfiprintf_r+0x5c>
 8009250:	2a25      	cmp	r2, #37	; 0x25
 8009252:	d1f9      	bne.n	8009248 <_svfiprintf_r+0x50>
 8009254:	ebba 0b04 	subs.w	fp, sl, r4
 8009258:	d00b      	beq.n	8009272 <_svfiprintf_r+0x7a>
 800925a:	465b      	mov	r3, fp
 800925c:	4622      	mov	r2, r4
 800925e:	4629      	mov	r1, r5
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ff6d 	bl	8009140 <__ssputs_r>
 8009266:	3001      	adds	r0, #1
 8009268:	f000 80aa 	beq.w	80093c0 <_svfiprintf_r+0x1c8>
 800926c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800926e:	445a      	add	r2, fp
 8009270:	9209      	str	r2, [sp, #36]	; 0x24
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80a2 	beq.w	80093c0 <_svfiprintf_r+0x1c8>
 800927c:	2300      	movs	r3, #0
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009286:	f10a 0a01 	add.w	sl, sl, #1
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009292:	931a      	str	r3, [sp, #104]	; 0x68
 8009294:	4654      	mov	r4, sl
 8009296:	2205      	movs	r2, #5
 8009298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929c:	4851      	ldr	r0, [pc, #324]	; (80093e4 <_svfiprintf_r+0x1ec>)
 800929e:	f7f6 ff9f 	bl	80001e0 <memchr>
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	b9d8      	cbnz	r0, 80092de <_svfiprintf_r+0xe6>
 80092a6:	06d0      	lsls	r0, r2, #27
 80092a8:	bf44      	itt	mi
 80092aa:	2320      	movmi	r3, #32
 80092ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b0:	0711      	lsls	r1, r2, #28
 80092b2:	bf44      	itt	mi
 80092b4:	232b      	movmi	r3, #43	; 0x2b
 80092b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b2a      	cmp	r3, #42	; 0x2a
 80092c0:	d015      	beq.n	80092ee <_svfiprintf_r+0xf6>
 80092c2:	9a07      	ldr	r2, [sp, #28]
 80092c4:	4654      	mov	r4, sl
 80092c6:	2000      	movs	r0, #0
 80092c8:	f04f 0c0a 	mov.w	ip, #10
 80092cc:	4621      	mov	r1, r4
 80092ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d2:	3b30      	subs	r3, #48	; 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d94e      	bls.n	8009376 <_svfiprintf_r+0x17e>
 80092d8:	b1b0      	cbz	r0, 8009308 <_svfiprintf_r+0x110>
 80092da:	9207      	str	r2, [sp, #28]
 80092dc:	e014      	b.n	8009308 <_svfiprintf_r+0x110>
 80092de:	eba0 0308 	sub.w	r3, r0, r8
 80092e2:	fa09 f303 	lsl.w	r3, r9, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	46a2      	mov	sl, r4
 80092ec:	e7d2      	b.n	8009294 <_svfiprintf_r+0x9c>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	1d19      	adds	r1, r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	9103      	str	r1, [sp, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfbb      	ittet	lt
 80092fa:	425b      	neglt	r3, r3
 80092fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009300:	9307      	strge	r3, [sp, #28]
 8009302:	9307      	strlt	r3, [sp, #28]
 8009304:	bfb8      	it	lt
 8009306:	9204      	strlt	r2, [sp, #16]
 8009308:	7823      	ldrb	r3, [r4, #0]
 800930a:	2b2e      	cmp	r3, #46	; 0x2e
 800930c:	d10c      	bne.n	8009328 <_svfiprintf_r+0x130>
 800930e:	7863      	ldrb	r3, [r4, #1]
 8009310:	2b2a      	cmp	r3, #42	; 0x2a
 8009312:	d135      	bne.n	8009380 <_svfiprintf_r+0x188>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	1d1a      	adds	r2, r3, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	9203      	str	r2, [sp, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfb8      	it	lt
 8009320:	f04f 33ff 	movlt.w	r3, #4294967295
 8009324:	3402      	adds	r4, #2
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093f4 <_svfiprintf_r+0x1fc>
 800932c:	7821      	ldrb	r1, [r4, #0]
 800932e:	2203      	movs	r2, #3
 8009330:	4650      	mov	r0, sl
 8009332:	f7f6 ff55 	bl	80001e0 <memchr>
 8009336:	b140      	cbz	r0, 800934a <_svfiprintf_r+0x152>
 8009338:	2340      	movs	r3, #64	; 0x40
 800933a:	eba0 000a 	sub.w	r0, r0, sl
 800933e:	fa03 f000 	lsl.w	r0, r3, r0
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	4303      	orrs	r3, r0
 8009346:	3401      	adds	r4, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	4826      	ldr	r0, [pc, #152]	; (80093e8 <_svfiprintf_r+0x1f0>)
 8009350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009354:	2206      	movs	r2, #6
 8009356:	f7f6 ff43 	bl	80001e0 <memchr>
 800935a:	2800      	cmp	r0, #0
 800935c:	d038      	beq.n	80093d0 <_svfiprintf_r+0x1d8>
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <_svfiprintf_r+0x1f4>)
 8009360:	bb1b      	cbnz	r3, 80093aa <_svfiprintf_r+0x1b2>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3307      	adds	r3, #7
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	3308      	adds	r3, #8
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009370:	4433      	add	r3, r6
 8009372:	9309      	str	r3, [sp, #36]	; 0x24
 8009374:	e767      	b.n	8009246 <_svfiprintf_r+0x4e>
 8009376:	fb0c 3202 	mla	r2, ip, r2, r3
 800937a:	460c      	mov	r4, r1
 800937c:	2001      	movs	r0, #1
 800937e:	e7a5      	b.n	80092cc <_svfiprintf_r+0xd4>
 8009380:	2300      	movs	r3, #0
 8009382:	3401      	adds	r4, #1
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	4619      	mov	r1, r3
 8009388:	f04f 0c0a 	mov.w	ip, #10
 800938c:	4620      	mov	r0, r4
 800938e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009392:	3a30      	subs	r2, #48	; 0x30
 8009394:	2a09      	cmp	r2, #9
 8009396:	d903      	bls.n	80093a0 <_svfiprintf_r+0x1a8>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0c5      	beq.n	8009328 <_svfiprintf_r+0x130>
 800939c:	9105      	str	r1, [sp, #20]
 800939e:	e7c3      	b.n	8009328 <_svfiprintf_r+0x130>
 80093a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a4:	4604      	mov	r4, r0
 80093a6:	2301      	movs	r3, #1
 80093a8:	e7f0      	b.n	800938c <_svfiprintf_r+0x194>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <_svfiprintf_r+0x1f8>)
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	4638      	mov	r0, r7
 80093b6:	f3af 8000 	nop.w
 80093ba:	1c42      	adds	r2, r0, #1
 80093bc:	4606      	mov	r6, r0
 80093be:	d1d6      	bne.n	800936e <_svfiprintf_r+0x176>
 80093c0:	89ab      	ldrh	r3, [r5, #12]
 80093c2:	065b      	lsls	r3, r3, #25
 80093c4:	f53f af2c 	bmi.w	8009220 <_svfiprintf_r+0x28>
 80093c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ca:	b01d      	add	sp, #116	; 0x74
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d0:	ab03      	add	r3, sp, #12
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	462a      	mov	r2, r5
 80093d6:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <_svfiprintf_r+0x1f8>)
 80093d8:	a904      	add	r1, sp, #16
 80093da:	4638      	mov	r0, r7
 80093dc:	f000 f9d4 	bl	8009788 <_printf_i>
 80093e0:	e7eb      	b.n	80093ba <_svfiprintf_r+0x1c2>
 80093e2:	bf00      	nop
 80093e4:	08009f88 	.word	0x08009f88
 80093e8:	08009f92 	.word	0x08009f92
 80093ec:	00000000 	.word	0x00000000
 80093f0:	08009141 	.word	0x08009141
 80093f4:	08009f8e 	.word	0x08009f8e

080093f8 <__sfputc_r>:
 80093f8:	6893      	ldr	r3, [r2, #8]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	b410      	push	{r4}
 8009400:	6093      	str	r3, [r2, #8]
 8009402:	da08      	bge.n	8009416 <__sfputc_r+0x1e>
 8009404:	6994      	ldr	r4, [r2, #24]
 8009406:	42a3      	cmp	r3, r4
 8009408:	db01      	blt.n	800940e <__sfputc_r+0x16>
 800940a:	290a      	cmp	r1, #10
 800940c:	d103      	bne.n	8009416 <__sfputc_r+0x1e>
 800940e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009412:	f000 baf1 	b.w	80099f8 <__swbuf_r>
 8009416:	6813      	ldr	r3, [r2, #0]
 8009418:	1c58      	adds	r0, r3, #1
 800941a:	6010      	str	r0, [r2, #0]
 800941c:	7019      	strb	r1, [r3, #0]
 800941e:	4608      	mov	r0, r1
 8009420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009424:	4770      	bx	lr

08009426 <__sfputs_r>:
 8009426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	4614      	mov	r4, r2
 800942e:	18d5      	adds	r5, r2, r3
 8009430:	42ac      	cmp	r4, r5
 8009432:	d101      	bne.n	8009438 <__sfputs_r+0x12>
 8009434:	2000      	movs	r0, #0
 8009436:	e007      	b.n	8009448 <__sfputs_r+0x22>
 8009438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943c:	463a      	mov	r2, r7
 800943e:	4630      	mov	r0, r6
 8009440:	f7ff ffda 	bl	80093f8 <__sfputc_r>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d1f3      	bne.n	8009430 <__sfputs_r+0xa>
 8009448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800944c <_vfiprintf_r>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	460d      	mov	r5, r1
 8009452:	b09d      	sub	sp, #116	; 0x74
 8009454:	4614      	mov	r4, r2
 8009456:	4698      	mov	r8, r3
 8009458:	4606      	mov	r6, r0
 800945a:	b118      	cbz	r0, 8009464 <_vfiprintf_r+0x18>
 800945c:	6983      	ldr	r3, [r0, #24]
 800945e:	b90b      	cbnz	r3, 8009464 <_vfiprintf_r+0x18>
 8009460:	f7ff fa9a 	bl	8008998 <__sinit>
 8009464:	4b89      	ldr	r3, [pc, #548]	; (800968c <_vfiprintf_r+0x240>)
 8009466:	429d      	cmp	r5, r3
 8009468:	d11b      	bne.n	80094a2 <_vfiprintf_r+0x56>
 800946a:	6875      	ldr	r5, [r6, #4]
 800946c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800946e:	07d9      	lsls	r1, r3, #31
 8009470:	d405      	bmi.n	800947e <_vfiprintf_r+0x32>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	059a      	lsls	r2, r3, #22
 8009476:	d402      	bmi.n	800947e <_vfiprintf_r+0x32>
 8009478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947a:	f7ff fb50 	bl	8008b1e <__retarget_lock_acquire_recursive>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	071b      	lsls	r3, r3, #28
 8009482:	d501      	bpl.n	8009488 <_vfiprintf_r+0x3c>
 8009484:	692b      	ldr	r3, [r5, #16]
 8009486:	b9eb      	cbnz	r3, 80094c4 <_vfiprintf_r+0x78>
 8009488:	4629      	mov	r1, r5
 800948a:	4630      	mov	r0, r6
 800948c:	f000 fb06 	bl	8009a9c <__swsetup_r>
 8009490:	b1c0      	cbz	r0, 80094c4 <_vfiprintf_r+0x78>
 8009492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009494:	07dc      	lsls	r4, r3, #31
 8009496:	d50e      	bpl.n	80094b6 <_vfiprintf_r+0x6a>
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	b01d      	add	sp, #116	; 0x74
 800949e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a2:	4b7b      	ldr	r3, [pc, #492]	; (8009690 <_vfiprintf_r+0x244>)
 80094a4:	429d      	cmp	r5, r3
 80094a6:	d101      	bne.n	80094ac <_vfiprintf_r+0x60>
 80094a8:	68b5      	ldr	r5, [r6, #8]
 80094aa:	e7df      	b.n	800946c <_vfiprintf_r+0x20>
 80094ac:	4b79      	ldr	r3, [pc, #484]	; (8009694 <_vfiprintf_r+0x248>)
 80094ae:	429d      	cmp	r5, r3
 80094b0:	bf08      	it	eq
 80094b2:	68f5      	ldreq	r5, [r6, #12]
 80094b4:	e7da      	b.n	800946c <_vfiprintf_r+0x20>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	0598      	lsls	r0, r3, #22
 80094ba:	d4ed      	bmi.n	8009498 <_vfiprintf_r+0x4c>
 80094bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094be:	f7ff fb2f 	bl	8008b20 <__retarget_lock_release_recursive>
 80094c2:	e7e9      	b.n	8009498 <_vfiprintf_r+0x4c>
 80094c4:	2300      	movs	r3, #0
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	2320      	movs	r3, #32
 80094ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d2:	2330      	movs	r3, #48	; 0x30
 80094d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009698 <_vfiprintf_r+0x24c>
 80094d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094dc:	f04f 0901 	mov.w	r9, #1
 80094e0:	4623      	mov	r3, r4
 80094e2:	469a      	mov	sl, r3
 80094e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e8:	b10a      	cbz	r2, 80094ee <_vfiprintf_r+0xa2>
 80094ea:	2a25      	cmp	r2, #37	; 0x25
 80094ec:	d1f9      	bne.n	80094e2 <_vfiprintf_r+0x96>
 80094ee:	ebba 0b04 	subs.w	fp, sl, r4
 80094f2:	d00b      	beq.n	800950c <_vfiprintf_r+0xc0>
 80094f4:	465b      	mov	r3, fp
 80094f6:	4622      	mov	r2, r4
 80094f8:	4629      	mov	r1, r5
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff ff93 	bl	8009426 <__sfputs_r>
 8009500:	3001      	adds	r0, #1
 8009502:	f000 80aa 	beq.w	800965a <_vfiprintf_r+0x20e>
 8009506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009508:	445a      	add	r2, fp
 800950a:	9209      	str	r2, [sp, #36]	; 0x24
 800950c:	f89a 3000 	ldrb.w	r3, [sl]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80a2 	beq.w	800965a <_vfiprintf_r+0x20e>
 8009516:	2300      	movs	r3, #0
 8009518:	f04f 32ff 	mov.w	r2, #4294967295
 800951c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009520:	f10a 0a01 	add.w	sl, sl, #1
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	9307      	str	r3, [sp, #28]
 8009528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800952c:	931a      	str	r3, [sp, #104]	; 0x68
 800952e:	4654      	mov	r4, sl
 8009530:	2205      	movs	r2, #5
 8009532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009536:	4858      	ldr	r0, [pc, #352]	; (8009698 <_vfiprintf_r+0x24c>)
 8009538:	f7f6 fe52 	bl	80001e0 <memchr>
 800953c:	9a04      	ldr	r2, [sp, #16]
 800953e:	b9d8      	cbnz	r0, 8009578 <_vfiprintf_r+0x12c>
 8009540:	06d1      	lsls	r1, r2, #27
 8009542:	bf44      	itt	mi
 8009544:	2320      	movmi	r3, #32
 8009546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800954a:	0713      	lsls	r3, r2, #28
 800954c:	bf44      	itt	mi
 800954e:	232b      	movmi	r3, #43	; 0x2b
 8009550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009554:	f89a 3000 	ldrb.w	r3, [sl]
 8009558:	2b2a      	cmp	r3, #42	; 0x2a
 800955a:	d015      	beq.n	8009588 <_vfiprintf_r+0x13c>
 800955c:	9a07      	ldr	r2, [sp, #28]
 800955e:	4654      	mov	r4, sl
 8009560:	2000      	movs	r0, #0
 8009562:	f04f 0c0a 	mov.w	ip, #10
 8009566:	4621      	mov	r1, r4
 8009568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800956c:	3b30      	subs	r3, #48	; 0x30
 800956e:	2b09      	cmp	r3, #9
 8009570:	d94e      	bls.n	8009610 <_vfiprintf_r+0x1c4>
 8009572:	b1b0      	cbz	r0, 80095a2 <_vfiprintf_r+0x156>
 8009574:	9207      	str	r2, [sp, #28]
 8009576:	e014      	b.n	80095a2 <_vfiprintf_r+0x156>
 8009578:	eba0 0308 	sub.w	r3, r0, r8
 800957c:	fa09 f303 	lsl.w	r3, r9, r3
 8009580:	4313      	orrs	r3, r2
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	46a2      	mov	sl, r4
 8009586:	e7d2      	b.n	800952e <_vfiprintf_r+0xe2>
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	1d19      	adds	r1, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	9103      	str	r1, [sp, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	bfbb      	ittet	lt
 8009594:	425b      	neglt	r3, r3
 8009596:	f042 0202 	orrlt.w	r2, r2, #2
 800959a:	9307      	strge	r3, [sp, #28]
 800959c:	9307      	strlt	r3, [sp, #28]
 800959e:	bfb8      	it	lt
 80095a0:	9204      	strlt	r2, [sp, #16]
 80095a2:	7823      	ldrb	r3, [r4, #0]
 80095a4:	2b2e      	cmp	r3, #46	; 0x2e
 80095a6:	d10c      	bne.n	80095c2 <_vfiprintf_r+0x176>
 80095a8:	7863      	ldrb	r3, [r4, #1]
 80095aa:	2b2a      	cmp	r3, #42	; 0x2a
 80095ac:	d135      	bne.n	800961a <_vfiprintf_r+0x1ce>
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	1d1a      	adds	r2, r3, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	9203      	str	r2, [sp, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bfb8      	it	lt
 80095ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80095be:	3402      	adds	r4, #2
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096a8 <_vfiprintf_r+0x25c>
 80095c6:	7821      	ldrb	r1, [r4, #0]
 80095c8:	2203      	movs	r2, #3
 80095ca:	4650      	mov	r0, sl
 80095cc:	f7f6 fe08 	bl	80001e0 <memchr>
 80095d0:	b140      	cbz	r0, 80095e4 <_vfiprintf_r+0x198>
 80095d2:	2340      	movs	r3, #64	; 0x40
 80095d4:	eba0 000a 	sub.w	r0, r0, sl
 80095d8:	fa03 f000 	lsl.w	r0, r3, r0
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	4303      	orrs	r3, r0
 80095e0:	3401      	adds	r4, #1
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e8:	482c      	ldr	r0, [pc, #176]	; (800969c <_vfiprintf_r+0x250>)
 80095ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ee:	2206      	movs	r2, #6
 80095f0:	f7f6 fdf6 	bl	80001e0 <memchr>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d03f      	beq.n	8009678 <_vfiprintf_r+0x22c>
 80095f8:	4b29      	ldr	r3, [pc, #164]	; (80096a0 <_vfiprintf_r+0x254>)
 80095fa:	bb1b      	cbnz	r3, 8009644 <_vfiprintf_r+0x1f8>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	3307      	adds	r3, #7
 8009600:	f023 0307 	bic.w	r3, r3, #7
 8009604:	3308      	adds	r3, #8
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960a:	443b      	add	r3, r7
 800960c:	9309      	str	r3, [sp, #36]	; 0x24
 800960e:	e767      	b.n	80094e0 <_vfiprintf_r+0x94>
 8009610:	fb0c 3202 	mla	r2, ip, r2, r3
 8009614:	460c      	mov	r4, r1
 8009616:	2001      	movs	r0, #1
 8009618:	e7a5      	b.n	8009566 <_vfiprintf_r+0x11a>
 800961a:	2300      	movs	r3, #0
 800961c:	3401      	adds	r4, #1
 800961e:	9305      	str	r3, [sp, #20]
 8009620:	4619      	mov	r1, r3
 8009622:	f04f 0c0a 	mov.w	ip, #10
 8009626:	4620      	mov	r0, r4
 8009628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800962c:	3a30      	subs	r2, #48	; 0x30
 800962e:	2a09      	cmp	r2, #9
 8009630:	d903      	bls.n	800963a <_vfiprintf_r+0x1ee>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0c5      	beq.n	80095c2 <_vfiprintf_r+0x176>
 8009636:	9105      	str	r1, [sp, #20]
 8009638:	e7c3      	b.n	80095c2 <_vfiprintf_r+0x176>
 800963a:	fb0c 2101 	mla	r1, ip, r1, r2
 800963e:	4604      	mov	r4, r0
 8009640:	2301      	movs	r3, #1
 8009642:	e7f0      	b.n	8009626 <_vfiprintf_r+0x1da>
 8009644:	ab03      	add	r3, sp, #12
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	462a      	mov	r2, r5
 800964a:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <_vfiprintf_r+0x258>)
 800964c:	a904      	add	r1, sp, #16
 800964e:	4630      	mov	r0, r6
 8009650:	f3af 8000 	nop.w
 8009654:	4607      	mov	r7, r0
 8009656:	1c78      	adds	r0, r7, #1
 8009658:	d1d6      	bne.n	8009608 <_vfiprintf_r+0x1bc>
 800965a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800965c:	07d9      	lsls	r1, r3, #31
 800965e:	d405      	bmi.n	800966c <_vfiprintf_r+0x220>
 8009660:	89ab      	ldrh	r3, [r5, #12]
 8009662:	059a      	lsls	r2, r3, #22
 8009664:	d402      	bmi.n	800966c <_vfiprintf_r+0x220>
 8009666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009668:	f7ff fa5a 	bl	8008b20 <__retarget_lock_release_recursive>
 800966c:	89ab      	ldrh	r3, [r5, #12]
 800966e:	065b      	lsls	r3, r3, #25
 8009670:	f53f af12 	bmi.w	8009498 <_vfiprintf_r+0x4c>
 8009674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009676:	e711      	b.n	800949c <_vfiprintf_r+0x50>
 8009678:	ab03      	add	r3, sp, #12
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	462a      	mov	r2, r5
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <_vfiprintf_r+0x258>)
 8009680:	a904      	add	r1, sp, #16
 8009682:	4630      	mov	r0, r6
 8009684:	f000 f880 	bl	8009788 <_printf_i>
 8009688:	e7e4      	b.n	8009654 <_vfiprintf_r+0x208>
 800968a:	bf00      	nop
 800968c:	08009f44 	.word	0x08009f44
 8009690:	08009f64 	.word	0x08009f64
 8009694:	08009f24 	.word	0x08009f24
 8009698:	08009f88 	.word	0x08009f88
 800969c:	08009f92 	.word	0x08009f92
 80096a0:	00000000 	.word	0x00000000
 80096a4:	08009427 	.word	0x08009427
 80096a8:	08009f8e 	.word	0x08009f8e

080096ac <_printf_common>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	4616      	mov	r6, r2
 80096b2:	4699      	mov	r9, r3
 80096b4:	688a      	ldr	r2, [r1, #8]
 80096b6:	690b      	ldr	r3, [r1, #16]
 80096b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096bc:	4293      	cmp	r3, r2
 80096be:	bfb8      	it	lt
 80096c0:	4613      	movlt	r3, r2
 80096c2:	6033      	str	r3, [r6, #0]
 80096c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096c8:	4607      	mov	r7, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	b10a      	cbz	r2, 80096d2 <_printf_common+0x26>
 80096ce:	3301      	adds	r3, #1
 80096d0:	6033      	str	r3, [r6, #0]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	0699      	lsls	r1, r3, #26
 80096d6:	bf42      	ittt	mi
 80096d8:	6833      	ldrmi	r3, [r6, #0]
 80096da:	3302      	addmi	r3, #2
 80096dc:	6033      	strmi	r3, [r6, #0]
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	f015 0506 	ands.w	r5, r5, #6
 80096e4:	d106      	bne.n	80096f4 <_printf_common+0x48>
 80096e6:	f104 0a19 	add.w	sl, r4, #25
 80096ea:	68e3      	ldr	r3, [r4, #12]
 80096ec:	6832      	ldr	r2, [r6, #0]
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	42ab      	cmp	r3, r5
 80096f2:	dc26      	bgt.n	8009742 <_printf_common+0x96>
 80096f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096f8:	1e13      	subs	r3, r2, #0
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	bf18      	it	ne
 80096fe:	2301      	movne	r3, #1
 8009700:	0692      	lsls	r2, r2, #26
 8009702:	d42b      	bmi.n	800975c <_printf_common+0xb0>
 8009704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009708:	4649      	mov	r1, r9
 800970a:	4638      	mov	r0, r7
 800970c:	47c0      	blx	r8
 800970e:	3001      	adds	r0, #1
 8009710:	d01e      	beq.n	8009750 <_printf_common+0xa4>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	68e5      	ldr	r5, [r4, #12]
 8009716:	6832      	ldr	r2, [r6, #0]
 8009718:	f003 0306 	and.w	r3, r3, #6
 800971c:	2b04      	cmp	r3, #4
 800971e:	bf08      	it	eq
 8009720:	1aad      	subeq	r5, r5, r2
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	6922      	ldr	r2, [r4, #16]
 8009726:	bf0c      	ite	eq
 8009728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800972c:	2500      	movne	r5, #0
 800972e:	4293      	cmp	r3, r2
 8009730:	bfc4      	itt	gt
 8009732:	1a9b      	subgt	r3, r3, r2
 8009734:	18ed      	addgt	r5, r5, r3
 8009736:	2600      	movs	r6, #0
 8009738:	341a      	adds	r4, #26
 800973a:	42b5      	cmp	r5, r6
 800973c:	d11a      	bne.n	8009774 <_printf_common+0xc8>
 800973e:	2000      	movs	r0, #0
 8009740:	e008      	b.n	8009754 <_printf_common+0xa8>
 8009742:	2301      	movs	r3, #1
 8009744:	4652      	mov	r2, sl
 8009746:	4649      	mov	r1, r9
 8009748:	4638      	mov	r0, r7
 800974a:	47c0      	blx	r8
 800974c:	3001      	adds	r0, #1
 800974e:	d103      	bne.n	8009758 <_printf_common+0xac>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009758:	3501      	adds	r5, #1
 800975a:	e7c6      	b.n	80096ea <_printf_common+0x3e>
 800975c:	18e1      	adds	r1, r4, r3
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	2030      	movs	r0, #48	; 0x30
 8009762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009766:	4422      	add	r2, r4
 8009768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800976c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009770:	3302      	adds	r3, #2
 8009772:	e7c7      	b.n	8009704 <_printf_common+0x58>
 8009774:	2301      	movs	r3, #1
 8009776:	4622      	mov	r2, r4
 8009778:	4649      	mov	r1, r9
 800977a:	4638      	mov	r0, r7
 800977c:	47c0      	blx	r8
 800977e:	3001      	adds	r0, #1
 8009780:	d0e6      	beq.n	8009750 <_printf_common+0xa4>
 8009782:	3601      	adds	r6, #1
 8009784:	e7d9      	b.n	800973a <_printf_common+0x8e>
	...

08009788 <_printf_i>:
 8009788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	7e0f      	ldrb	r7, [r1, #24]
 800978e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009790:	2f78      	cmp	r7, #120	; 0x78
 8009792:	4691      	mov	r9, r2
 8009794:	4680      	mov	r8, r0
 8009796:	460c      	mov	r4, r1
 8009798:	469a      	mov	sl, r3
 800979a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800979e:	d807      	bhi.n	80097b0 <_printf_i+0x28>
 80097a0:	2f62      	cmp	r7, #98	; 0x62
 80097a2:	d80a      	bhi.n	80097ba <_printf_i+0x32>
 80097a4:	2f00      	cmp	r7, #0
 80097a6:	f000 80d8 	beq.w	800995a <_printf_i+0x1d2>
 80097aa:	2f58      	cmp	r7, #88	; 0x58
 80097ac:	f000 80a3 	beq.w	80098f6 <_printf_i+0x16e>
 80097b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097b8:	e03a      	b.n	8009830 <_printf_i+0xa8>
 80097ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097be:	2b15      	cmp	r3, #21
 80097c0:	d8f6      	bhi.n	80097b0 <_printf_i+0x28>
 80097c2:	a101      	add	r1, pc, #4	; (adr r1, 80097c8 <_printf_i+0x40>)
 80097c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009835 	.word	0x08009835
 80097d0:	080097b1 	.word	0x080097b1
 80097d4:	080097b1 	.word	0x080097b1
 80097d8:	080097b1 	.word	0x080097b1
 80097dc:	080097b1 	.word	0x080097b1
 80097e0:	08009835 	.word	0x08009835
 80097e4:	080097b1 	.word	0x080097b1
 80097e8:	080097b1 	.word	0x080097b1
 80097ec:	080097b1 	.word	0x080097b1
 80097f0:	080097b1 	.word	0x080097b1
 80097f4:	08009941 	.word	0x08009941
 80097f8:	08009865 	.word	0x08009865
 80097fc:	08009923 	.word	0x08009923
 8009800:	080097b1 	.word	0x080097b1
 8009804:	080097b1 	.word	0x080097b1
 8009808:	08009963 	.word	0x08009963
 800980c:	080097b1 	.word	0x080097b1
 8009810:	08009865 	.word	0x08009865
 8009814:	080097b1 	.word	0x080097b1
 8009818:	080097b1 	.word	0x080097b1
 800981c:	0800992b 	.word	0x0800992b
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	1d1a      	adds	r2, r3, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800982c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009830:	2301      	movs	r3, #1
 8009832:	e0a3      	b.n	800997c <_printf_i+0x1f4>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	6829      	ldr	r1, [r5, #0]
 8009838:	0606      	lsls	r6, r0, #24
 800983a:	f101 0304 	add.w	r3, r1, #4
 800983e:	d50a      	bpl.n	8009856 <_printf_i+0xce>
 8009840:	680e      	ldr	r6, [r1, #0]
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	2e00      	cmp	r6, #0
 8009846:	da03      	bge.n	8009850 <_printf_i+0xc8>
 8009848:	232d      	movs	r3, #45	; 0x2d
 800984a:	4276      	negs	r6, r6
 800984c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009850:	485e      	ldr	r0, [pc, #376]	; (80099cc <_printf_i+0x244>)
 8009852:	230a      	movs	r3, #10
 8009854:	e019      	b.n	800988a <_printf_i+0x102>
 8009856:	680e      	ldr	r6, [r1, #0]
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800985e:	bf18      	it	ne
 8009860:	b236      	sxthne	r6, r6
 8009862:	e7ef      	b.n	8009844 <_printf_i+0xbc>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	6820      	ldr	r0, [r4, #0]
 8009868:	1d19      	adds	r1, r3, #4
 800986a:	6029      	str	r1, [r5, #0]
 800986c:	0601      	lsls	r1, r0, #24
 800986e:	d501      	bpl.n	8009874 <_printf_i+0xec>
 8009870:	681e      	ldr	r6, [r3, #0]
 8009872:	e002      	b.n	800987a <_printf_i+0xf2>
 8009874:	0646      	lsls	r6, r0, #25
 8009876:	d5fb      	bpl.n	8009870 <_printf_i+0xe8>
 8009878:	881e      	ldrh	r6, [r3, #0]
 800987a:	4854      	ldr	r0, [pc, #336]	; (80099cc <_printf_i+0x244>)
 800987c:	2f6f      	cmp	r7, #111	; 0x6f
 800987e:	bf0c      	ite	eq
 8009880:	2308      	moveq	r3, #8
 8009882:	230a      	movne	r3, #10
 8009884:	2100      	movs	r1, #0
 8009886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800988a:	6865      	ldr	r5, [r4, #4]
 800988c:	60a5      	str	r5, [r4, #8]
 800988e:	2d00      	cmp	r5, #0
 8009890:	bfa2      	ittt	ge
 8009892:	6821      	ldrge	r1, [r4, #0]
 8009894:	f021 0104 	bicge.w	r1, r1, #4
 8009898:	6021      	strge	r1, [r4, #0]
 800989a:	b90e      	cbnz	r6, 80098a0 <_printf_i+0x118>
 800989c:	2d00      	cmp	r5, #0
 800989e:	d04d      	beq.n	800993c <_printf_i+0x1b4>
 80098a0:	4615      	mov	r5, r2
 80098a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80098a6:	fb03 6711 	mls	r7, r3, r1, r6
 80098aa:	5dc7      	ldrb	r7, [r0, r7]
 80098ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098b0:	4637      	mov	r7, r6
 80098b2:	42bb      	cmp	r3, r7
 80098b4:	460e      	mov	r6, r1
 80098b6:	d9f4      	bls.n	80098a2 <_printf_i+0x11a>
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d10b      	bne.n	80098d4 <_printf_i+0x14c>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	07de      	lsls	r6, r3, #31
 80098c0:	d508      	bpl.n	80098d4 <_printf_i+0x14c>
 80098c2:	6923      	ldr	r3, [r4, #16]
 80098c4:	6861      	ldr	r1, [r4, #4]
 80098c6:	4299      	cmp	r1, r3
 80098c8:	bfde      	ittt	le
 80098ca:	2330      	movle	r3, #48	; 0x30
 80098cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098d4:	1b52      	subs	r2, r2, r5
 80098d6:	6122      	str	r2, [r4, #16]
 80098d8:	f8cd a000 	str.w	sl, [sp]
 80098dc:	464b      	mov	r3, r9
 80098de:	aa03      	add	r2, sp, #12
 80098e0:	4621      	mov	r1, r4
 80098e2:	4640      	mov	r0, r8
 80098e4:	f7ff fee2 	bl	80096ac <_printf_common>
 80098e8:	3001      	adds	r0, #1
 80098ea:	d14c      	bne.n	8009986 <_printf_i+0x1fe>
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	b004      	add	sp, #16
 80098f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f6:	4835      	ldr	r0, [pc, #212]	; (80099cc <_printf_i+0x244>)
 80098f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098fc:	6829      	ldr	r1, [r5, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	f851 6b04 	ldr.w	r6, [r1], #4
 8009904:	6029      	str	r1, [r5, #0]
 8009906:	061d      	lsls	r5, r3, #24
 8009908:	d514      	bpl.n	8009934 <_printf_i+0x1ac>
 800990a:	07df      	lsls	r7, r3, #31
 800990c:	bf44      	itt	mi
 800990e:	f043 0320 	orrmi.w	r3, r3, #32
 8009912:	6023      	strmi	r3, [r4, #0]
 8009914:	b91e      	cbnz	r6, 800991e <_printf_i+0x196>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	f023 0320 	bic.w	r3, r3, #32
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	2310      	movs	r3, #16
 8009920:	e7b0      	b.n	8009884 <_printf_i+0xfc>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	f043 0320 	orr.w	r3, r3, #32
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	2378      	movs	r3, #120	; 0x78
 800992c:	4828      	ldr	r0, [pc, #160]	; (80099d0 <_printf_i+0x248>)
 800992e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009932:	e7e3      	b.n	80098fc <_printf_i+0x174>
 8009934:	0659      	lsls	r1, r3, #25
 8009936:	bf48      	it	mi
 8009938:	b2b6      	uxthmi	r6, r6
 800993a:	e7e6      	b.n	800990a <_printf_i+0x182>
 800993c:	4615      	mov	r5, r2
 800993e:	e7bb      	b.n	80098b8 <_printf_i+0x130>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	6826      	ldr	r6, [r4, #0]
 8009944:	6961      	ldr	r1, [r4, #20]
 8009946:	1d18      	adds	r0, r3, #4
 8009948:	6028      	str	r0, [r5, #0]
 800994a:	0635      	lsls	r5, r6, #24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	d501      	bpl.n	8009954 <_printf_i+0x1cc>
 8009950:	6019      	str	r1, [r3, #0]
 8009952:	e002      	b.n	800995a <_printf_i+0x1d2>
 8009954:	0670      	lsls	r0, r6, #25
 8009956:	d5fb      	bpl.n	8009950 <_printf_i+0x1c8>
 8009958:	8019      	strh	r1, [r3, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	4615      	mov	r5, r2
 8009960:	e7ba      	b.n	80098d8 <_printf_i+0x150>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	602a      	str	r2, [r5, #0]
 8009968:	681d      	ldr	r5, [r3, #0]
 800996a:	6862      	ldr	r2, [r4, #4]
 800996c:	2100      	movs	r1, #0
 800996e:	4628      	mov	r0, r5
 8009970:	f7f6 fc36 	bl	80001e0 <memchr>
 8009974:	b108      	cbz	r0, 800997a <_printf_i+0x1f2>
 8009976:	1b40      	subs	r0, r0, r5
 8009978:	6060      	str	r0, [r4, #4]
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	2300      	movs	r3, #0
 8009980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009984:	e7a8      	b.n	80098d8 <_printf_i+0x150>
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	462a      	mov	r2, r5
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	47d0      	blx	sl
 8009990:	3001      	adds	r0, #1
 8009992:	d0ab      	beq.n	80098ec <_printf_i+0x164>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	d413      	bmi.n	80099c2 <_printf_i+0x23a>
 800999a:	68e0      	ldr	r0, [r4, #12]
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	4298      	cmp	r0, r3
 80099a0:	bfb8      	it	lt
 80099a2:	4618      	movlt	r0, r3
 80099a4:	e7a4      	b.n	80098f0 <_printf_i+0x168>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4632      	mov	r2, r6
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d09b      	beq.n	80098ec <_printf_i+0x164>
 80099b4:	3501      	adds	r5, #1
 80099b6:	68e3      	ldr	r3, [r4, #12]
 80099b8:	9903      	ldr	r1, [sp, #12]
 80099ba:	1a5b      	subs	r3, r3, r1
 80099bc:	42ab      	cmp	r3, r5
 80099be:	dcf2      	bgt.n	80099a6 <_printf_i+0x21e>
 80099c0:	e7eb      	b.n	800999a <_printf_i+0x212>
 80099c2:	2500      	movs	r5, #0
 80099c4:	f104 0619 	add.w	r6, r4, #25
 80099c8:	e7f5      	b.n	80099b6 <_printf_i+0x22e>
 80099ca:	bf00      	nop
 80099cc:	08009f99 	.word	0x08009f99
 80099d0:	08009faa 	.word	0x08009faa

080099d4 <_read_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_read_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f7 fdaa 	bl	800153c <_read>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_read_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_read_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20004de8 	.word	0x20004de8

080099f8 <__swbuf_r>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	460e      	mov	r6, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	4605      	mov	r5, r0
 8009a00:	b118      	cbz	r0, 8009a0a <__swbuf_r+0x12>
 8009a02:	6983      	ldr	r3, [r0, #24]
 8009a04:	b90b      	cbnz	r3, 8009a0a <__swbuf_r+0x12>
 8009a06:	f7fe ffc7 	bl	8008998 <__sinit>
 8009a0a:	4b21      	ldr	r3, [pc, #132]	; (8009a90 <__swbuf_r+0x98>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d12b      	bne.n	8009a68 <__swbuf_r+0x70>
 8009a10:	686c      	ldr	r4, [r5, #4]
 8009a12:	69a3      	ldr	r3, [r4, #24]
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	071a      	lsls	r2, r3, #28
 8009a1a:	d52f      	bpl.n	8009a7c <__swbuf_r+0x84>
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	b36b      	cbz	r3, 8009a7c <__swbuf_r+0x84>
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	6820      	ldr	r0, [r4, #0]
 8009a24:	1ac0      	subs	r0, r0, r3
 8009a26:	6963      	ldr	r3, [r4, #20]
 8009a28:	b2f6      	uxtb	r6, r6
 8009a2a:	4283      	cmp	r3, r0
 8009a2c:	4637      	mov	r7, r6
 8009a2e:	dc04      	bgt.n	8009a3a <__swbuf_r+0x42>
 8009a30:	4621      	mov	r1, r4
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7ff fade 	bl	8008ff4 <_fflush_r>
 8009a38:	bb30      	cbnz	r0, 8009a88 <__swbuf_r+0x90>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	701e      	strb	r6, [r3, #0]
 8009a48:	6963      	ldr	r3, [r4, #20]
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	4283      	cmp	r3, r0
 8009a4e:	d004      	beq.n	8009a5a <__swbuf_r+0x62>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d506      	bpl.n	8009a64 <__swbuf_r+0x6c>
 8009a56:	2e0a      	cmp	r6, #10
 8009a58:	d104      	bne.n	8009a64 <__swbuf_r+0x6c>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7ff fac9 	bl	8008ff4 <_fflush_r>
 8009a62:	b988      	cbnz	r0, 8009a88 <__swbuf_r+0x90>
 8009a64:	4638      	mov	r0, r7
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <__swbuf_r+0x9c>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d101      	bne.n	8009a72 <__swbuf_r+0x7a>
 8009a6e:	68ac      	ldr	r4, [r5, #8]
 8009a70:	e7cf      	b.n	8009a12 <__swbuf_r+0x1a>
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <__swbuf_r+0xa0>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	bf08      	it	eq
 8009a78:	68ec      	ldreq	r4, [r5, #12]
 8009a7a:	e7ca      	b.n	8009a12 <__swbuf_r+0x1a>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f80c 	bl	8009a9c <__swsetup_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d0cb      	beq.n	8009a20 <__swbuf_r+0x28>
 8009a88:	f04f 37ff 	mov.w	r7, #4294967295
 8009a8c:	e7ea      	b.n	8009a64 <__swbuf_r+0x6c>
 8009a8e:	bf00      	nop
 8009a90:	08009f44 	.word	0x08009f44
 8009a94:	08009f64 	.word	0x08009f64
 8009a98:	08009f24 	.word	0x08009f24

08009a9c <__swsetup_r>:
 8009a9c:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <__swsetup_r+0xcc>)
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	b125      	cbz	r5, 8009ab2 <__swsetup_r+0x16>
 8009aa8:	69ab      	ldr	r3, [r5, #24]
 8009aaa:	b913      	cbnz	r3, 8009ab2 <__swsetup_r+0x16>
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7fe ff73 	bl	8008998 <__sinit>
 8009ab2:	4b2e      	ldr	r3, [pc, #184]	; (8009b6c <__swsetup_r+0xd0>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	d10f      	bne.n	8009ad8 <__swsetup_r+0x3c>
 8009ab8:	686c      	ldr	r4, [r5, #4]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ac0:	0719      	lsls	r1, r3, #28
 8009ac2:	d42c      	bmi.n	8009b1e <__swsetup_r+0x82>
 8009ac4:	06dd      	lsls	r5, r3, #27
 8009ac6:	d411      	bmi.n	8009aec <__swsetup_r+0x50>
 8009ac8:	2309      	movs	r3, #9
 8009aca:	6033      	str	r3, [r6, #0]
 8009acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	e03e      	b.n	8009b56 <__swsetup_r+0xba>
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <__swsetup_r+0xd4>)
 8009ada:	429c      	cmp	r4, r3
 8009adc:	d101      	bne.n	8009ae2 <__swsetup_r+0x46>
 8009ade:	68ac      	ldr	r4, [r5, #8]
 8009ae0:	e7eb      	b.n	8009aba <__swsetup_r+0x1e>
 8009ae2:	4b24      	ldr	r3, [pc, #144]	; (8009b74 <__swsetup_r+0xd8>)
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	bf08      	it	eq
 8009ae8:	68ec      	ldreq	r4, [r5, #12]
 8009aea:	e7e6      	b.n	8009aba <__swsetup_r+0x1e>
 8009aec:	0758      	lsls	r0, r3, #29
 8009aee:	d512      	bpl.n	8009b16 <__swsetup_r+0x7a>
 8009af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af2:	b141      	cbz	r1, 8009b06 <__swsetup_r+0x6a>
 8009af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af8:	4299      	cmp	r1, r3
 8009afa:	d002      	beq.n	8009b02 <__swsetup_r+0x66>
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff fad3 	bl	80090a8 <_free_r>
 8009b02:	2300      	movs	r3, #0
 8009b04:	6363      	str	r3, [r4, #52]	; 0x34
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6063      	str	r3, [r4, #4]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f043 0308 	orr.w	r3, r3, #8
 8009b1c:	81a3      	strh	r3, [r4, #12]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	b94b      	cbnz	r3, 8009b36 <__swsetup_r+0x9a>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b2c:	d003      	beq.n	8009b36 <__swsetup_r+0x9a>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4630      	mov	r0, r6
 8009b32:	f000 f847 	bl	8009bc4 <__smakebuf_r>
 8009b36:	89a0      	ldrh	r0, [r4, #12]
 8009b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b3c:	f010 0301 	ands.w	r3, r0, #1
 8009b40:	d00a      	beq.n	8009b58 <__swsetup_r+0xbc>
 8009b42:	2300      	movs	r3, #0
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	425b      	negs	r3, r3
 8009b4a:	61a3      	str	r3, [r4, #24]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	b943      	cbnz	r3, 8009b62 <__swsetup_r+0xc6>
 8009b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b54:	d1ba      	bne.n	8009acc <__swsetup_r+0x30>
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	0781      	lsls	r1, r0, #30
 8009b5a:	bf58      	it	pl
 8009b5c:	6963      	ldrpl	r3, [r4, #20]
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	e7f4      	b.n	8009b4c <__swsetup_r+0xb0>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e7f7      	b.n	8009b56 <__swsetup_r+0xba>
 8009b66:	bf00      	nop
 8009b68:	20000018 	.word	0x20000018
 8009b6c:	08009f44 	.word	0x08009f44
 8009b70:	08009f64 	.word	0x08009f64
 8009b74:	08009f24 	.word	0x08009f24

08009b78 <__swhatbuf_r>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	460e      	mov	r6, r1
 8009b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b80:	2900      	cmp	r1, #0
 8009b82:	b096      	sub	sp, #88	; 0x58
 8009b84:	4614      	mov	r4, r2
 8009b86:	461d      	mov	r5, r3
 8009b88:	da08      	bge.n	8009b9c <__swhatbuf_r+0x24>
 8009b8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	602a      	str	r2, [r5, #0]
 8009b92:	061a      	lsls	r2, r3, #24
 8009b94:	d410      	bmi.n	8009bb8 <__swhatbuf_r+0x40>
 8009b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b9a:	e00e      	b.n	8009bba <__swhatbuf_r+0x42>
 8009b9c:	466a      	mov	r2, sp
 8009b9e:	f000 f89b 	bl	8009cd8 <_fstat_r>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	dbf1      	blt.n	8009b8a <__swhatbuf_r+0x12>
 8009ba6:	9a01      	ldr	r2, [sp, #4]
 8009ba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bb0:	425a      	negs	r2, r3
 8009bb2:	415a      	adcs	r2, r3
 8009bb4:	602a      	str	r2, [r5, #0]
 8009bb6:	e7ee      	b.n	8009b96 <__swhatbuf_r+0x1e>
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	2000      	movs	r0, #0
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	b016      	add	sp, #88	; 0x58
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bc4 <__smakebuf_r>:
 8009bc4:	898b      	ldrh	r3, [r1, #12]
 8009bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bc8:	079d      	lsls	r5, r3, #30
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	d507      	bpl.n	8009be0 <__smakebuf_r+0x1c>
 8009bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	2301      	movs	r3, #1
 8009bda:	6163      	str	r3, [r4, #20]
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	ab01      	add	r3, sp, #4
 8009be2:	466a      	mov	r2, sp
 8009be4:	f7ff ffc8 	bl	8009b78 <__swhatbuf_r>
 8009be8:	9900      	ldr	r1, [sp, #0]
 8009bea:	4605      	mov	r5, r0
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7fe ffcf 	bl	8008b90 <_malloc_r>
 8009bf2:	b948      	cbnz	r0, 8009c08 <__smakebuf_r+0x44>
 8009bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf8:	059a      	lsls	r2, r3, #22
 8009bfa:	d4ef      	bmi.n	8009bdc <__smakebuf_r+0x18>
 8009bfc:	f023 0303 	bic.w	r3, r3, #3
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	e7e3      	b.n	8009bd0 <__smakebuf_r+0xc>
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <__smakebuf_r+0x7c>)
 8009c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	6020      	str	r0, [r4, #0]
 8009c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	9b00      	ldr	r3, [sp, #0]
 8009c18:	6163      	str	r3, [r4, #20]
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	6120      	str	r0, [r4, #16]
 8009c1e:	b15b      	cbz	r3, 8009c38 <__smakebuf_r+0x74>
 8009c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c24:	4630      	mov	r0, r6
 8009c26:	f000 f869 	bl	8009cfc <_isatty_r>
 8009c2a:	b128      	cbz	r0, 8009c38 <__smakebuf_r+0x74>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	f023 0303 	bic.w	r3, r3, #3
 8009c32:	f043 0301 	orr.w	r3, r3, #1
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	89a0      	ldrh	r0, [r4, #12]
 8009c3a:	4305      	orrs	r5, r0
 8009c3c:	81a5      	strh	r5, [r4, #12]
 8009c3e:	e7cd      	b.n	8009bdc <__smakebuf_r+0x18>
 8009c40:	08008931 	.word	0x08008931

08009c44 <memmove>:
 8009c44:	4288      	cmp	r0, r1
 8009c46:	b510      	push	{r4, lr}
 8009c48:	eb01 0402 	add.w	r4, r1, r2
 8009c4c:	d902      	bls.n	8009c54 <memmove+0x10>
 8009c4e:	4284      	cmp	r4, r0
 8009c50:	4623      	mov	r3, r4
 8009c52:	d807      	bhi.n	8009c64 <memmove+0x20>
 8009c54:	1e43      	subs	r3, r0, #1
 8009c56:	42a1      	cmp	r1, r4
 8009c58:	d008      	beq.n	8009c6c <memmove+0x28>
 8009c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c62:	e7f8      	b.n	8009c56 <memmove+0x12>
 8009c64:	4402      	add	r2, r0
 8009c66:	4601      	mov	r1, r0
 8009c68:	428a      	cmp	r2, r1
 8009c6a:	d100      	bne.n	8009c6e <memmove+0x2a>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c76:	e7f7      	b.n	8009c68 <memmove+0x24>

08009c78 <_realloc_r>:
 8009c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	4614      	mov	r4, r2
 8009c80:	460e      	mov	r6, r1
 8009c82:	b921      	cbnz	r1, 8009c8e <_realloc_r+0x16>
 8009c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4611      	mov	r1, r2
 8009c8a:	f7fe bf81 	b.w	8008b90 <_malloc_r>
 8009c8e:	b92a      	cbnz	r2, 8009c9c <_realloc_r+0x24>
 8009c90:	f7ff fa0a 	bl	80090a8 <_free_r>
 8009c94:	4625      	mov	r5, r4
 8009c96:	4628      	mov	r0, r5
 8009c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9c:	f000 f83e 	bl	8009d1c <_malloc_usable_size_r>
 8009ca0:	4284      	cmp	r4, r0
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	d802      	bhi.n	8009cac <_realloc_r+0x34>
 8009ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009caa:	d812      	bhi.n	8009cd2 <_realloc_r+0x5a>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f7fe ff6e 	bl	8008b90 <_malloc_r>
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0ed      	beq.n	8009c96 <_realloc_r+0x1e>
 8009cba:	42bc      	cmp	r4, r7
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	bf28      	it	cs
 8009cc2:	463a      	movcs	r2, r7
 8009cc4:	f7fe ff2d 	bl	8008b22 <memcpy>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7ff f9ec 	bl	80090a8 <_free_r>
 8009cd0:	e7e1      	b.n	8009c96 <_realloc_r+0x1e>
 8009cd2:	4635      	mov	r5, r6
 8009cd4:	e7df      	b.n	8009c96 <_realloc_r+0x1e>
	...

08009cd8 <_fstat_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d07      	ldr	r5, [pc, #28]	; (8009cf8 <_fstat_r+0x20>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	f7f7 fc6e 	bl	80015c6 <_fstat>
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	d102      	bne.n	8009cf4 <_fstat_r+0x1c>
 8009cee:	682b      	ldr	r3, [r5, #0]
 8009cf0:	b103      	cbz	r3, 8009cf4 <_fstat_r+0x1c>
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20004de8 	.word	0x20004de8

08009cfc <_isatty_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d06      	ldr	r5, [pc, #24]	; (8009d18 <_isatty_r+0x1c>)
 8009d00:	2300      	movs	r3, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	f7f7 fc6d 	bl	80015e6 <_isatty>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_isatty_r+0x1a>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_isatty_r+0x1a>
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	20004de8 	.word	0x20004de8

08009d1c <_malloc_usable_size_r>:
 8009d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d20:	1f18      	subs	r0, r3, #4
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	bfbc      	itt	lt
 8009d26:	580b      	ldrlt	r3, [r1, r0]
 8009d28:	18c0      	addlt	r0, r0, r3
 8009d2a:	4770      	bx	lr

08009d2c <_init>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr

08009d38 <_fini>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr
