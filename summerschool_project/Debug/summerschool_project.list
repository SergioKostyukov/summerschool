
summerschool_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f8  080081f8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008200  08008200  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004470  2000007c  08008284  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044ec  08008284  000244ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d405  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003863  00000000  00000000  0003d4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00040d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00042690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053d8  00000000  00000000  00043ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da75  00000000  00000000  000492b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea55  00000000  00000000  00066d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010577a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d8  00000000  00000000  001057cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fac 	.word	0x08007fac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007fac 	.word	0x08007fac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <lcd_start_write+0x14>)
 800058e:	f001 ff55 	bl	800243c <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <lcd_end_write>:

static void lcd_end_write(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <lcd_end_write+0x14>)
 80005a6:	f001 ff49 	bl	800243c <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_start_command>:

static void lcd_start_command(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <lcd_start_command+0x14>)
 80005be:	f001 ff3d 	bl	800243c <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <lcd_start_data>:

static void lcd_start_data(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <lcd_start_data+0x14>)
 80005d6:	f001 ff31 	bl	800243c <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80005ee:	f7ff ffe1 	bl	80005b4 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <lcd_spi_send_com+0x30>)
 80005fc:	f002 fd75 	bl	80030ea <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d000      	beq.n	800060c <lcd_spi_send_com+0x28>
		while (1) {}
 800060a:	e7fe      	b.n	800060a <lcd_spi_send_com+0x26>
	}
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000f8 	.word	0x200000f8

08000618 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000628:	f7ff ffd0 	bl	80005cc <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lcd_spi_send_data+0x38>)
 8000638:	f002 fd57 	bl	80030ea <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <lcd_spi_send_data+0x30>
			while (1) {}
 8000646:	e7fe      	b.n	8000646 <lcd_spi_send_data+0x2e>
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000f8 	.word	0x200000f8

08000654 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4603      	mov	r3, r0
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
 800066e:	4613      	mov	r3, r2
 8000670:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <lcd_set_window+0xc4>)
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_set_window+0xc8>)
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	733b      	strb	r3, [r7, #12]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4413      	add	r3, r2
 800069c:	3b01      	subs	r3, #1
 800069e:	121b      	asrs	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73bb      	strb	r3, [r7, #14]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	723b      	strb	r3, [r7, #8]
 80006c0:	88bb      	ldrh	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	727b      	strb	r3, [r7, #9]
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	3b01      	subs	r3, #1
 80006ce:	121b      	asrs	r3, r3, #8
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	72bb      	strb	r3, [r7, #10]
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	883b      	ldrh	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80006e6:	202a      	movs	r0, #42	; 0x2a
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff90 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f7ff ff73 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff87 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 800070a:	202c      	movs	r0, #44	; 0x2c
 800070c:	f7ff ff6a 	bl	80005e4 <lcd_spi_send_com>
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	2000009a 	.word	0x2000009a
 800071c:	2000009c 	.word	0x2000009c

08000720 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <lcd_init+0xd4>)
 8000728:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2108      	movs	r1, #8
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <lcd_init+0xd8>)
 8000730:	f001 fe84 	bl	800243c <HAL_GPIO_WritePin>
	osDelay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f004 f951 	bl	80049dc <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2108      	movs	r1, #8
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <lcd_init+0xd8>)
 8000740:	f001 fe7c 	bl	800243c <HAL_GPIO_WritePin>
	osDelay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f004 f949 	bl	80049dc <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2108      	movs	r1, #8
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <lcd_init+0xd8>)
 8000750:	f001 fe74 	bl	800243c <HAL_GPIO_WritePin>
	osDelay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f004 f941 	bl	80049dc <osDelay>

	numCommands = *ptr++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000764:	e035      	b.n	80007d2 <lcd_init+0xb2>
		cmd = *ptr++;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800078c:	f7ff fefa 	bl	8000584 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff26 	bl	80005e4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	68b8      	ldr	r0, [r7, #8]
 800079e:	f7ff ff3b 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 80007a2:	f7ff fefb 	bl	800059c <lcd_end_write>
		ptr += numArgs;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]

		if (ms) {
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <lcd_init+0xb2>
			ms = *ptr++;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	2bff      	cmp	r3, #255	; 0xff
 80007c2:	d102      	bne.n	80007ca <lcd_init+0xaa>
				ms = 500;
 80007c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c8:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 f905 	bl	80049dc <osDelay>
	while (numCommands--) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	73fa      	strb	r2, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1c4      	bne.n	8000766 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 80007dc:	f7ff fed2 	bl	8000584 <lcd_start_write>
	lcd_set_rotation(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f80b 	bl	80007fc <lcd_set_rotation>
	lcd_end_write();
 80007e6:	f7ff fed9 	bl	800059c <lcd_end_write>

	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0800805c 	.word	0x0800805c
 80007f8:	40020000 	.word	0x40020000

080007fc <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <lcd_set_rotation+0xec>)
 8000814:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <lcd_set_rotation+0xec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d856      	bhi.n	80008cc <lcd_set_rotation+0xd0>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <lcd_set_rotation+0x28>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	0800085b 	.word	0x0800085b
 800082c:	08000881 	.word	0x08000881
 8000830:	080008a7 	.word	0x080008a7
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <lcd_set_rotation+0xf0>)
 800083a:	22a0      	movs	r2, #160	; 0xa0
 800083c:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <lcd_set_rotation+0xfc>)
 800084c:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <lcd_set_rotation+0x100>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <lcd_set_rotation+0x104>)
 8000856:	801a      	strh	r2, [r3, #0]
		break;
 8000858:	e038      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000860:	22a0      	movs	r2, #160	; 0xa0
 8000862:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <lcd_set_rotation+0xf0>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <lcd_set_rotation+0xf8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <lcd_set_rotation+0x104>)
 8000872:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <lcd_set_rotation+0x100>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <lcd_set_rotation+0xfc>)
 800087c:	801a      	strh	r2, [r3, #0]
		break;
 800087e:	e025      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <lcd_set_rotation+0xf0>)
 8000886:	22a0      	movs	r2, #160	; 0xa0
 8000888:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <lcd_set_rotation+0xf4>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <lcd_set_rotation+0xfc>)
 8000898:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <lcd_set_rotation+0x100>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <lcd_set_rotation+0x104>)
 80008a2:	801a      	strh	r2, [r3, #0]
		break;
 80008a4:	e012      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 80008a6:	2368      	movs	r3, #104	; 0x68
 80008a8:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <lcd_set_rotation+0xf4>)
 80008ac:	22a0      	movs	r2, #160	; 0xa0
 80008ae:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <lcd_set_rotation+0xf0>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <lcd_set_rotation+0xf8>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <lcd_set_rotation+0x104>)
 80008be:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <lcd_set_rotation+0x100>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <lcd_set_rotation+0xfc>)
 80008c8:	801a      	strh	r2, [r3, #0]
		break;
 80008ca:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 80008cc:	2036      	movs	r0, #54	; 0x36
 80008ce:	f7ff fe89 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 80008d2:	f107 030f 	add.w	r3, r7, #15
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9d 	bl	8000618 <lcd_spi_send_data>
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000098 	.word	0x20000098
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	2000009e 	.word	0x2000009e
 80008f4:	200000a2 	.word	0x200000a2
 80008f8:	2000009a 	.word	0x2000009a
 80008fc:	200000a3 	.word	0x200000a3
 8000900:	2000009c 	.word	0x2000009c

08000904 <lcd_vline>:
		lcd_spi_send_data(c, 2);
		lcd_end_write();
	}
}

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4604      	mov	r4, r0
 800090c:	4608      	mov	r0, r1
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	4623      	mov	r3, r4
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	4603      	mov	r3, r0
 8000918:	80bb      	strh	r3, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	807b      	strh	r3, [r7, #2]
 800091e:	4613      	mov	r3, r2
 8000920:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000922:	f7ff fe2f 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	88b9      	ldrh	r1, [r7, #4]
 800092a:	88f8      	ldrh	r0, [r7, #6]
 800092c:	2201      	movs	r2, #1
 800092e:	f7ff fe91 	bl	8000654 <lcd_set_window>
	lcd_start_data();
 8000932:	f7ff fe4b 	bl	80005cc <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 8000936:	883b      	ldrh	r3, [r7, #0]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29b      	uxth	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	733b      	strb	r3, [r7, #12]
 8000940:	883b      	ldrh	r3, [r7, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe63 	bl	8000618 <lcd_spi_send_data>
	while (h--);
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	807a      	strh	r2, [r7, #2]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f4      	bne.n	8000946 <lcd_vline+0x42>
	lcd_end_write();
 800095c:	f7ff fe1e 	bl	800059c <lcd_end_write>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4604      	mov	r4, r0
 8000970:	4608      	mov	r0, r1
 8000972:	4611      	mov	r1, r2
 8000974:	461a      	mov	r2, r3
 8000976:	4623      	mov	r3, r4
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	4603      	mov	r3, r0
 800097c:	80bb      	strh	r3, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
 8000982:	4613      	mov	r3, r2
 8000984:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	2b00      	cmp	r3, #0
 800098c:	da01      	bge.n	8000992 <lcd_fill_rect+0x2a>
 800098e:	2300      	movs	r3, #0
 8000990:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 8000992:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da01      	bge.n	800099e <lcd_fill_rect+0x36>
 800099a:	2300      	movs	r3, #0
 800099c:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 800099e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <lcd_fill_rect+0xc4>)
 80009aa:	8812      	ldrh	r2, [r2, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	dd05      	ble.n	80009bc <lcd_fill_rect+0x54>
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <lcd_fill_rect+0xc4>)
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 80009bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <lcd_fill_rect+0xc8>)
 80009c8:	8812      	ldrh	r2, [r2, #0]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	dd05      	ble.n	80009da <lcd_fill_rect+0x72>
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <lcd_fill_rect+0xc8>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 80009da:	f7ff fdd3 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 80009de:	88f8      	ldrh	r0, [r7, #6]
 80009e0:	88b9      	ldrh	r1, [r7, #4]
 80009e2:	887a      	ldrh	r2, [r7, #2]
 80009e4:	883b      	ldrh	r3, [r7, #0]
 80009e6:	f7ff fe35 	bl	8000654 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 80009ea:	8c3b      	ldrh	r3, [r7, #32]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	723b      	strb	r3, [r7, #8]
 80009f4:	8c3b      	ldrh	r3, [r7, #32]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 80009fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8000a08:	e005      	b.n	8000a16 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe01 	bl	8000618 <lcd_spi_send_data>
	while (cnt--)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f4      	bne.n	8000a0a <lcd_fill_rect+0xa2>
	lcd_end_write();
 8000a20:	f7ff fdbc 	bl	800059c <lcd_end_write>
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	2000009e 	.word	0x2000009e
 8000a30:	200000a0 	.word	0x200000a0

08000a34 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <lcd_fill+0x2c>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <lcd_fill+0x30>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b219      	sxth	r1, r3
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	2100      	movs	r1, #0
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ff88 	bl	8000968 <lcd_fill_rect>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000009e 	.word	0x2000009e
 8000a64:	200000a0 	.word	0x200000a0

08000a68 <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	80fb      	strh	r3, [r7, #6]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80bb      	strh	r3, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	807b      	strh	r3, [r7, #2]
 8000a82:	4613      	mov	r3, r2
 8000a84:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000a86:	887b      	ldrh	r3, [r7, #2]
 8000a88:	f1c3 0301 	rsb	r3, r3, #1
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	461a      	mov	r2, r3
 8000a98:	03d2      	lsls	r2, r2, #15
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 8000aaa:	8a3b      	ldrh	r3, [r7, #16]
 8000aac:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 8000ab2:	e071      	b.n	8000b98 <lcd_fill_circle+0x130>
		if (f >= 0) {
 8000ab4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0e      	blt.n	8000ada <lcd_fill_circle+0x72>
			y--;
 8000abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000ac8:	8a7b      	ldrh	r3, [r7, #18]
 8000aca:	3302      	adds	r3, #2
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000ad0:	8afa      	ldrh	r2, [r7, #22]
 8000ad2:	8a7b      	ldrh	r3, [r7, #18]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000ada:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000ae6:	8abb      	ldrh	r3, [r7, #20]
 8000ae8:	3302      	adds	r3, #2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000aee:	8afa      	ldrh	r2, [r7, #22]
 8000af0:	8abb      	ldrh	r3, [r7, #20]
 8000af2:	4413      	add	r3, r2
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	82fb      	strh	r3, [r7, #22]
		if (x < (y + 1)) {
 8000af8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000afc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	db1f      	blt.n	8000b44 <lcd_fill_circle+0xdc>
			lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	8a3b      	ldrh	r3, [r7, #16]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b298      	uxth	r0, r3
 8000b0c:	88ba      	ldrh	r2, [r7, #4]
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	b299      	uxth	r1, r3
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	f7ff fef0 	bl	8000904 <lcd_vline>
			lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8000b24:	88fa      	ldrh	r2, [r7, #6]
 8000b26:	8a3b      	ldrh	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	88ba      	ldrh	r2, [r7, #4]
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b299      	uxth	r1, r3
 8000b34:	89fb      	ldrh	r3, [r7, #14]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	883b      	ldrh	r3, [r7, #0]
 8000b40:	f7ff fee0 	bl	8000904 <lcd_vline>
		}
		if (y != py) {
 8000b44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d021      	beq.n	8000b94 <lcd_fill_circle+0x12c>
			lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	897b      	ldrh	r3, [r7, #10]
 8000b54:	4413      	add	r3, r2
 8000b56:	b298      	uxth	r0, r3
 8000b58:	88ba      	ldrh	r2, [r7, #4]
 8000b5a:	89bb      	ldrh	r3, [r7, #12]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b299      	uxth	r1, r3
 8000b60:	89bb      	ldrh	r3, [r7, #12]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3301      	adds	r3, #1
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	883b      	ldrh	r3, [r7, #0]
 8000b6c:	f7ff feca 	bl	8000904 <lcd_vline>
			lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b298      	uxth	r0, r3
 8000b78:	88ba      	ldrh	r2, [r7, #4]
 8000b7a:	89bb      	ldrh	r3, [r7, #12]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	89bb      	ldrh	r3, [r7, #12]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3301      	adds	r3, #1
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	883b      	ldrh	r3, [r7, #0]
 8000b8c:	f7ff feba 	bl	8000904 <lcd_vline>
			py = y;
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8000b94:	8a3b      	ldrh	r3, [r7, #16]
 8000b96:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8000b98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	db87      	blt.n	8000ab4 <lcd_fill_circle+0x4c>
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8000ba4:	88f8      	ldrh	r0, [r7, #6]
 8000ba6:	88ba      	ldrh	r2, [r7, #4]
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b299      	uxth	r1, r3
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	883b      	ldrh	r3, [r7, #0]
 8000bba:	f7ff fea3 	bl	8000904 <lcd_vline>
}
 8000bbe:	bf00      	nop
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
	...

08000bc8 <__io_getchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char text[100];

int __io_getchar(void) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <__io_getchar+0x68>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000bd8:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <__io_getchar+0x6c>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <__io_getchar+0x70>)
 8000bde:	6013      	str	r3, [r2, #0]

	while (rx_tail == rx_head) {
 8000be0:	e008      	b.n	8000bf4 <__io_getchar+0x2c>
		rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <__io_getchar+0x68>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <__io_getchar+0x6c>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <__io_getchar+0x70>)
 8000bf2:	6013      	str	r3, [r2, #0]
	while (rx_tail == rx_head) {
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <__io_getchar+0x74>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <__io_getchar+0x70>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d0f0      	beq.n	8000be2 <__io_getchar+0x1a>
//		osDelay(1);
	}

	uint8_t b = *rx_tail;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <__io_getchar+0x74>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]

	if (++rx_tail == (rx_buffer + UART_RX_BUF_SIZE))
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__io_getchar+0x74>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <__io_getchar+0x74>)
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <__io_getchar+0x74>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <__io_getchar+0x78>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d102      	bne.n	8000c22 <__io_getchar+0x5a>
//	if (++rx_tail == &rx_buffer[UART_RX_BUF_SIZE])
		rx_tail = rx_buffer;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <__io_getchar+0x74>)
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <__io_getchar+0x6c>)
 8000c20:	601a      	str	r2, [r3, #0]

	return (int)b;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	200001dc 	.word	0x200001dc
 8000c34:	2000024c 	.word	0x2000024c
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000004 	.word	0x20000004
 8000c40:	20000314 	.word	0x20000314

08000c44 <__io_putchar>:

int __io_putchar(int ch) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8000c4c:	1d39      	adds	r1, r7, #4
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	2201      	movs	r2, #1
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <__io_putchar+0x20>)
 8000c54:	f003 f81b 	bl	8003c8e <HAL_UART_Transmit>
	return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000198 	.word	0x20000198

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6e:	f000 fd6d 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f88f 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f000 f9df 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7a:	f000 f9bd 	bl	8000ff8 <MX_DMA_Init>
  MX_TIM9_Init();
 8000c7e:	f000 f957 	bl	8000f30 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8000c82:	f000 f98f 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000c86:	f000 f8ef 	bl	8000e68 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c8a:	f000 f91b 	bl	8000ec4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer)) != HAL_OK) {
 8000c8e:	22c8      	movs	r2, #200	; 0xc8
 8000c90:	492e      	ldr	r1, [pc, #184]	; (8000d4c <main+0xe4>)
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <main+0xe8>)
 8000c94:	f003 f88d 	bl	8003db2 <HAL_UART_Receive_DMA>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d012      	beq.n	8000cc4 <main+0x5c>
	  snprintf(text, countof(text), "Error start UART RX %d\n", __LINE__);
 8000c9e:	23aa      	movs	r3, #170	; 0xaa
 8000ca0:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <main+0xec>)
 8000ca2:	2164      	movs	r1, #100	; 0x64
 8000ca4:	482c      	ldr	r0, [pc, #176]	; (8000d58 <main+0xf0>)
 8000ca6:	f006 f9b9 	bl	800701c <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000caa:	2164      	movs	r1, #100	; 0x64
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <main+0xf0>)
 8000cae:	f006 fa2c 	bl	800710a <strnlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <main+0xf0>)
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <main+0xe8>)
 8000cbe:	f002 ffe6 	bl	8003c8e <HAL_UART_Transmit>
	  while (1) {}
 8000cc2:	e7fe      	b.n	8000cc2 <main+0x5a>
  }

  snprintf(text, countof(text), "Start UART RX %d\n", __LINE__);
 8000cc4:	23af      	movs	r3, #175	; 0xaf
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <main+0xf4>)
 8000cc8:	2164      	movs	r1, #100	; 0x64
 8000cca:	4823      	ldr	r0, [pc, #140]	; (8000d58 <main+0xf0>)
 8000ccc:	f006 f9a6 	bl	800701c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000cd0:	2164      	movs	r1, #100	; 0x64
 8000cd2:	4821      	ldr	r0, [pc, #132]	; (8000d58 <main+0xf0>)
 8000cd4:	f006 fa19 	bl	800710a <strnlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	491d      	ldr	r1, [pc, #116]	; (8000d58 <main+0xf0>)
 8000ce2:	481b      	ldr	r0, [pc, #108]	; (8000d50 <main+0xe8>)
 8000ce4:	f002 ffd3 	bl	8003c8e <HAL_UART_Transmit>
//  lcd_print("\nNew line!");

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ce8:	f003 fdc2 	bl	8004870 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART */
  muxUARTHandle = osMutexNew(&muxUART_attributes);
 8000cec:	481c      	ldr	r0, [pc, #112]	; (8000d60 <main+0xf8>)
 8000cee:	f003 fe90 	bl	8004a12 <osMutexNew>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <main+0xfc>)
 8000cf6:	6013      	str	r3, [r2, #0]

  /* creation of muxLCD */
  muxLCDHandle = osMutexNew(&muxLCD_attributes);
 8000cf8:	481b      	ldr	r0, [pc, #108]	; (8000d68 <main+0x100>)
 8000cfa:	f003 fe8a 	bl	8004a12 <osMutexNew>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <main+0x104>)
 8000d02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskLEDBlink */
  taskLEDBlinkHandle = osThreadNew(StartTaskLEDBlink, NULL, &taskLEDBlink_attributes);
 8000d04:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <main+0x108>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	481a      	ldr	r0, [pc, #104]	; (8000d74 <main+0x10c>)
 8000d0a:	f003 fdd5 	bl	80048b8 <osThreadNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <main+0x110>)
 8000d12:	6013      	str	r3, [r2, #0]

  /* creation of taskButtonRead */
  taskButtonReadHandle = osThreadNew(StartTaskButtonRead, NULL, &taskButtonRead_attributes);
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <main+0x114>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4819      	ldr	r0, [pc, #100]	; (8000d80 <main+0x118>)
 8000d1a:	f003 fdcd 	bl	80048b8 <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <main+0x11c>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  lcd_init();
 8000d24:	f7ff fcfc 	bl	8000720 <lcd_init>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("This text is from printf(), %d, %s, %s\n", __LINE__, __FILE__, __FUNCTION__);
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <main+0x120>)
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <main+0x124>)
 8000d2c:	21fd      	movs	r1, #253	; 0xfd
 8000d2e:	4818      	ldr	r0, [pc, #96]	; (8000d90 <main+0x128>)
 8000d30:	f006 f94c 	bl	8006fcc <iprintf>

  while (1)
  {
	  int c = __io_getchar();
 8000d34:	f7ff ff48 	bl	8000bc8 <__io_getchar>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 1000);
 8000d3c:	1d39      	adds	r1, r7, #4
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	2201      	movs	r2, #1
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <main+0xe8>)
 8000d46:	f002 ffa2 	bl	8003c8e <HAL_UART_Transmit>
  {
 8000d4a:	e7f3      	b.n	8000d34 <main+0xcc>
 8000d4c:	2000024c 	.word	0x2000024c
 8000d50:	20000198 	.word	0x20000198
 8000d54:	08007ff4 	.word	0x08007ff4
 8000d58:	20000314 	.word	0x20000314
 8000d5c:	0800800c 	.word	0x0800800c
 8000d60:	08008118 	.word	0x08008118
 8000d64:	20000244 	.word	0x20000244
 8000d68:	08008128 	.word	0x08008128
 8000d6c:	20000248 	.word	0x20000248
 8000d70:	080080d0 	.word	0x080080d0
 8000d74:	0800116d 	.word	0x0800116d
 8000d78:	2000023c 	.word	0x2000023c
 8000d7c:	080080f4 	.word	0x080080f4
 8000d80:	080011d5 	.word	0x080011d5
 8000d84:	20000240 	.word	0x20000240
 8000d88:	08008138 	.word	0x08008138
 8000d8c:	08008020 	.word	0x08008020
 8000d90:	08008034 	.word	0x08008034

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f875 	bl	8006e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df4:	2301      	movs	r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e08:	2319      	movs	r3, #25
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e0c:	23a8      	movs	r3, #168	; 0xa8
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fc83 	bl	8002728 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e28:	f000 fa0a 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fee5 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e54:	f000 f9f4 	bl	8001240 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <MX_I2C1_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x58>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea6:	f001 fafb 	bl	80024a0 <HAL_I2C_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 f9c6 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000a4 	.word	0x200000a4
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	000186a0 	.word	0x000186a0

08000ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_SPI1_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f16:	f002 f85f 	bl	8002fd8 <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f20:	f000 f98e 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000f8 	.word	0x200000f8
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f44:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f4a:	f240 3247 	movw	r2, #839	; 0x347
 8000f4e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f58:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f5c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f6c:	f002 fac4 	bl	80034f8 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 f963 	bl	8001240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_TIM9_Init+0x6c>)
 8000f86:	f002 fc0e 	bl	80037a6 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000f90:	f000 f956 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000150 	.word	0x20000150
 8000fa0:	40014000 	.word	0x40014000

08000fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART1_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f002 fe0a 	bl	8003bf4 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 f92b 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000198 	.word	0x20000198
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DMA_Init+0x3c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MX_DMA_Init+0x3c>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DMA_Init+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	203a      	movs	r0, #58	; 0x3a
 8001020:	f000 fce1 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001024:	203a      	movs	r0, #58	; 0x3a
 8001026:	f000 fcfa 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <MX_GPIO_Init+0x10c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_GPIO_Init+0x10c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_GPIO_Init+0x10c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_GPIO_Init+0x10c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <MX_GPIO_Init+0x10c>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_GPIO_Init+0x10c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4820      	ldr	r0, [pc, #128]	; (8001148 <MX_GPIO_Init+0x110>)
 80010c6:	f001 f9b9 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2158      	movs	r1, #88	; 0x58
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x114>)
 80010d0:	f001 f9b4 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4816      	ldr	r0, [pc, #88]	; (8001148 <MX_GPIO_Init+0x110>)
 80010ee:	f001 f821 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 80010f2:	2358      	movs	r3, #88	; 0x58
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4810      	ldr	r0, [pc, #64]	; (800114c <MX_GPIO_Init+0x114>)
 800110a:	f001 f813 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001114:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	480a      	ldr	r0, [pc, #40]	; (8001150 <MX_GPIO_Init+0x118>)
 8001126:	f001 f805 	bl	8002134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2105      	movs	r1, #5
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f000 fc59 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001134:	2028      	movs	r0, #40	; 0x28
 8001136:	f000 fc72 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020800 	.word	0x40020800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400

08001154 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <StartTaskLEDBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLEDBlink */
void StartTaskLEDBlink(void *argument)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <StartTaskLEDBlink+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fcce 	bl	8004b1e <osMutexAcquire>
	  lcd_fill_circle(80, 80, 30, ST77XX_BLACK);
 8001182:	2300      	movs	r3, #0
 8001184:	221e      	movs	r2, #30
 8001186:	2150      	movs	r1, #80	; 0x50
 8001188:	2050      	movs	r0, #80	; 0x50
 800118a:	f7ff fc6d 	bl	8000a68 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <StartTaskLEDBlink+0x64>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fd0e 	bl	8004bb4 <osMutexRelease>
	  osDelay(300);
 8001198:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800119c:	f003 fc1e 	bl	80049dc <osDelay>

	  osMutexAcquire(muxLCDHandle, osWaitForever);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <StartTaskLEDBlink+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fcb8 	bl	8004b1e <osMutexAcquire>
	  lcd_fill_circle(80, 80, 30, ST77XX_RED);
 80011ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011b2:	221e      	movs	r2, #30
 80011b4:	2150      	movs	r1, #80	; 0x50
 80011b6:	2050      	movs	r0, #80	; 0x50
 80011b8:	f7ff fc56 	bl	8000a68 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <StartTaskLEDBlink+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 fcf7 	bl	8004bb4 <osMutexRelease>
	  osDelay(300);
 80011c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011ca:	f003 fc07 	bl	80049dc <osDelay>
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 80011ce:	e7d1      	b.n	8001174 <StartTaskLEDBlink+0x8>
 80011d0:	20000248 	.word	0x20000248

080011d4 <StartTaskButtonRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButtonRead */
void StartTaskButtonRead(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskButtonRead */
	  lcd_init();
 80011dc:	f7ff faa0 	bl	8000720 <lcd_init>
	  lcd_fill(ST7735_BLACK);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fc27 	bl	8000a34 <lcd_fill>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <StartTaskButtonRead+0x68>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f04f 31ff 	mov.w	r1, #4294967295
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fc95 	bl	8004b1e <osMutexAcquire>
	  lcd_fill_circle(30, 30, 25, ST77XX_BLACK);
 80011f4:	2300      	movs	r3, #0
 80011f6:	2219      	movs	r2, #25
 80011f8:	211e      	movs	r1, #30
 80011fa:	201e      	movs	r0, #30
 80011fc:	f7ff fc34 	bl	8000a68 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <StartTaskButtonRead+0x68>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fcd5 	bl	8004bb4 <osMutexRelease>
	  osDelay(200);
 800120a:	20c8      	movs	r0, #200	; 0xc8
 800120c:	f003 fbe6 	bl	80049dc <osDelay>

	  osMutexAcquire(muxLCDHandle, osWaitForever);
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <StartTaskButtonRead+0x68>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fc80 	bl	8004b1e <osMutexAcquire>
	  lcd_fill_circle(30, 30, 25, ST77XX_BLUE);
 800121e:	231f      	movs	r3, #31
 8001220:	2219      	movs	r2, #25
 8001222:	211e      	movs	r1, #30
 8001224:	201e      	movs	r0, #30
 8001226:	f7ff fc1f 	bl	8000a68 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <StartTaskButtonRead+0x68>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fcc0 	bl	8004bb4 <osMutexRelease>
	  osDelay(200);
 8001234:	20c8      	movs	r0, #200	; 0xc8
 8001236:	f003 fbd1 	bl	80049dc <osDelay>
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 800123a:	e7d4      	b.n	80011e6 <StartTaskButtonRead+0x12>
 800123c:	20000248 	.word	0x20000248

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_MspInit+0x54>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_MspInit+0x54>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x54>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x54>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x54>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x54>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f000 fba8 	bl	80019e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_I2C_MspInit+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12c      	bne.n	8001320 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_I2C_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_I2C_MspInit+0x88>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_I2C_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f4:	2304      	movs	r3, #4
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <HAL_I2C_MspInit+0x8c>)
 8001300:	f000 ff18 	bl	8002134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_I2C_MspInit+0x88>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_I2C_MspInit+0x88>)
 800130e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_I2C_MspInit+0x88>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40005400 	.word	0x40005400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020400 	.word	0x40020400

08001334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_SPI_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12b      	bne.n	80013ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_SPI_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_SPI_MspInit+0x88>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139e:	2305      	movs	r3, #5
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_SPI_MspInit+0x8c>)
 80013aa:	f000 fec3 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013000 	.word	0x40013000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_TIM_Base_MspInit+0x48>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d115      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_TIM_Base_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_TIM_Base_MspInit+0x4c>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_TIM_Base_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2018      	movs	r0, #24
 80013f8:	f000 faf5 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013fc:	2018      	movs	r0, #24
 80013fe:	f000 fb0e 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40014000 	.word	0x40014000
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a31      	ldr	r2, [pc, #196]	; (80014f8 <HAL_UART_MspInit+0xe4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d15b      	bne.n	80014ee <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_UART_MspInit+0xe8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_UART_MspInit+0xe8>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_UART_MspInit+0xe8>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_UART_MspInit+0xe8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a28      	ldr	r2, [pc, #160]	; (80014fc <HAL_UART_MspInit+0xe8>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_UART_MspInit+0xe8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800146e:	23c0      	movs	r3, #192	; 0xc0
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147e:	2307      	movs	r3, #7
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	481d      	ldr	r0, [pc, #116]	; (8001500 <HAL_UART_MspInit+0xec>)
 800148a:	f000 fe53 	bl	8002134 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_UART_MspInit+0xf0>)
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_UART_MspInit+0xf4>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_UART_MspInit+0xf0>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_UART_MspInit+0xf0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014d4:	f000 fabe 	bl	8001a54 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80014de:	f7ff feaf 	bl	8001240 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_UART_MspInit+0xf0>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	200001dc 	.word	0x200001dc
 8001508:	40026440 	.word	0x40026440

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f958 	bl	80017f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001540:	f004 fe86 	bl	8006250 <xTaskGetSchedulerState>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800154a:	f005 f965 	bl	8006818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800155a:	f002 f81c 	bl	8003596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000150 	.word	0x20000150

08001568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800156c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001570:	f000 ff7e 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA2_Stream2_IRQHandler+0x10>)
 800157e:	f000 fb6f 	bl	8001c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001dc 	.word	0x200001dc

0800158c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e00a      	b.n	80015b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800159e:	f7ff fb13 	bl	8000bc8 <__io_getchar>
 80015a2:	4601      	mov	r1, r0
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	b2ca      	uxtb	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf0      	blt.n	800159e <_read+0x12>
	}

return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e009      	b.n	80015ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fb2f 	bl	8000c44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf1      	blt.n	80015d8 <_write+0x12>
	}
	return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001626:	605a      	str	r2, [r3, #4]
	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
	return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f005 faca 	bl	8006c30 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20010000 	.word	0x20010000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	20000378 	.word	0x20000378
 80016d0:	200044f0 	.word	0x200044f0

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001714:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001722:	f7ff ffd7 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001726:	f005 fb7f 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7ff fa9d 	bl	8000c68 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800173c:	08008208 	.word	0x08008208
  ldr r2, =_sbss
 8001740:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001744:	200044ec 	.word	0x200044ec

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f92b 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fd64 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f943 	bl	8001a3a <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f90b 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000010 	.word	0x20000010
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000010 	.word	0x20000010
 8001814:	2000037c 	.word	0x2000037c

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000037c 	.word	0x2000037c

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff29 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff3e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff feda 	bl	8001818 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e099      	b.n	8001ba4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	e00f      	b.n	8001ab2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a92:	f7ff fec1 	bl	8001818 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d908      	bls.n	8001ab2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e078      	b.n	8001ba4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e8      	bne.n	8001a92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_DMA_Init+0x158>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d107      	bne.n	8001b1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4313      	orrs	r3, r2
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d117      	bne.n	8001b76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fa6f 	bl	800203c <DMA_CheckFifoParam>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b72:	2301      	movs	r3, #1
 8001b74:	e016      	b.n	8001ba4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fa26 	bl	8001fd0 <DMA_CalcBaseAndBitshift>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	223f      	movs	r2, #63	; 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	f010803f 	.word	0xf010803f

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DMA_Start_IT+0x26>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e040      	b.n	8001c58 <HAL_DMA_Start_IT+0xa8>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d12f      	bne.n	8001c4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2202      	movs	r2, #2
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f9b8 	bl	8001f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	223f      	movs	r2, #63	; 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0216 	orr.w	r2, r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0208 	orr.w	r2, r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e005      	b.n	8001c56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c6c:	4b8e      	ldr	r3, [pc, #568]	; (8001ea8 <HAL_DMA_IRQHandler+0x248>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a8e      	ldr	r2, [pc, #568]	; (8001eac <HAL_DMA_IRQHandler+0x24c>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0a9b      	lsrs	r3, r3, #10
 8001c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01a      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2208      	movs	r2, #8
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	2204      	movs	r2, #4
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d012      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00b      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2204      	movs	r2, #4
 8001d26:	409a      	lsls	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d043      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03c      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d018      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d024      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e01f      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
 8001da0:	e016      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0208 	bic.w	r2, r2, #8
 8001dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 808f 	beq.w	8001f00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8087 	beq.w	8001f00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2220      	movs	r2, #32
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d136      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0216 	bic.w	r2, r2, #22
 8001e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_DMA_IRQHandler+0x1da>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0208 	bic.w	r2, r2, #8
 8001e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	223f      	movs	r2, #63	; 0x3f
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d07e      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
        }
        return;
 8001e76:	e079      	b.n	8001f6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d031      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e02c      	b.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d023      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e01e      	b.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10f      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0210 	bic.w	r2, r2, #16
 8001ede:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d032      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2205      	movs	r2, #5
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d307      	bcc.n	8001f48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f2      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x2cc>
 8001f46:	e000      	b.n	8001f4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f6c:	bf00      	nop
    }
  }
}
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d108      	bne.n	8001fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fb2:	e007      	b.n	8001fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	60da      	str	r2, [r3, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3b10      	subs	r3, #16
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <DMA_CalcBaseAndBitshift+0x64>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <DMA_CalcBaseAndBitshift+0x68>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d909      	bls.n	8002012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	; 0x58
 8002010:	e007      	b.n	8002022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	aaaaaaab 	.word	0xaaaaaaab
 8002038:	08008158 	.word	0x08008158

0800203c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d11f      	bne.n	8002096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d856      	bhi.n	800210a <DMA_CheckFifoParam+0xce>
 800205c:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <DMA_CheckFifoParam+0x28>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002075 	.word	0x08002075
 8002068:	08002087 	.word	0x08002087
 800206c:	08002075 	.word	0x08002075
 8002070:	0800210b 	.word	0x0800210b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d046      	beq.n	800210e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002084:	e043      	b.n	800210e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800208e:	d140      	bne.n	8002112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002094:	e03d      	b.n	8002112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209e:	d121      	bne.n	80020e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d837      	bhi.n	8002116 <DMA_CheckFifoParam+0xda>
 80020a6:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <DMA_CheckFifoParam+0x70>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020c3 	.word	0x080020c3
 80020b4:	080020bd 	.word	0x080020bd
 80020b8:	080020d5 	.word	0x080020d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e030      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d025      	beq.n	800211a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d2:	e022      	b.n	800211a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020dc:	d11f      	bne.n	800211e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020e2:	e01c      	b.n	800211e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d903      	bls.n	80020f2 <DMA_CheckFifoParam+0xb6>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d003      	beq.n	80020f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020f0:	e018      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
      break;
 80020f6:	e015      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00e      	beq.n	8002122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	e00b      	b.n	8002122 <DMA_CheckFifoParam+0xe6>
      break;
 800210a:	bf00      	nop
 800210c:	e00a      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 800210e:	bf00      	nop
 8002110:	e008      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e006      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 8002116:	bf00      	nop
 8002118:	e004      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e002      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;   
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
    }
  } 
  
  return status; 
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e159      	b.n	8002404 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 8148 	bne.w	80023fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d005      	beq.n	8002186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	2b02      	cmp	r3, #2
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d017      	beq.n	8002224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a2 	beq.w	80023fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_GPIO_Init+0x2e8>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a56      	ldr	r2, [pc, #344]	; (800241c <HAL_GPIO_Init+0x2e8>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_GPIO_Init+0x2e8>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a52      	ldr	r2, [pc, #328]	; (8002420 <HAL_GPIO_Init+0x2ec>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a49      	ldr	r2, [pc, #292]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x202>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_GPIO_Init+0x2f4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x1fe>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_GPIO_Init+0x2f8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x1fa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a46      	ldr	r2, [pc, #280]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x1f6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a45      	ldr	r2, [pc, #276]	; (8002434 <HAL_GPIO_Init+0x300>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x1f2>
 8002322:	2304      	movs	r3, #4
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x204>
 8002326:	2307      	movs	r3, #7
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x204>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x204>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x204>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x204>
 8002336:	2300      	movs	r3, #0
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002348:	4935      	ldr	r1, [pc, #212]	; (8002420 <HAL_GPIO_Init+0x2ec>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_GPIO_Init+0x304>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237a:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x304>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_GPIO_Init+0x304>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a4:	4a24      	ldr	r2, [pc, #144]	; (8002438 <HAL_GPIO_Init+0x304>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_GPIO_Init+0x304>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ce:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_GPIO_Init+0x304>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_GPIO_Init+0x304>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_GPIO_Init+0x304>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	f67f aea2 	bls.w	8002150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fe60 	bl	8001154 <HAL_GPIO_EXTI_Callback>
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e12b      	b.n	800270a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe feec 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002504:	f000 fd40 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a81      	ldr	r2, [pc, #516]	; (8002714 <HAL_I2C_Init+0x274>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d807      	bhi.n	8002524 <HAL_I2C_Init+0x84>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a80      	ldr	r2, [pc, #512]	; (8002718 <HAL_I2C_Init+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e006      	b.n	8002532 <HAL_I2C_Init+0x92>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a7d      	ldr	r2, [pc, #500]	; (800271c <HAL_I2C_Init+0x27c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a78      	ldr	r2, [pc, #480]	; (8002720 <HAL_I2C_Init+0x280>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_I2C_Init+0x274>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d802      	bhi.n	8002574 <HAL_I2C_Init+0xd4>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	e009      	b.n	8002588 <HAL_I2C_Init+0xe8>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a69      	ldr	r2, [pc, #420]	; (8002724 <HAL_I2C_Init+0x284>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800259a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	495c      	ldr	r1, [pc, #368]	; (8002714 <HAL_I2C_Init+0x274>)
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d819      	bhi.n	80025dc <HAL_I2C_Init+0x13c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e59      	subs	r1, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_I2C_Init+0x138>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e59      	subs	r1, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	e051      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025d8:	2304      	movs	r3, #4
 80025da:	e04f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_I2C_Init+0x168>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e012      	b.n	800262e <HAL_I2C_Init+0x18e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x196>
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_I2C_Init+0x1dc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <HAL_I2C_Init+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e58      	subs	r0, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	e00f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6911      	ldr	r1, [r2, #16]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e267      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d075      	beq.n	8002832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b85      	ldr	r3, [pc, #532]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275a:	2b08      	cmp	r3, #8
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b82      	ldr	r3, [pc, #520]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b7e      	ldr	r3, [pc, #504]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e242      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x74>
 800278e:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b70      	ldr	r3, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6f      	ldr	r2, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6c      	ldr	r2, [pc, #432]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 80027c0:	4b69      	ldr	r3, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a68      	ldr	r2, [pc, #416]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b66      	ldr	r3, [pc, #408]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a65      	ldr	r2, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f81a 	bl	8001818 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f816 	bl	8001818 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e207      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff f806 	bl	8001818 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f802 	bl	8001818 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1f3      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b44      	ldr	r3, [pc, #272]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c7      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4937      	ldr	r1, [pc, #220]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCC_OscConfig+0x244>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe ffbb 	bl	8001818 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe ffb7 	bl	8001818 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1a8      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4925      	ldr	r1, [pc, #148]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x244>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe ff9a 	bl	8001818 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe ff96 	bl	8001818 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e187      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d036      	beq.n	8002980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_RCC_OscConfig+0x248>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe ff7a 	bl	8001818 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe ff76 	bl	8001818 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e167      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_OscConfig+0x240>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x200>
 8002946:	e01b      	b.n	8002980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_OscConfig+0x248>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe ff63 	bl	8001818 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e00e      	b.n	8002974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe ff5f 	bl	8001818 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d907      	bls.n	8002974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e150      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
 8002968:	40023800 	.word	0x40023800
 800296c:	42470000 	.word	0x42470000
 8002970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ea      	bne.n	8002956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8097 	beq.w	8002abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a7c      	ldr	r2, [pc, #496]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b7a      	ldr	r3, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b77      	ldr	r3, [pc, #476]	; (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ca:	4b74      	ldr	r3, [pc, #464]	; (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a73      	ldr	r2, [pc, #460]	; (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe ff1f 	bl	8001818 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe ff1b 	bl	8001818 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e10c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_OscConfig+0x474>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2ea>
 8002a04:	4b64      	ldr	r3, [pc, #400]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4a63      	ldr	r2, [pc, #396]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a10:	e01c      	b.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x30c>
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
 8002a26:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a5b      	ldr	r2, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	e00b      	b.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a34:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	4a57      	ldr	r2, [pc, #348]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a40:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fee0 	bl	8001818 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fedc 	bl	8001818 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0cb      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ee      	beq.n	8002a5c <HAL_RCC_OscConfig+0x334>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe feca 	bl	8001818 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe fec6 	bl	8001818 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0b5      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4a38      	ldr	r2, [pc, #224]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a1 	beq.w	8002c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d05c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d141      	bne.n	8002b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fe9a 	bl	8001818 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fe96 	bl	8001818 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e087      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	491b      	ldr	r1, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fe6f 	bl	8001818 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fe6b 	bl	8001818 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e05c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x416>
 8002b5c:	e054      	b.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_RCC_OscConfig+0x478>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fe58 	bl	8001818 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fe54 	bl	8001818 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e045      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x470>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x444>
 8002b8a:	e03d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e038      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x4ec>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d028      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d121      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d90c      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d044      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e067      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4934      	ldr	r1, [pc, #208]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fd86 	bl	8001818 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fd82 	bl	8001818 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e04f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d20c      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fce6 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08008140 	.word	0x08008140
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	2000000c 	.word	0x2000000c

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de8:	b090      	sub	sp, #64	; 0x40
 8002dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	2300      	movs	r3, #0
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df4:	2300      	movs	r3, #0
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x40>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f200 80a1 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e16:	e09b      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e1c:	e09b      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e22:	e098      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	627a      	str	r2, [r7, #36]	; 0x24
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e50:	fb03 f201 	mul.w	r2, r3, r1
 8002e54:	2300      	movs	r3, #0
 8002e56:	fb00 f303 	mul.w	r3, r0, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a43      	ldr	r2, [pc, #268]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e64:	460a      	mov	r2, r1
 8002e66:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6a:	4413      	add	r3, r2
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	2200      	movs	r2, #0
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	61fa      	str	r2, [r7, #28]
 8002e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e7e:	f7fd f9ff 	bl	8000280 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4613      	mov	r3, r2
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e8a:	e053      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	617a      	str	r2, [r7, #20]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e9e:	f04f 0b00 	mov.w	fp, #0
 8002ea2:	4652      	mov	r2, sl
 8002ea4:	465b      	mov	r3, fp
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	ebb2 080a 	subs.w	r8, r2, sl
 8002ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8002eda:	eb63 0509 	sbc.w	r5, r3, r9
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	00eb      	lsls	r3, r5, #3
 8002ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eec:	00e2      	lsls	r2, r4, #3
 8002eee:	4614      	mov	r4, r2
 8002ef0:	461d      	mov	r5, r3
 8002ef2:	eb14 030a 	adds.w	r3, r4, sl
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	eb45 030b 	adc.w	r3, r5, fp
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	028b      	lsls	r3, r1, #10
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f14:	4621      	mov	r1, r4
 8002f16:	028a      	lsls	r2, r1, #10
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	60fa      	str	r2, [r7, #12]
 8002f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f28:	f7fd f9aa 	bl	8000280 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3740      	adds	r7, #64	; 0x40
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	017d7840 	.word	0x017d7840

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000008 	.word	0x20000008

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08008150 	.word	0x08008150

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0b5b      	lsrs	r3, r3, #13
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08008150 	.word	0x08008150

08002fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07b      	b.n	80030e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffa:	d009      	beq.n	8003010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
 8003002:	e005      	b.n	8003010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe f982 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	ea42 0103 	orr.w	r1, r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	f003 0104 	and.w	r1, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0210 	and.w	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b088      	sub	sp, #32
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_SPI_Transmit+0x22>
 8003108:	2302      	movs	r3, #2
 800310a:	e126      	b.n	800335a <HAL_SPI_Transmit+0x270>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003114:	f7fe fb80 	bl	8001818 <HAL_GetTick>
 8003118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800312a:	2302      	movs	r3, #2
 800312c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800312e:	e10b      	b.n	8003348 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_SPI_Transmit+0x52>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003140:	e102      	b.n	8003348 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	d10f      	bne.n	80031aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d007      	beq.n	80031c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d0:	d14b      	bne.n	800326a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Transmit+0xf6>
 80031da:	8afb      	ldrh	r3, [r7, #22]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d13e      	bne.n	800325e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003204:	e02b      	b.n	800325e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d112      	bne.n	800323a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	1c9a      	adds	r2, r3, #2
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	86da      	strh	r2, [r3, #54]	; 0x36
 8003238:	e011      	b.n	800325e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323a:	f7fe faed 	bl	8001818 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d803      	bhi.n	8003252 <HAL_SPI_Transmit+0x168>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d102      	bne.n	8003258 <HAL_SPI_Transmit+0x16e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800325c:	e074      	b.n	8003348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ce      	bne.n	8003206 <HAL_SPI_Transmit+0x11c>
 8003268:	e04c      	b.n	8003304 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0x18e>
 8003272:	8afb      	ldrh	r3, [r7, #22]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d140      	bne.n	80032fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800329e:	e02c      	b.n	80032fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d113      	bne.n	80032d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80032d4:	e011      	b.n	80032fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fe fa9f 	bl	8001818 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Transmit+0x204>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Transmit+0x20a>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032f8:	e026      	b.n	8003348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1cd      	bne.n	80032a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f8b3 	bl	8003474 <SPI_EndRxTxTransaction>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e000      	b.n	8003348 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003358:	7ffb      	ldrb	r3, [r7, #31]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003374:	f7fe fa50 	bl	8001818 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	4413      	add	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003384:	f7fe fa48 	bl	8001818 <HAL_GetTick>
 8003388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	0d1b      	lsrs	r3, r3, #20
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339a:	e054      	b.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d050      	beq.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a4:	f7fe fa38 	bl	8001818 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d902      	bls.n	80033ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d13d      	bne.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d2:	d111      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	d004      	beq.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d107      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d10f      	bne.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e017      	b.n	8003466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3b01      	subs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d19b      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000008 	.word	0x20000008

08003474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <SPI_EndRxTxTransaction+0x7c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <SPI_EndRxTxTransaction+0x80>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0d5b      	lsrs	r3, r3, #21
 800348c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349e:	d112      	bne.n	80034c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2200      	movs	r2, #0
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff ff5a 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e00f      	b.n	80034e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d0f2      	beq.n	80034c6 <SPI_EndRxTxTransaction+0x52>
 80034e0:	e000      	b.n	80034e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80034e2:	bf00      	nop
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000008 	.word	0x20000008
 80034f4:	165e9f81 	.word	0x165e9f81

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd ff50 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fa2e 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d122      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d11b      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0202 	mvn.w	r2, #2
 80035c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9bf 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 80035de:	e005      	b.n	80035ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f9b1 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9c2 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d122      	bne.n	8003646 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d11b      	bne.n	8003646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0204 	mvn.w	r2, #4
 8003616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f995 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 8003632:	e005      	b.n	8003640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f987 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f998 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d122      	bne.n	800369a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11b      	bne.n	800369a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0208 	mvn.w	r2, #8
 800366a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f96b 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 8003686:	e005      	b.n	8003694 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f95d 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f96e 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d122      	bne.n	80036ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d11b      	bne.n	80036ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0210 	mvn.w	r2, #16
 80036be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2208      	movs	r2, #8
 80036c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f941 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 80036da:	e005      	b.n	80036e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f933 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f944 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10e      	bne.n	800371a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f06f 0201 	mvn.w	r2, #1
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f90d 	bl	8003934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d10e      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d107      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa4d 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d10e      	bne.n	8003772 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d107      	bne.n	8003772 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f909 	bl	8003984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d10e      	bne.n	800379e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d107      	bne.n	800379e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0220 	mvn.w	r2, #32
 8003796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fa17 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_ConfigClockSource+0x1c>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0b4      	b.n	800392c <HAL_TIM_ConfigClockSource+0x186>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fa:	d03e      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xd4>
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003800:	f200 8087 	bhi.w	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	f000 8086 	beq.w	8003918 <HAL_TIM_ConfigClockSource+0x172>
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d87f      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 8003812:	2b70      	cmp	r3, #112	; 0x70
 8003814:	d01a      	beq.n	800384c <HAL_TIM_ConfigClockSource+0xa6>
 8003816:	2b70      	cmp	r3, #112	; 0x70
 8003818:	d87b      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 800381a:	2b60      	cmp	r3, #96	; 0x60
 800381c:	d050      	beq.n	80038c0 <HAL_TIM_ConfigClockSource+0x11a>
 800381e:	2b60      	cmp	r3, #96	; 0x60
 8003820:	d877      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 8003822:	2b50      	cmp	r3, #80	; 0x50
 8003824:	d03c      	beq.n	80038a0 <HAL_TIM_ConfigClockSource+0xfa>
 8003826:	2b50      	cmp	r3, #80	; 0x50
 8003828:	d873      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	d058      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0x13a>
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d86f      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 8003832:	2b30      	cmp	r3, #48	; 0x30
 8003834:	d064      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0x15a>
 8003836:	2b30      	cmp	r3, #48	; 0x30
 8003838:	d86b      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 800383a:	2b20      	cmp	r3, #32
 800383c:	d060      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0x15a>
 800383e:	2b20      	cmp	r3, #32
 8003840:	d867      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d05c      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0x15a>
 8003846:	2b10      	cmp	r3, #16
 8003848:	d05a      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0x15a>
 800384a:	e062      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6899      	ldr	r1, [r3, #8]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f000 f996 	bl	8003b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
      break;
 8003878:	e04f      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f000 f97f 	bl	8003b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389c:	609a      	str	r2, [r3, #8]
      break;
 800389e:	e03c      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	461a      	mov	r2, r3
 80038ae:	f000 f8f3 	bl	8003a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2150      	movs	r1, #80	; 0x50
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f94c 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80038be:	e02c      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	461a      	mov	r2, r3
 80038ce:	f000 f912 	bl	8003af6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2160      	movs	r1, #96	; 0x60
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f93c 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80038de:	e01c      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	461a      	mov	r2, r3
 80038ee:	f000 f8d3 	bl	8003a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2140      	movs	r1, #64	; 0x40
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f92c 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80038fe:	e00c      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 f923 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 8003910:	e003      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      break;
 8003916:	e000      	b.n	800391a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003918:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <TIM_Base_SetConfig+0xe4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a31      	ldr	r2, [pc, #196]	; (8003a80 <TIM_Base_SetConfig+0xe8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <TIM_Base_SetConfig+0xec>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <TIM_Base_SetConfig+0xf0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <TIM_Base_SetConfig+0xe4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01b      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d017      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <TIM_Base_SetConfig+0xe8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <TIM_Base_SetConfig+0xec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00f      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <TIM_Base_SetConfig+0xf0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <TIM_Base_SetConfig+0xf4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <TIM_Base_SetConfig+0xf8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0x8a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <TIM_Base_SetConfig+0xfc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <TIM_Base_SetConfig+0xe4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0201 	bic.w	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 030a 	bic.w	r3, r3, #10
 8003ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0210 	bic.w	r2, r3, #16
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	031b      	lsls	r3, r3, #12
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f043 0307 	orr.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e03f      	b.n	8003c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fbfa 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fba5 	bl	8004388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b08a      	sub	sp, #40	; 0x28
 8003c92:	af02      	add	r7, sp, #8
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d17c      	bne.n	8003da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_UART_Transmit+0x2c>
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e075      	b.n	8003daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x3e>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e06e      	b.n	8003daa <HAL_UART_Transmit+0x11c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2221      	movs	r2, #33	; 0x21
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce2:	f7fd fd99 	bl	8001818 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d108      	bne.n	8003d10 <HAL_UART_Transmit+0x82>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e003      	b.n	8003d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d20:	e02a      	b.n	8003d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f992 	bl	8004056 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e036      	b.n	8003daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3302      	adds	r3, #2
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	e007      	b.n	8003d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1cf      	bne.n	8003d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f962 	bl	8004056 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e006      	b.n	8003daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d11d      	bne.n	8003e08 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Receive_DMA+0x26>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e016      	b.n	8003e0a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Receive_DMA+0x38>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00f      	b.n	8003e0a <HAL_UART_Receive_DMA+0x58>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f998 	bl	8004134 <UART_Start_Receive_DMA>
 8003e04:	4603      	mov	r3, r0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b09c      	sub	sp, #112	; 0x70
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d172      	bne.n	8003f68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	2200      	movs	r2, #0
 8003e86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eaa:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003edc:	647a      	str	r2, [r7, #68]	; 0x44
 8003ede:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	623b      	str	r3, [r7, #32]
   return(result);
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f06:	663b      	str	r3, [r7, #96]	; 0x60
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f10:	633a      	str	r2, [r7, #48]	; 0x30
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d119      	bne.n	8003f68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f54:	61fa      	str	r2, [r7, #28]
 8003f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	617b      	str	r3, [r7, #20]
   return(result);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f74:	4619      	mov	r1, r3
 8003f76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f78:	f7ff ff69 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f7c:	e002      	b.n	8003f84 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003f7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f80:	f7ff ff47 	bl	8003e12 <HAL_UART_RxCpltCallback>
}
 8003f84:	bf00      	nop
 8003f86:	3770      	adds	r7, #112	; 0x70
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d108      	bne.n	8003fb4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4619      	mov	r1, r3
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff ff4e 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fb2:	e002      	b.n	8003fba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ff36 	bl	8003e26 <HAL_UART_RxHalfCpltCallback>
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b21      	cmp	r3, #33	; 0x21
 8003ff4:	d108      	bne.n	8004008 <UART_DMAError+0x46>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004002:	68b8      	ldr	r0, [r7, #8]
 8004004:	f000 f934 	bl	8004270 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b22      	cmp	r3, #34	; 0x22
 8004028:	d108      	bne.n	800403c <UART_DMAError+0x7a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f000 f942 	bl	80042c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004048:	68b8      	ldr	r0, [r7, #8]
 800404a:	f7ff fef6 	bl	8003e3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b090      	sub	sp, #64	; 0x40
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004066:	e050      	b.n	800410a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d04c      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x30>
 8004076:	f7fd fbcf 	bl	8001818 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004082:	429a      	cmp	r2, r3
 8004084:	d241      	bcs.n	800410a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a6:	637a      	str	r2, [r7, #52]	; 0x34
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040da:	623a      	str	r2, [r7, #32]
 80040dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e00f      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	429a      	cmp	r2, r3
 8004126:	d09f      	beq.n	8004068 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3740      	adds	r7, #64	; 0x40
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b098      	sub	sp, #96	; 0x60
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2222      	movs	r2, #34	; 0x22
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	4a40      	ldr	r2, [pc, #256]	; (8004264 <UART_Start_Receive_DMA+0x130>)
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <UART_Start_Receive_DMA+0x134>)
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	4a3e      	ldr	r2, [pc, #248]	; (800426c <UART_Start_Receive_DMA+0x138>)
 8004172:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2200      	movs	r2, #0
 800417a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800417c:	f107 0308 	add.w	r3, r7, #8
 8004180:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	f7fd fd0c 	bl	8001bb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d019      	beq.n	80041f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80041e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80041ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e5      	bne.n	80041be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3314      	adds	r3, #20
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	657b      	str	r3, [r7, #84]	; 0x54
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004212:	63ba      	str	r2, [r7, #56]	; 0x38
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e5      	bne.n	80041f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	617b      	str	r3, [r7, #20]
   return(result);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423c:	653b      	str	r3, [r7, #80]	; 0x50
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004246:	627a      	str	r2, [r7, #36]	; 0x24
 8004248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6a39      	ldr	r1, [r7, #32]
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	61fb      	str	r3, [r7, #28]
   return(result);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3760      	adds	r7, #96	; 0x60
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	08003e67 	.word	0x08003e67
 8004268:	08003f8d 	.word	0x08003f8d
 800426c:	08003fc3 	.word	0x08003fc3

08004270 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	60bb      	str	r3, [r7, #8]
   return(result);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	61ba      	str	r2, [r7, #24]
 800429a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6979      	ldr	r1, [r7, #20]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	613b      	str	r3, [r7, #16]
   return(result);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80042b4:	bf00      	nop
 80042b6:	3724      	adds	r7, #36	; 0x24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b095      	sub	sp, #84	; 0x54
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042e8:	643a      	str	r2, [r7, #64]	; 0x40
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	61fb      	str	r3, [r7, #28]
   return(result);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	2b01      	cmp	r3, #1
 8004336:	d119      	bne.n	800436c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	60bb      	str	r3, [r7, #8]
   return(result);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	647b      	str	r3, [r7, #68]	; 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004358:	61ba      	str	r2, [r7, #24]
 800435a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	613b      	str	r3, [r7, #16]
   return(result);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800437a:	bf00      	nop
 800437c:	3754      	adds	r7, #84	; 0x54
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800438c:	b0c0      	sub	sp, #256	; 0x100
 800438e:	af00      	add	r7, sp, #0
 8004390:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	68d9      	ldr	r1, [r3, #12]
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	ea40 0301 	orr.w	r3, r0, r1
 80043b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	431a      	orrs	r2, r3
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e0:	f021 010c 	bic.w	r1, r1, #12
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ee:	430b      	orrs	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	6999      	ldr	r1, [r3, #24]
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	ea40 0301 	orr.w	r3, r0, r1
 800440e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b8f      	ldr	r3, [pc, #572]	; (8004654 <UART_SetConfig+0x2cc>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d005      	beq.n	8004428 <UART_SetConfig+0xa0>
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b8d      	ldr	r3, [pc, #564]	; (8004658 <UART_SetConfig+0x2d0>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d104      	bne.n	8004432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004428:	f7fe fdc2 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 800442c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004430:	e003      	b.n	800443a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004432:	f7fe fda9 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8004436:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004444:	f040 810c 	bne.w	8004660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004452:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800445a:	4622      	mov	r2, r4
 800445c:	462b      	mov	r3, r5
 800445e:	1891      	adds	r1, r2, r2
 8004460:	65b9      	str	r1, [r7, #88]	; 0x58
 8004462:	415b      	adcs	r3, r3
 8004464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800446a:	4621      	mov	r1, r4
 800446c:	eb12 0801 	adds.w	r8, r2, r1
 8004470:	4629      	mov	r1, r5
 8004472:	eb43 0901 	adc.w	r9, r3, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	4623      	mov	r3, r4
 8004490:	eb18 0303 	adds.w	r3, r8, r3
 8004494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004498:	462b      	mov	r3, r5
 800449a:	eb49 0303 	adc.w	r3, r9, r3
 800449e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044b6:	460b      	mov	r3, r1
 80044b8:	18db      	adds	r3, r3, r3
 80044ba:	653b      	str	r3, [r7, #80]	; 0x50
 80044bc:	4613      	mov	r3, r2
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	657b      	str	r3, [r7, #84]	; 0x54
 80044c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044cc:	f7fb fed8 	bl	8000280 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4b61      	ldr	r3, [pc, #388]	; (800465c <UART_SetConfig+0x2d4>)
 80044d6:	fba3 2302 	umull	r2, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	011c      	lsls	r4, r3, #4
 80044de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044f8:	415b      	adcs	r3, r3
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004500:	4641      	mov	r1, r8
 8004502:	eb12 0a01 	adds.w	sl, r2, r1
 8004506:	4649      	mov	r1, r9
 8004508:	eb43 0b01 	adc.w	fp, r3, r1
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800451c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004520:	4692      	mov	sl, r2
 8004522:	469b      	mov	fp, r3
 8004524:	4643      	mov	r3, r8
 8004526:	eb1a 0303 	adds.w	r3, sl, r3
 800452a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800452e:	464b      	mov	r3, r9
 8004530:	eb4b 0303 	adc.w	r3, fp, r3
 8004534:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004544:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800454c:	460b      	mov	r3, r1
 800454e:	18db      	adds	r3, r3, r3
 8004550:	643b      	str	r3, [r7, #64]	; 0x40
 8004552:	4613      	mov	r3, r2
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
 800455a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800455e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004562:	f7fb fe8d 	bl	8000280 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4611      	mov	r1, r2
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <UART_SetConfig+0x2d4>)
 800456e:	fba3 2301 	umull	r2, r3, r3, r1
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2264      	movs	r2, #100	; 0x64
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	1acb      	subs	r3, r1, r3
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <UART_SetConfig+0x2d4>)
 8004584:	fba3 2302 	umull	r2, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004590:	441c      	add	r4, r3
 8004592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800459c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	1891      	adds	r1, r2, r2
 80045aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80045ac:	415b      	adcs	r3, r3
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045b4:	4641      	mov	r1, r8
 80045b6:	1851      	adds	r1, r2, r1
 80045b8:	6339      	str	r1, [r7, #48]	; 0x30
 80045ba:	4649      	mov	r1, r9
 80045bc:	414b      	adcs	r3, r1
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045cc:	4659      	mov	r1, fp
 80045ce:	00cb      	lsls	r3, r1, #3
 80045d0:	4651      	mov	r1, sl
 80045d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d6:	4651      	mov	r1, sl
 80045d8:	00ca      	lsls	r2, r1, #3
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	4642      	mov	r2, r8
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e8:	464b      	mov	r3, r9
 80045ea:	460a      	mov	r2, r1
 80045ec:	eb42 0303 	adc.w	r3, r2, r3
 80045f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004600:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004608:	460b      	mov	r3, r1
 800460a:	18db      	adds	r3, r3, r3
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
 800460e:	4613      	mov	r3, r2
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800461a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800461e:	f7fb fe2f 	bl	8000280 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <UART_SetConfig+0x2d4>)
 8004628:	fba3 1302 	umull	r1, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	2164      	movs	r1, #100	; 0x64
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	3332      	adds	r3, #50	; 0x32
 800463a:	4a08      	ldr	r2, [pc, #32]	; (800465c <UART_SetConfig+0x2d4>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	f003 0207 	and.w	r2, r3, #7
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4422      	add	r2, r4
 800464e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004650:	e105      	b.n	800485e <UART_SetConfig+0x4d6>
 8004652:	bf00      	nop
 8004654:	40011000 	.word	0x40011000
 8004658:	40011400 	.word	0x40011400
 800465c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800466a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800466e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004672:	4642      	mov	r2, r8
 8004674:	464b      	mov	r3, r9
 8004676:	1891      	adds	r1, r2, r2
 8004678:	6239      	str	r1, [r7, #32]
 800467a:	415b      	adcs	r3, r3
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004682:	4641      	mov	r1, r8
 8004684:	1854      	adds	r4, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb43 0501 	adc.w	r5, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	00eb      	lsls	r3, r5, #3
 8004696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469a:	00e2      	lsls	r2, r4, #3
 800469c:	4614      	mov	r4, r2
 800469e:	461d      	mov	r5, r3
 80046a0:	4643      	mov	r3, r8
 80046a2:	18e3      	adds	r3, r4, r3
 80046a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046a8:	464b      	mov	r3, r9
 80046aa:	eb45 0303 	adc.w	r3, r5, r3
 80046ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ce:	4629      	mov	r1, r5
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	4621      	mov	r1, r4
 80046d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d8:	4621      	mov	r1, r4
 80046da:	008a      	lsls	r2, r1, #2
 80046dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046e0:	f7fb fdce 	bl	8000280 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b60      	ldr	r3, [pc, #384]	; (800486c <UART_SetConfig+0x4e4>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	011c      	lsls	r4, r3, #4
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	61b9      	str	r1, [r7, #24]
 800470c:	415b      	adcs	r3, r3
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004714:	4641      	mov	r1, r8
 8004716:	1851      	adds	r1, r2, r1
 8004718:	6139      	str	r1, [r7, #16]
 800471a:	4649      	mov	r1, r9
 800471c:	414b      	adcs	r3, r1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800472c:	4659      	mov	r1, fp
 800472e:	00cb      	lsls	r3, r1, #3
 8004730:	4651      	mov	r1, sl
 8004732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004736:	4651      	mov	r1, sl
 8004738:	00ca      	lsls	r2, r1, #3
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	4603      	mov	r3, r0
 8004740:	4642      	mov	r2, r8
 8004742:	189b      	adds	r3, r3, r2
 8004744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004748:	464b      	mov	r3, r9
 800474a:	460a      	mov	r2, r1
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	67bb      	str	r3, [r7, #120]	; 0x78
 800475e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800476c:	4649      	mov	r1, r9
 800476e:	008b      	lsls	r3, r1, #2
 8004770:	4641      	mov	r1, r8
 8004772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004776:	4641      	mov	r1, r8
 8004778:	008a      	lsls	r2, r1, #2
 800477a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800477e:	f7fb fd7f 	bl	8000280 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4b39      	ldr	r3, [pc, #228]	; (800486c <UART_SetConfig+0x4e4>)
 8004788:	fba3 1302 	umull	r1, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	2164      	movs	r1, #100	; 0x64
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	3332      	adds	r3, #50	; 0x32
 800479a:	4a34      	ldr	r2, [pc, #208]	; (800486c <UART_SetConfig+0x4e4>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a6:	441c      	add	r4, r3
 80047a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ac:	2200      	movs	r2, #0
 80047ae:	673b      	str	r3, [r7, #112]	; 0x70
 80047b0:	677a      	str	r2, [r7, #116]	; 0x74
 80047b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047b6:	4642      	mov	r2, r8
 80047b8:	464b      	mov	r3, r9
 80047ba:	1891      	adds	r1, r2, r2
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	415b      	adcs	r3, r3
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c6:	4641      	mov	r1, r8
 80047c8:	1851      	adds	r1, r2, r1
 80047ca:	6039      	str	r1, [r7, #0]
 80047cc:	4649      	mov	r1, r9
 80047ce:	414b      	adcs	r3, r1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047de:	4659      	mov	r1, fp
 80047e0:	00cb      	lsls	r3, r1, #3
 80047e2:	4651      	mov	r1, sl
 80047e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e8:	4651      	mov	r1, sl
 80047ea:	00ca      	lsls	r2, r1, #3
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	4603      	mov	r3, r0
 80047f2:	4642      	mov	r2, r8
 80047f4:	189b      	adds	r3, r3, r2
 80047f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	663b      	str	r3, [r7, #96]	; 0x60
 800480c:	667a      	str	r2, [r7, #100]	; 0x64
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800481a:	4649      	mov	r1, r9
 800481c:	008b      	lsls	r3, r1, #2
 800481e:	4641      	mov	r1, r8
 8004820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004824:	4641      	mov	r1, r8
 8004826:	008a      	lsls	r2, r1, #2
 8004828:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800482c:	f7fb fd28 	bl	8000280 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <UART_SetConfig+0x4e4>)
 8004836:	fba3 1302 	umull	r1, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2164      	movs	r1, #100	; 0x64
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	; 0x32
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <UART_SetConfig+0x4e4>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4422      	add	r2, r4
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	bf00      	nop
 8004860:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	51eb851f 	.word	0x51eb851f

08004870 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004876:	f3ef 8305 	mrs	r3, IPSR
 800487a:	603b      	str	r3, [r7, #0]
  return(result);
 800487c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004882:	f06f 0305 	mvn.w	r3, #5
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	e00c      	b.n	80048a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <osKernelInitialize+0x44>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d105      	bne.n	800489e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <osKernelInitialize+0x44>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004898:	2300      	movs	r3, #0
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	e002      	b.n	80048a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048a4:	687b      	ldr	r3, [r7, #4]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000380 	.word	0x20000380

080048b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08e      	sub	sp, #56	; 0x38
 80048bc:	af04      	add	r7, sp, #16
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c8:	f3ef 8305 	mrs	r3, IPSR
 80048cc:	617b      	str	r3, [r7, #20]
  return(result);
 80048ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17e      	bne.n	80049d2 <osThreadNew+0x11a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d07b      	beq.n	80049d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048de:	2318      	movs	r3, #24
 80048e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d045      	beq.n	800497e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <osThreadNew+0x48>
        name = attr->name;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <osThreadNew+0x6e>
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b38      	cmp	r3, #56	; 0x38
 8004918:	d805      	bhi.n	8004926 <osThreadNew+0x6e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <osThreadNew+0x72>
        return (NULL);
 8004926:	2300      	movs	r3, #0
 8004928:	e054      	b.n	80049d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <osThreadNew+0xa8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2bbb      	cmp	r3, #187	; 0xbb
 8004948:	d90a      	bls.n	8004960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <osThreadNew+0xa8>
        mem = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e010      	b.n	8004982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <osThreadNew+0xca>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <osThreadNew+0xca>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <osThreadNew+0xca>
          mem = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e001      	b.n	8004982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d110      	bne.n	80049aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 ff24 	bl	80057ec <xTaskCreateStatic>
 80049a4:	4603      	mov	r3, r0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e013      	b.n	80049d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	f107 0310 	add.w	r3, r7, #16
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 ff6f 	bl	80058a6 <xTaskCreate>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <osThreadNew+0x11a>
            hTask = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049d2:	693b      	ldr	r3, [r7, #16]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e4:	f3ef 8305 	mrs	r3, IPSR
 80049e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <osDelay+0x1c>
    stat = osErrorISR;
 80049f0:	f06f 0305 	mvn.w	r3, #5
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e007      	b.n	8004a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 f8aa 	bl	8005b5c <vTaskDelay>
    }
  }

  return (stat);
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b088      	sub	sp, #32
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1e:	f3ef 8305 	mrs	r3, IPSR
 8004a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d174      	bne.n	8004b14 <osMutexNew+0x102>
    if (attr != NULL) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e001      	b.n	8004a3c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <osMutexNew+0x3a>
      rmtx = 1U;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e001      	b.n	8004a50 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d15c      	bne.n	8004b14 <osMutexNew+0x102>
      mem = -1;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <osMutexNew+0x6a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b4f      	cmp	r3, #79	; 0x4f
 8004a74:	d902      	bls.n	8004a7c <osMutexNew+0x6a>
          mem = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e00c      	b.n	8004a96 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <osMutexNew+0x84>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <osMutexNew+0x84>
            mem = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e001      	b.n	8004a96 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d112      	bne.n	8004ac2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	2004      	movs	r0, #4
 8004aaa:	f000 fae4 	bl	8005076 <xQueueCreateMutexStatic>
 8004aae:	61f8      	str	r0, [r7, #28]
 8004ab0:	e016      	b.n	8004ae0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f000 fadc 	bl	8005076 <xQueueCreateMutexStatic>
 8004abe:	61f8      	str	r0, [r7, #28]
 8004ac0:	e00e      	b.n	8004ae0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004ace:	2004      	movs	r0, #4
 8004ad0:	f000 fab9 	bl	8005046 <xQueueCreateMutex>
 8004ad4:	61f8      	str	r0, [r7, #28]
 8004ad6:	e003      	b.n	8004ae0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f000 fab4 	bl	8005046 <xQueueCreateMutex>
 8004ade:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00c      	beq.n	8004b00 <osMutexNew+0xee>
        if (attr != NULL) {
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <osMutexNew+0xe2>
          name = attr->name;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e001      	b.n	8004af8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	69f8      	ldr	r0, [r7, #28]
 8004afc:	f000 fe4c 	bl	8005798 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <osMutexNew+0x102>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004b14:	69fb      	ldr	r3, [r7, #28]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3c:	f3ef 8305 	mrs	r3, IPSR
 8004b40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b42:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004b48:	f06f 0305 	mvn.w	r3, #5
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e02c      	b.n	8004baa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004b56:	f06f 0303 	mvn.w	r3, #3
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e025      	b.n	8004baa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d011      	beq.n	8004b88 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	6938      	ldr	r0, [r7, #16]
 8004b68:	f000 fad4 	bl	8005114 <xQueueTakeMutexRecursive>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d01b      	beq.n	8004baa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004b78:	f06f 0301 	mvn.w	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e014      	b.n	8004baa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b80:	f06f 0302 	mvn.w	r3, #2
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e010      	b.n	8004baa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	6938      	ldr	r0, [r7, #16]
 8004b8c:	f000 fbf6 	bl	800537c <xQueueSemaphoreTake>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d009      	beq.n	8004baa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004b9c:	f06f 0301 	mvn.w	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e002      	b.n	8004baa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004ba4:	f06f 0302 	mvn.w	r3, #2
 8004ba8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004baa:	697b      	ldr	r3, [r7, #20]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd0:	f3ef 8305 	mrs	r3, IPSR
 8004bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bd6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004bdc:	f06f 0305 	mvn.w	r3, #5
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e01f      	b.n	8004c24 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004bea:	f06f 0303 	mvn.w	r3, #3
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e018      	b.n	8004c24 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d009      	beq.n	8004c0c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004bf8:	6938      	ldr	r0, [r7, #16]
 8004bfa:	f000 fa57 	bl	80050ac <xQueueGiveMutexRecursive>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d00f      	beq.n	8004c24 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004c04:	f06f 0302 	mvn.w	r3, #2
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e00b      	b.n	8004c24 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2100      	movs	r1, #0
 8004c12:	6938      	ldr	r0, [r7, #16]
 8004c14:	f000 fab4 	bl	8005180 <xQueueGenericSend>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d002      	beq.n	8004c24 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004c1e:	f06f 0302 	mvn.w	r3, #2
 8004c22:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004c24:	697b      	ldr	r3, [r7, #20]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f103 0208 	add.w	r2, r3, #8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f103 0208 	add.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f103 0208 	add.w	r2, r3, #8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d103      	bne.n	8004cf0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e00c      	b.n	8004d0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e002      	b.n	8004cfe <vListInsert+0x2e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d2f6      	bcs.n	8004cf8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6892      	ldr	r2, [r2, #8]
 8004d58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6852      	ldr	r2, [r2, #4]
 8004d62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d103      	bne.n	8004d76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1e5a      	subs	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dc2:	f001 fc99 	bl	80066f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	3b01      	subs	r3, #1
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	22ff      	movs	r2, #255	; 0xff
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d114      	bne.n	8004e42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01a      	beq.n	8004e56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3310      	adds	r3, #16
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 f8bb 	bl	8005fa0 <xTaskRemoveFromEventList>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <xQueueGenericReset+0xcc>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	e009      	b.n	8004e56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3310      	adds	r3, #16
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fef1 	bl	8004c2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3324      	adds	r3, #36	; 0x24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff feec 	bl	8004c2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e56:	f001 fc7f 	bl	8006758 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e5a:	2301      	movs	r3, #1
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	e000ed04 	.word	0xe000ed04

08004e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	; 0x38
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <xQueueGenericCreateStatic+0x52>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <xQueueGenericCreateStatic+0x56>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <xQueueGenericCreateStatic+0x58>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	623b      	str	r3, [r7, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <xQueueGenericCreateStatic+0x7e>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <xQueueGenericCreateStatic+0x82>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueGenericCreateStatic+0x84>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61fb      	str	r3, [r7, #28]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f06:	2350      	movs	r3, #80	; 0x50
 8004f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d00a      	beq.n	8004f26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	61bb      	str	r3, [r7, #24]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f83f 	bl	8004fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3730      	adds	r7, #48	; 0x30
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	613b      	str	r3, [r7, #16]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3350      	adds	r3, #80	; 0x50
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fc63 	bl	800685c <pvPortMalloc>
 8004f96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d011      	beq.n	8004fc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3350      	adds	r3, #80	; 0x50
 8004fa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb0:	79fa      	ldrb	r2, [r7, #7]
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f805 	bl	8004fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	69b8      	ldr	r0, [r7, #24]
 8004ffe:	f7ff fecb 	bl	8004d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005032:	2300      	movs	r3, #0
 8005034:	2200      	movs	r2, #0
 8005036:	2100      	movs	r1, #0
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8a1 	bl	8005180 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	461a      	mov	r2, r3
 800505c:	6939      	ldr	r1, [r7, #16]
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7ff ff7a 	bl	8004f58 <xQueueGenericCreate>
 8005064:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ffd3 	bl	8005012 <prvInitialiseMutex>

		return xNewQueue;
 800506c:	68fb      	ldr	r3, [r7, #12]
	}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005076:	b580      	push	{r7, lr}
 8005078:	b088      	sub	sp, #32
 800507a:	af02      	add	r7, sp, #8
 800507c:	4603      	mov	r3, r0
 800507e:	6039      	str	r1, [r7, #0]
 8005080:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005082:	2301      	movs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2200      	movs	r2, #0
 8005092:	6939      	ldr	r1, [r7, #16]
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	f7ff fee7 	bl	8004e68 <xQueueGenericCreateStatic>
 800509a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ffb8 	bl	8005012 <prvInitialiseMutex>

		return xNewQueue;
 80050a2:	68fb      	ldr	r3, [r7, #12]
	}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	689c      	ldr	r4, [r3, #8]
 80050d8:	f001 f8aa 	bl	8006230 <xTaskGetCurrentTaskHandle>
 80050dc:	4603      	mov	r3, r0
 80050de:	429c      	cmp	r4, r3
 80050e0:	d111      	bne.n	8005106 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	1e5a      	subs	r2, r3, #1
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80050f4:	2300      	movs	r3, #0
 80050f6:	2200      	movs	r2, #0
 80050f8:	2100      	movs	r1, #0
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f000 f840 	bl	8005180 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e001      	b.n	800510a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800510a:	697b      	ldr	r3, [r7, #20]
	}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd90      	pop	{r4, r7, pc}

08005114 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60fb      	str	r3, [r7, #12]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	689c      	ldr	r4, [r3, #8]
 8005142:	f001 f875 	bl	8006230 <xTaskGetCurrentTaskHandle>
 8005146:	4603      	mov	r3, r0
 8005148:	429c      	cmp	r4, r3
 800514a:	d107      	bne.n	800515c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005156:	2301      	movs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e00c      	b.n	8005176 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	6938      	ldr	r0, [r7, #16]
 8005160:	f000 f90c 	bl	800537c <xQueueSemaphoreTake>
 8005164:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
	}
 8005178:	4618      	mov	r0, r3
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd90      	pop	{r4, r7, pc}

08005180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08e      	sub	sp, #56	; 0x38
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800518e:	2300      	movs	r3, #0
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueGenericSend+0x32>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d103      	bne.n	80051c0 <xQueueGenericSend+0x40>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <xQueueGenericSend+0x44>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <xQueueGenericSend+0x46>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <xQueueGenericSend+0x60>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d103      	bne.n	80051ee <xQueueGenericSend+0x6e>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <xQueueGenericSend+0x72>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueGenericSend+0x74>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xQueueGenericSend+0x8e>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	623b      	str	r3, [r7, #32]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800520e:	f001 f81f 	bl	8006250 <xTaskGetSchedulerState>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <xQueueGenericSend+0x9e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <xQueueGenericSend+0xa2>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueGenericSend+0xa4>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xQueueGenericSend+0xbe>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	61fb      	str	r3, [r7, #28]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800523e:	f001 fa5b 	bl	80066f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <xQueueGenericSend+0xd4>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d129      	bne.n	80052a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525a:	f000 f9b3 	bl	80055c4 <prvCopyDataToQueue>
 800525e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fe97 	bl	8005fa0 <xTaskRemoveFromEventList>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005278:	4b3f      	ldr	r3, [pc, #252]	; (8005378 <xQueueGenericSend+0x1f8>)
 800527a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	e00a      	b.n	80052a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005290:	4b39      	ldr	r3, [pc, #228]	; (8005378 <xQueueGenericSend+0x1f8>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052a0:	f001 fa5a 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e063      	b.n	8005370 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ae:	f001 fa53 	bl	8006758 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e05c      	b.n	8005370 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052bc:	f107 0314 	add.w	r3, r7, #20
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fed1 	bl	8006068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ca:	f001 fa45 	bl	8006758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ce:	f000 fc79 	bl	8005bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052d2:	f001 fa11 	bl	80066f8 <vPortEnterCritical>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d103      	bne.n	80052ec <xQueueGenericSend+0x16c>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d103      	bne.n	8005302 <xQueueGenericSend+0x182>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005302:	f001 fa29 	bl	8006758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005306:	1d3a      	adds	r2, r7, #4
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fec0 	bl	8006094 <xTaskCheckForTimeOut>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d124      	bne.n	8005364 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800531a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800531c:	f000 fa24 	bl	8005768 <prvIsQueueFull>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d018      	beq.n	8005358 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	3310      	adds	r3, #16
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fe12 	bl	8005f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005336:	f000 f9af 	bl	8005698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800533a:	f000 fc51 	bl	8005be0 <xTaskResumeAll>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af7c 	bne.w	800523e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <xQueueGenericSend+0x1f8>)
 8005348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	e772      	b.n	800523e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800535a:	f000 f99d 	bl	8005698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800535e:	f000 fc3f 	bl	8005be0 <xTaskResumeAll>
 8005362:	e76c      	b.n	800523e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005366:	f000 f997 	bl	8005698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800536a:	f000 fc39 	bl	8005be0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800536e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005370:	4618      	mov	r0, r3
 8005372:	3738      	adds	r7, #56	; 0x38
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	; 0x38
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005386:	2300      	movs	r3, #0
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	61fb      	str	r3, [r7, #28]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053cc:	f000 ff40 	bl	8006250 <xTaskGetSchedulerState>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <xQueueSemaphoreTake+0x60>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <xQueueSemaphoreTake+0x64>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <xQueueSemaphoreTake+0x66>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	61bb      	str	r3, [r7, #24]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053fc:	f001 f97c 	bl	80066f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d024      	beq.n	8005456 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	1e5a      	subs	r2, r3, #1
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800541c:	f001 f88e 	bl	800653c <pvTaskIncrementMutexHeldCount>
 8005420:	4602      	mov	r2, r0
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00f      	beq.n	800544e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	3310      	adds	r3, #16
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fdb4 	bl	8005fa0 <xTaskRemoveFromEventList>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800543e:	4b54      	ldr	r3, [pc, #336]	; (8005590 <xQueueSemaphoreTake+0x214>)
 8005440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800544e:	f001 f983 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 8005452:	2301      	movs	r3, #1
 8005454:	e097      	b.n	8005586 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d111      	bne.n	8005480 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005478:	f001 f96e 	bl	8006758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800547c:	2300      	movs	r3, #0
 800547e:	e082      	b.n	8005586 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fdec 	bl	8006068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005494:	f001 f960 	bl	8006758 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005498:	f000 fb94 	bl	8005bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800549c:	f001 f92c 	bl	80066f8 <vPortEnterCritical>
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a6:	b25b      	sxtb	r3, r3
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d103      	bne.n	80054b6 <xQueueSemaphoreTake+0x13a>
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054bc:	b25b      	sxtb	r3, r3
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d103      	bne.n	80054cc <xQueueSemaphoreTake+0x150>
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054cc:	f001 f944 	bl	8006758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054d0:	463a      	mov	r2, r7
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fddb 	bl	8006094 <xTaskCheckForTimeOut>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d132      	bne.n	800554a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e6:	f000 f929 	bl	800573c <prvIsQueueEmpty>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d026      	beq.n	800553e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80054f8:	f001 f8fe 	bl	80066f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fec3 	bl	800628c <xTaskPriorityInherit>
 8005506:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005508:	f001 f926 	bl	8006758 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	3324      	adds	r3, #36	; 0x24
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fd1f 	bl	8005f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800551a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800551c:	f000 f8bc 	bl	8005698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005520:	f000 fb5e 	bl	8005be0 <xTaskResumeAll>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	f47f af68 	bne.w	80053fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800552c:	4b18      	ldr	r3, [pc, #96]	; (8005590 <xQueueSemaphoreTake+0x214>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	e75e      	b.n	80053fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800553e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005540:	f000 f8aa 	bl	8005698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005544:	f000 fb4c 	bl	8005be0 <xTaskResumeAll>
 8005548:	e758      	b.n	80053fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800554a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800554c:	f000 f8a4 	bl	8005698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005550:	f000 fb46 	bl	8005be0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005556:	f000 f8f1 	bl	800573c <prvIsQueueEmpty>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	f43f af4d 	beq.w	80053fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005568:	f001 f8c6 	bl	80066f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800556c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800556e:	f000 f811 	bl	8005594 <prvGetDisinheritPriorityAfterTimeout>
 8005572:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800557a:	4618      	mov	r0, r3
 800557c:	f000 ff5c 	bl	8006438 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005580:	f001 f8ea 	bl	8006758 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005584:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005586:	4618      	mov	r0, r3
 8005588:	3738      	adds	r7, #56	; 0x38
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e001      	b.n	80055b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80055b6:	68fb      	ldr	r3, [r7, #12]
	}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10d      	bne.n	80055fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d14d      	bne.n	8005686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 feb4 	bl	800635c <xTaskPriorityDisinherit>
 80055f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	e043      	b.n	8005686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d119      	bne.n	8005638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6858      	ldr	r0, [r3, #4]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	461a      	mov	r2, r3
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	f001 fc31 	bl	8006e76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	441a      	add	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d32b      	bcc.n	8005686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e026      	b.n	8005686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68d8      	ldr	r0, [r3, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	461a      	mov	r2, r3
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	f001 fc17 	bl	8006e76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	425b      	negs	r3, r3
 8005652:	441a      	add	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d207      	bcs.n	8005674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	425b      	negs	r3, r3
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d105      	bne.n	8005686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3b01      	subs	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800568e:	697b      	ldr	r3, [r7, #20]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056a0:	f001 f82a 	bl	80066f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ac:	e011      	b.n	80056d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3324      	adds	r3, #36	; 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fc70 	bl	8005fa0 <xTaskRemoveFromEventList>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056c6:	f000 fd47 	bl	8006158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dce9      	bgt.n	80056ae <prvUnlockQueue+0x16>
 80056da:	e000      	b.n	80056de <prvUnlockQueue+0x46>
					break;
 80056dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056e6:	f001 f837 	bl	8006758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ea:	f001 f805 	bl	80066f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f6:	e011      	b.n	800571c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3310      	adds	r3, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fc4b 	bl	8005fa0 <xTaskRemoveFromEventList>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005710:	f000 fd22 	bl	8006158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	3b01      	subs	r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dce9      	bgt.n	80056f8 <prvUnlockQueue+0x60>
 8005724:	e000      	b.n	8005728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	22ff      	movs	r2, #255	; 0xff
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005730:	f001 f812 	bl	8006758 <vPortExitCritical>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005744:	f000 ffd8 	bl	80066f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e001      	b.n	800575a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575a:	f000 fffd 	bl	8006758 <vPortExitCritical>

	return xReturn;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005770:	f000 ffc2 	bl	80066f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	429a      	cmp	r2, r3
 800577e:	d102      	bne.n	8005786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e001      	b.n	800578a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f000 ffe5 	bl	8006758 <vPortExitCritical>

	return xReturn;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e014      	b.n	80057d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057a8:	4a0f      	ldr	r2, [pc, #60]	; (80057e8 <vQueueAddToRegistry+0x50>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057b4:	490c      	ldr	r1, [pc, #48]	; (80057e8 <vQueueAddToRegistry+0x50>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057be:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <vQueueAddToRegistry+0x50>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057ca:	e006      	b.n	80057da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	d9e7      	bls.n	80057a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000384 	.word	0x20000384

080057ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af04      	add	r7, sp, #16
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	623b      	str	r3, [r7, #32]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xTaskCreateStatic+0x46>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	61fb      	str	r3, [r7, #28]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005832:	23bc      	movs	r3, #188	; 0xbc
 8005834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2bbc      	cmp	r3, #188	; 0xbc
 800583a:	d00a      	beq.n	8005852 <xTaskCreateStatic+0x66>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61bb      	str	r3, [r7, #24]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01e      	beq.n	8005898 <xTaskCreateStatic+0xac>
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	2202      	movs	r2, #2
 800586e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005872:	2300      	movs	r3, #0
 8005874:	9303      	str	r3, [sp, #12]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	f107 0314 	add.w	r3, r7, #20
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f850 	bl	8005930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005892:	f000 f8f3 	bl	8005a7c <prvAddNewTaskToReadyList>
 8005896:	e001      	b.n	800589c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800589c:	697b      	ldr	r3, [r7, #20]
	}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b08c      	sub	sp, #48	; 0x30
 80058aa:	af04      	add	r7, sp, #16
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ffce 	bl	800685c <pvPortMalloc>
 80058c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00e      	beq.n	80058e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058c8:	20bc      	movs	r0, #188	; 0xbc
 80058ca:	f000 ffc7 	bl	800685c <pvPortMalloc>
 80058ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
 80058dc:	e005      	b.n	80058ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	f001 f888 	bl	80069f4 <vPortFree>
 80058e4:	e001      	b.n	80058ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f80e 	bl	8005930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005914:	69f8      	ldr	r0, [r7, #28]
 8005916:	f000 f8b1 	bl	8005a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800591a:	2301      	movs	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e002      	b.n	8005926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005926:	69bb      	ldr	r3, [r7, #24]
	}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	461a      	mov	r2, r3
 8005948:	21a5      	movs	r1, #165	; 0xa5
 800594a:	f001 faa2 	bl	8006e92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005958:	3b01      	subs	r3, #1
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	617b      	str	r3, [r7, #20]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01f      	beq.n	80059ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e012      	b.n	80059ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	7819      	ldrb	r1, [r3, #0]
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	3334      	adds	r3, #52	; 0x34
 80059a4:	460a      	mov	r2, r1
 80059a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d006      	beq.n	80059c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b0f      	cmp	r3, #15
 80059be:	d9e9      	bls.n	8005994 <prvInitialiseNewTask+0x64>
 80059c0:	e000      	b.n	80059c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80059c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059cc:	e003      	b.n	80059d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	2b37      	cmp	r3, #55	; 0x37
 80059da:	d901      	bls.n	80059e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059dc:	2337      	movs	r3, #55	; 0x37
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2200      	movs	r2, #0
 80059f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f939 	bl	8004c6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	3318      	adds	r3, #24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f934 	bl	8004c6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	3354      	adds	r3, #84	; 0x54
 8005a30:	2260      	movs	r2, #96	; 0x60
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 fa2c 	bl	8006e92 <memset>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <prvInitialiseNewTask+0x140>)
 8005a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <prvInitialiseNewTask+0x144>)
 8005a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	4a0b      	ldr	r2, [pc, #44]	; (8005a78 <prvInitialiseNewTask+0x148>)
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	69b8      	ldr	r0, [r7, #24]
 8005a52:	f000 fddb 	bl	800660c <pxPortInitialiseStack>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a68:	bf00      	nop
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	08008180 	.word	0x08008180
 8005a74:	080081a0 	.word	0x080081a0
 8005a78:	08008160 	.word	0x08008160

08005a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a84:	f000 fe38 	bl	80066f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a2c      	ldr	r2, [pc, #176]	; (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a92:	4b2c      	ldr	r3, [pc, #176]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a9a:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d110      	bne.n	8005aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aa8:	f000 fb62 	bl	8006170 <prvInitialiseTaskLists>
 8005aac:	e00d      	b.n	8005aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aae:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <prvAddNewTaskToReadyList+0xcc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ab6:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d802      	bhi.n	8005aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aca:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <prvAddNewTaskToReadyList+0xd4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d903      	bls.n	8005af0 <prvAddNewTaskToReadyList+0x74>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	4a18      	ldr	r2, [pc, #96]	; (8005b50 <prvAddNewTaskToReadyList+0xd4>)
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <prvAddNewTaskToReadyList+0xd8>)
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7ff f8be 	bl	8004c88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b0c:	f000 fe24 	bl	8006758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b10:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <prvAddNewTaskToReadyList+0xcc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00e      	beq.n	8005b36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d207      	bcs.n	8005b36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvAddNewTaskToReadyList+0xdc>)
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000894 	.word	0x20000894
 8005b44:	200003c4 	.word	0x200003c4
 8005b48:	200008a0 	.word	0x200008a0
 8005b4c:	200008b0 	.word	0x200008b0
 8005b50:	2000089c 	.word	0x2000089c
 8005b54:	200003c8 	.word	0x200003c8
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <vTaskDelay+0x60>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <vTaskDelay+0x30>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60bb      	str	r3, [r7, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b8c:	f000 f81a 	bl	8005bc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fce6 	bl	8006564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b98:	f000 f822 	bl	8005be0 <xTaskResumeAll>
 8005b9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d107      	bne.n	8005bb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <vTaskDelay+0x64>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200008b8 	.word	0x200008b8
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <vTaskSuspendAll+0x18>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	4a03      	ldr	r2, [pc, #12]	; (8005bdc <vTaskSuspendAll+0x18>)
 8005bd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bd2:	bf00      	nop
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	200008b8 	.word	0x200008b8

08005be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bee:	4b42      	ldr	r3, [pc, #264]	; (8005cf8 <xTaskResumeAll+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <xTaskResumeAll+0x2c>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	603b      	str	r3, [r7, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c0c:	f000 fd74 	bl	80066f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c10:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <xTaskResumeAll+0x118>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <xTaskResumeAll+0x118>)
 8005c18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1a:	4b37      	ldr	r3, [pc, #220]	; (8005cf8 <xTaskResumeAll+0x118>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d162      	bne.n	8005ce8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c22:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <xTaskResumeAll+0x11c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d05e      	beq.n	8005ce8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c2a:	e02f      	b.n	8005c8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c2c:	4b34      	ldr	r3, [pc, #208]	; (8005d00 <xTaskResumeAll+0x120>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3318      	adds	r3, #24
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff f882 	bl	8004d42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f87d 	bl	8004d42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4b2d      	ldr	r3, [pc, #180]	; (8005d04 <xTaskResumeAll+0x124>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d903      	bls.n	8005c5c <xTaskResumeAll+0x7c>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <xTaskResumeAll+0x124>)
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4a27      	ldr	r2, [pc, #156]	; (8005d08 <xTaskResumeAll+0x128>)
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f7ff f808 	bl	8004c88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <xTaskResumeAll+0x12c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c86:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <xTaskResumeAll+0x130>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8c:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <xTaskResumeAll+0x120>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1cb      	bne.n	8005c2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c9a:	f000 faa9 	bl	80061f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <xTaskResumeAll+0x134>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d010      	beq.n	8005ccc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005caa:	f000 f837 	bl	8005d1c <xTaskIncrementTick>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005cb4:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <xTaskResumeAll+0x130>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f1      	bne.n	8005caa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <xTaskResumeAll+0x134>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <xTaskResumeAll+0x130>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <xTaskResumeAll+0x138>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ce8:	f000 fd36 	bl	8006758 <vPortExitCritical>

	return xAlreadyYielded;
 8005cec:	68bb      	ldr	r3, [r7, #8]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200008b8 	.word	0x200008b8
 8005cfc:	20000894 	.word	0x20000894
 8005d00:	20000858 	.word	0x20000858
 8005d04:	2000089c 	.word	0x2000089c
 8005d08:	200003c8 	.word	0x200003c8
 8005d0c:	200003c4 	.word	0x200003c4
 8005d10:	200008a8 	.word	0x200008a8
 8005d14:	200008a4 	.word	0x200008a4
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d26:	4b4f      	ldr	r3, [pc, #316]	; (8005e64 <xTaskIncrementTick+0x148>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f040 808f 	bne.w	8005e4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d30:	4b4d      	ldr	r3, [pc, #308]	; (8005e68 <xTaskIncrementTick+0x14c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d38:	4a4b      	ldr	r2, [pc, #300]	; (8005e68 <xTaskIncrementTick+0x14c>)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d120      	bne.n	8005d86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d44:	4b49      	ldr	r3, [pc, #292]	; (8005e6c <xTaskIncrementTick+0x150>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	603b      	str	r3, [r7, #0]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <xTaskIncrementTick+0x46>
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <xTaskIncrementTick+0x150>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <xTaskIncrementTick+0x154>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3f      	ldr	r2, [pc, #252]	; (8005e6c <xTaskIncrementTick+0x150>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4a3f      	ldr	r2, [pc, #252]	; (8005e70 <xTaskIncrementTick+0x154>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <xTaskIncrementTick+0x158>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a3d      	ldr	r2, [pc, #244]	; (8005e74 <xTaskIncrementTick+0x158>)
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	f000 fa35 	bl	80061f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d86:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <xTaskIncrementTick+0x15c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d349      	bcc.n	8005e24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d90:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <xTaskIncrementTick+0x150>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <xTaskIncrementTick+0x15c>)
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	601a      	str	r2, [r3, #0]
					break;
 8005da2:	e03f      	b.n	8005e24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da4:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <xTaskIncrementTick+0x150>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d203      	bcs.n	8005dc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dbc:	4a2e      	ldr	r2, [pc, #184]	; (8005e78 <xTaskIncrementTick+0x15c>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dc2:	e02f      	b.n	8005e24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe ffba 	bl	8004d42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3318      	adds	r3, #24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe ffb1 	bl	8004d42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <xTaskIncrementTick+0x160>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d903      	bls.n	8005df4 <xTaskIncrementTick+0xd8>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a22      	ldr	r2, [pc, #136]	; (8005e7c <xTaskIncrementTick+0x160>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <xTaskIncrementTick+0x164>)
 8005e02:	441a      	add	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fe ff3c 	bl	8004c88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <xTaskIncrementTick+0x168>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d3b8      	bcc.n	8005d90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e22:	e7b5      	b.n	8005d90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e24:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <xTaskIncrementTick+0x168>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4915      	ldr	r1, [pc, #84]	; (8005e80 <xTaskIncrementTick+0x164>)
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d901      	bls.n	8005e40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e40:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <xTaskIncrementTick+0x16c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e004      	b.n	8005e58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <xTaskIncrementTick+0x170>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <xTaskIncrementTick+0x170>)
 8005e56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e58:	697b      	ldr	r3, [r7, #20]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200008b8 	.word	0x200008b8
 8005e68:	20000898 	.word	0x20000898
 8005e6c:	20000850 	.word	0x20000850
 8005e70:	20000854 	.word	0x20000854
 8005e74:	200008ac 	.word	0x200008ac
 8005e78:	200008b4 	.word	0x200008b4
 8005e7c:	2000089c 	.word	0x2000089c
 8005e80:	200003c8 	.word	0x200003c8
 8005e84:	200003c4 	.word	0x200003c4
 8005e88:	200008a8 	.word	0x200008a8
 8005e8c:	200008a4 	.word	0x200008a4

08005e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <vTaskSwitchContext+0xb0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e9e:	4b29      	ldr	r3, [pc, #164]	; (8005f44 <vTaskSwitchContext+0xb4>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ea4:	e046      	b.n	8005f34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005ea6:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <vTaskSwitchContext+0xb4>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eac:	4b26      	ldr	r3, [pc, #152]	; (8005f48 <vTaskSwitchContext+0xb8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e010      	b.n	8005ed6 <vTaskSwitchContext+0x46>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	607b      	str	r3, [r7, #4]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <vTaskSwitchContext+0x3e>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	491d      	ldr	r1, [pc, #116]	; (8005f4c <vTaskSwitchContext+0xbc>)
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0e4      	beq.n	8005eb4 <vTaskSwitchContext+0x24>
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <vTaskSwitchContext+0xbc>)
 8005ef6:	4413      	add	r3, r2
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d104      	bne.n	8005f1a <vTaskSwitchContext+0x8a>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a0b      	ldr	r2, [pc, #44]	; (8005f50 <vTaskSwitchContext+0xc0>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <vTaskSwitchContext+0xb8>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <vTaskSwitchContext+0xc0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3354      	adds	r3, #84	; 0x54
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <vTaskSwitchContext+0xc4>)
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	200008b8 	.word	0x200008b8
 8005f44:	200008a8 	.word	0x200008a8
 8005f48:	2000089c 	.word	0x2000089c
 8005f4c:	200003c8 	.word	0x200003c8
 8005f50:	200003c4 	.word	0x200003c4
 8005f54:	20000018 	.word	0x20000018

08005f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60fb      	str	r3, [r7, #12]
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <vTaskPlaceOnEventList+0x44>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3318      	adds	r3, #24
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fe fea2 	bl	8004cd0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f000 fae8 	bl	8006564 <prvAddCurrentTaskToDelayedList>
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	200003c4 	.word	0x200003c4

08005fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	3318      	adds	r3, #24
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe feb6 	bl	8004d42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd6:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <xTaskRemoveFromEventList+0xb0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d11d      	bne.n	800601a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fead 	bl	8004d42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	4b19      	ldr	r3, [pc, #100]	; (8006054 <xTaskRemoveFromEventList+0xb4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <xTaskRemoveFromEventList+0x5c>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a16      	ldr	r2, [pc, #88]	; (8006054 <xTaskRemoveFromEventList+0xb4>)
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4a13      	ldr	r2, [pc, #76]	; (8006058 <xTaskRemoveFromEventList+0xb8>)
 800600a:	441a      	add	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fe38 	bl	8004c88 <vListInsertEnd>
 8006018:	e005      	b.n	8006026 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3318      	adds	r3, #24
 800601e:	4619      	mov	r1, r3
 8006020:	480e      	ldr	r0, [pc, #56]	; (800605c <xTaskRemoveFromEventList+0xbc>)
 8006022:	f7fe fe31 	bl	8004c88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602a:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <xTaskRemoveFromEventList+0xc0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	429a      	cmp	r2, r3
 8006032:	d905      	bls.n	8006040 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <xTaskRemoveFromEventList+0xc4>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e001      	b.n	8006044 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006044:	697b      	ldr	r3, [r7, #20]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200008b8 	.word	0x200008b8
 8006054:	2000089c 	.word	0x2000089c
 8006058:	200003c8 	.word	0x200003c8
 800605c:	20000858 	.word	0x20000858
 8006060:	200003c4 	.word	0x200003c4
 8006064:	200008a8 	.word	0x200008a8

08006068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <vTaskInternalSetTimeOutState+0x24>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <vTaskInternalSetTimeOutState+0x28>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	200008ac 	.word	0x200008ac
 8006090:	20000898 	.word	0x20000898

08006094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	613b      	str	r3, [r7, #16]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060d6:	f000 fb0f 	bl	80066f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <xTaskCheckForTimeOut+0xbc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d102      	bne.n	80060fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e023      	b.n	8006142 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <xTaskCheckForTimeOut+0xc0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d007      	beq.n	8006116 <xTaskCheckForTimeOut+0x82>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e015      	b.n	8006142 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d20b      	bcs.n	8006138 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff9b 	bl	8006068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e004      	b.n	8006142 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006142:	f000 fb09 	bl	8006758 <vPortExitCritical>

	return xReturn;
 8006146:	69fb      	ldr	r3, [r7, #28]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000898 	.word	0x20000898
 8006154:	200008ac 	.word	0x200008ac

08006158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <vTaskMissedYield+0x14>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	200008a8 	.word	0x200008a8

08006170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	e00c      	b.n	8006196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4a12      	ldr	r2, [pc, #72]	; (80061d0 <prvInitialiseTaskLists+0x60>)
 8006188:	4413      	add	r3, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fd4f 	bl	8004c2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3301      	adds	r3, #1
 8006194:	607b      	str	r3, [r7, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b37      	cmp	r3, #55	; 0x37
 800619a:	d9ef      	bls.n	800617c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800619c:	480d      	ldr	r0, [pc, #52]	; (80061d4 <prvInitialiseTaskLists+0x64>)
 800619e:	f7fe fd46 	bl	8004c2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061a2:	480d      	ldr	r0, [pc, #52]	; (80061d8 <prvInitialiseTaskLists+0x68>)
 80061a4:	f7fe fd43 	bl	8004c2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061a8:	480c      	ldr	r0, [pc, #48]	; (80061dc <prvInitialiseTaskLists+0x6c>)
 80061aa:	f7fe fd40 	bl	8004c2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061ae:	480c      	ldr	r0, [pc, #48]	; (80061e0 <prvInitialiseTaskLists+0x70>)
 80061b0:	f7fe fd3d 	bl	8004c2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061b4:	480b      	ldr	r0, [pc, #44]	; (80061e4 <prvInitialiseTaskLists+0x74>)
 80061b6:	f7fe fd3a 	bl	8004c2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <prvInitialiseTaskLists+0x78>)
 80061bc:	4a05      	ldr	r2, [pc, #20]	; (80061d4 <prvInitialiseTaskLists+0x64>)
 80061be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <prvInitialiseTaskLists+0x7c>)
 80061c2:	4a05      	ldr	r2, [pc, #20]	; (80061d8 <prvInitialiseTaskLists+0x68>)
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200003c8 	.word	0x200003c8
 80061d4:	20000828 	.word	0x20000828
 80061d8:	2000083c 	.word	0x2000083c
 80061dc:	20000858 	.word	0x20000858
 80061e0:	2000086c 	.word	0x2000086c
 80061e4:	20000880 	.word	0x20000880
 80061e8:	20000850 	.word	0x20000850
 80061ec:	20000854 	.word	0x20000854

080061f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <prvResetNextTaskUnblockTime+0x38>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <prvResetNextTaskUnblockTime+0x3c>)
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006208:	e008      	b.n	800621c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <prvResetNextTaskUnblockTime+0x38>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4a04      	ldr	r2, [pc, #16]	; (800622c <prvResetNextTaskUnblockTime+0x3c>)
 800621a:	6013      	str	r3, [r2, #0]
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000850 	.word	0x20000850
 800622c:	200008b4 	.word	0x200008b4

08006230 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <xTaskGetCurrentTaskHandle+0x1c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800623c:	687b      	ldr	r3, [r7, #4]
	}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	200003c4 	.word	0x200003c4

08006250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <xTaskGetSchedulerState+0x34>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800625e:	2301      	movs	r3, #1
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	e008      	b.n	8006276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <xTaskGetSchedulerState+0x38>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800626c:	2302      	movs	r3, #2
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e001      	b.n	8006276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006276:	687b      	ldr	r3, [r7, #4]
	}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	200008a0 	.word	0x200008a0
 8006288:	200008b8 	.word	0x200008b8

0800628c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d051      	beq.n	8006346 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a6:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <xTaskPriorityInherit+0xc4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d241      	bcs.n	8006334 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db06      	blt.n	80062c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b8:	4b25      	ldr	r3, [pc, #148]	; (8006350 <xTaskPriorityInherit+0xc4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6959      	ldr	r1, [r3, #20]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <xTaskPriorityInherit+0xc8>)
 80062d8:	4413      	add	r3, r2
 80062da:	4299      	cmp	r1, r3
 80062dc:	d122      	bne.n	8006324 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fd2d 	bl	8004d42 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062e8:	4b19      	ldr	r3, [pc, #100]	; (8006350 <xTaskPriorityInherit+0xc4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <xTaskPriorityInherit+0xcc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <xTaskPriorityInherit+0x7a>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4a15      	ldr	r2, [pc, #84]	; (8006358 <xTaskPriorityInherit+0xcc>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a10      	ldr	r2, [pc, #64]	; (8006354 <xTaskPriorityInherit+0xc8>)
 8006314:	441a      	add	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fe fcb3 	bl	8004c88 <vListInsertEnd>
 8006322:	e004      	b.n	800632e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <xTaskPriorityInherit+0xc4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e008      	b.n	8006346 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <xTaskPriorityInherit+0xc4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	429a      	cmp	r2, r3
 8006340:	d201      	bcs.n	8006346 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006346:	68fb      	ldr	r3, [r7, #12]
	}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200003c4 	.word	0x200003c4
 8006354:	200003c8 	.word	0x200003c8
 8006358:	2000089c 	.word	0x2000089c

0800635c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d056      	beq.n	8006420 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006372:	4b2e      	ldr	r3, [pc, #184]	; (800642c <xTaskPriorityDisinherit+0xd0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	429a      	cmp	r2, r3
 800637a:	d00a      	beq.n	8006392 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	60fb      	str	r3, [r7, #12]
}
 800638e:	bf00      	nop
 8006390:	e7fe      	b.n	8006390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	60bb      	str	r3, [r7, #8]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	1e5a      	subs	r2, r3, #1
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d02c      	beq.n	8006420 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d128      	bne.n	8006420 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fcb5 	bl	8004d42 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <xTaskPriorityDisinherit+0xd4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d903      	bls.n	8006400 <xTaskPriorityDisinherit+0xa4>
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <xTaskPriorityDisinherit+0xd4>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a09      	ldr	r2, [pc, #36]	; (8006434 <xTaskPriorityDisinherit+0xd8>)
 800640e:	441a      	add	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3304      	adds	r3, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7fe fc36 	bl	8004c88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006420:	697b      	ldr	r3, [r7, #20]
	}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200003c4 	.word	0x200003c4
 8006430:	2000089c 	.word	0x2000089c
 8006434:	200003c8 	.word	0x200003c8

08006438 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006446:	2301      	movs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d06a      	beq.n	8006526 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	60fb      	str	r3, [r7, #12]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d902      	bls.n	800647e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e002      	b.n	8006484 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006482:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	429a      	cmp	r2, r3
 800648c:	d04b      	beq.n	8006526 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	429a      	cmp	r2, r3
 8006496:	d146      	bne.n	8006526 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d10a      	bne.n	80064b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60bb      	str	r3, [r7, #8]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db04      	blt.n	80064d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4a13      	ldr	r2, [pc, #76]	; (8006534 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80064e6:	4413      	add	r3, r2
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d11c      	bne.n	8006526 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fc26 	bl	8004d42 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d903      	bls.n	800650a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4a07      	ldr	r2, [pc, #28]	; (8006534 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006518:	441a      	add	r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fe fbb1 	bl	8004c88 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006526:	bf00      	nop
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	200003c4 	.word	0x200003c4
 8006534:	200003c8 	.word	0x200003c8
 8006538:	2000089c 	.word	0x2000089c

0800653c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <pvTaskIncrementMutexHeldCount+0x24>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <pvTaskIncrementMutexHeldCount+0x24>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800654e:	3201      	adds	r2, #1
 8006550:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006552:	4b03      	ldr	r3, [pc, #12]	; (8006560 <pvTaskIncrementMutexHeldCount+0x24>)
 8006554:	681b      	ldr	r3, [r3, #0]
	}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	200003c4 	.word	0x200003c4

08006564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800656e:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006574:	4b20      	ldr	r3, [pc, #128]	; (80065f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3304      	adds	r3, #4
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fbe1 	bl	8004d42 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d10a      	bne.n	800659e <prvAddCurrentTaskToDelayedList+0x3a>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4819      	ldr	r0, [pc, #100]	; (80065fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006598:	f7fe fb76 	bl	8004c88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800659c:	e026      	b.n	80065ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4413      	add	r3, r2
 80065a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d209      	bcs.n	80065ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065b6:	4b12      	ldr	r3, [pc, #72]	; (8006600 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f7fe fb84 	bl	8004cd0 <vListInsert>
}
 80065c8:	e010      	b.n	80065ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ca:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f7fe fb7a 	bl	8004cd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d202      	bcs.n	80065ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065e6:	4a08      	ldr	r2, [pc, #32]	; (8006608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6013      	str	r3, [r2, #0]
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000898 	.word	0x20000898
 80065f8:	200003c4 	.word	0x200003c4
 80065fc:	20000880 	.word	0x20000880
 8006600:	20000854 	.word	0x20000854
 8006604:	20000850 	.word	0x20000850
 8006608:	200008b4 	.word	0x200008b4

0800660c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b04      	subs	r3, #4
 800661c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f023 0201 	bic.w	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800663c:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <pxPortInitialiseStack+0x64>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3b14      	subs	r3, #20
 8006646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b04      	subs	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f06f 0202 	mvn.w	r2, #2
 800665a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b20      	subs	r3, #32
 8006660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	08006675 	.word	0x08006675

08006674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvTaskExitError+0x54>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d00a      	beq.n	800669e <prvTaskExitError+0x2a>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <prvTaskExitError+0x28>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60bb      	str	r3, [r7, #8]
}
 80066b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066b2:	bf00      	nop
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0fc      	beq.n	80066b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000014 	.word	0x20000014
 80066cc:	00000000 	.word	0x00000000

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <vPortEnterCritical+0x58>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a0d      	ldr	r2, [pc, #52]	; (8006750 <vPortEnterCritical+0x58>)
 800671a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <vPortEnterCritical+0x58>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d10f      	bne.n	8006744 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortEnterCritical+0x5c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <vPortEnterCritical+0x4c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	603b      	str	r3, [r7, #0]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <vPortEnterCritical+0x4a>
	}
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000014 	.word	0x20000014
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <vPortExitCritical+0x50>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <vPortExitCritical+0x24>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	607b      	str	r3, [r7, #4]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <vPortExitCritical+0x50>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3b01      	subs	r3, #1
 8006782:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <vPortExitCritical+0x50>)
 8006784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006786:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <vPortExitCritical+0x50>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <vPortExitCritical+0x42>
 800678e:	2300      	movs	r3, #0
 8006790:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006798:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000014 	.word	0x20000014
 80067ac:	00000000 	.word	0x00000000

080067b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067b0:	f3ef 8009 	mrs	r0, PSP
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4b15      	ldr	r3, [pc, #84]	; (8006810 <pxCurrentTCBConst>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f01e 0f10 	tst.w	lr, #16
 80067c0:	bf08      	it	eq
 80067c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067d4:	f380 8811 	msr	BASEPRI, r0
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f7ff fb56 	bl	8005e90 <vTaskSwitchContext>
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f380 8811 	msr	BASEPRI, r0
 80067ec:	bc09      	pop	{r0, r3}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f6:	f01e 0f10 	tst.w	lr, #16
 80067fa:	bf08      	it	eq
 80067fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006800:	f380 8809 	msr	PSP, r0
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst>:
 8006810:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006832:	f7ff fa73 	bl	8005d1c <xTaskIncrementTick>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <xPortSysTickHandler+0x40>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006868:	f7ff f9ac 	bl	8005bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800686c:	4b5b      	ldr	r3, [pc, #364]	; (80069dc <pvPortMalloc+0x180>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006874:	f000 f920 	bl	8006ab8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006878:	4b59      	ldr	r3, [pc, #356]	; (80069e0 <pvPortMalloc+0x184>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 8093 	bne.w	80069ac <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01d      	beq.n	80068c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800688c:	2208      	movs	r2, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d014      	beq.n	80068c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f023 0307 	bic.w	r3, r3, #7
 80068a4:	3308      	adds	r3, #8
 80068a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <pvPortMalloc+0x6c>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	617b      	str	r3, [r7, #20]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d06e      	beq.n	80069ac <pvPortMalloc+0x150>
 80068ce:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <pvPortMalloc+0x188>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d869      	bhi.n	80069ac <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068d8:	4b43      	ldr	r3, [pc, #268]	; (80069e8 <pvPortMalloc+0x18c>)
 80068da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068dc:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <pvPortMalloc+0x18c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068e2:	e004      	b.n	80068ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d903      	bls.n	8006900 <pvPortMalloc+0xa4>
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f1      	bne.n	80068e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006900:	4b36      	ldr	r3, [pc, #216]	; (80069dc <pvPortMalloc+0x180>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006906:	429a      	cmp	r2, r3
 8006908:	d050      	beq.n	80069ac <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2208      	movs	r2, #8
 8006910:	4413      	add	r3, r2
 8006912:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	2308      	movs	r3, #8
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	429a      	cmp	r2, r3
 800692a:	d91f      	bls.n	800696c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800692c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4413      	add	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <pvPortMalloc+0xf8>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	613b      	str	r3, [r7, #16]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006966:	69b8      	ldr	r0, [r7, #24]
 8006968:	f000 f908 	bl	8006b7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <pvPortMalloc+0x188>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <pvPortMalloc+0x188>)
 8006978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800697a:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <pvPortMalloc+0x188>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <pvPortMalloc+0x190>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d203      	bcs.n	800698e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006986:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <pvPortMalloc+0x188>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a18      	ldr	r2, [pc, #96]	; (80069ec <pvPortMalloc+0x190>)
 800698c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <pvPortMalloc+0x184>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	431a      	orrs	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069a2:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <pvPortMalloc+0x194>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <pvPortMalloc+0x194>)
 80069aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069ac:	f7ff f918 	bl	8005be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <pvPortMalloc+0x174>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60fb      	str	r3, [r7, #12]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <pvPortMalloc+0x172>
	return pvReturn;
 80069d0:	69fb      	ldr	r3, [r7, #28]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3728      	adds	r7, #40	; 0x28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200044c4 	.word	0x200044c4
 80069e0:	200044d8 	.word	0x200044d8
 80069e4:	200044c8 	.word	0x200044c8
 80069e8:	200044bc 	.word	0x200044bc
 80069ec:	200044cc 	.word	0x200044cc
 80069f0:	200044d0 	.word	0x200044d0

080069f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d04d      	beq.n	8006aa2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a06:	2308      	movs	r3, #8
 8006a08:	425b      	negs	r3, r3
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <vPortFree+0xb8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <vPortFree+0x44>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <vPortFree+0x62>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60bb      	str	r3, [r7, #8]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <vPortFree+0xb8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01e      	beq.n	8006aa2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11a      	bne.n	8006aa2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <vPortFree+0xb8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a7c:	f7ff f8a2 	bl	8005bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <vPortFree+0xbc>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4413      	add	r3, r2
 8006a8a:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <vPortFree+0xbc>)
 8006a8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f000 f874 	bl	8006b7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <vPortFree+0xc0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	4a06      	ldr	r2, [pc, #24]	; (8006ab4 <vPortFree+0xc0>)
 8006a9c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a9e:	f7ff f89f 	bl	8005be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aa2:	bf00      	nop
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200044d8 	.word	0x200044d8
 8006ab0:	200044c8 	.word	0x200044c8
 8006ab4:	200044d4 	.word	0x200044d4

08006ab8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006abe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ac2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <prvHeapInit+0xac>)
 8006ac6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3307      	adds	r3, #7
 8006ad6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <prvHeapInit+0xac>)
 8006ae8:	4413      	add	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <prvHeapInit+0xb0>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006af6:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <prvHeapInit+0xb0>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b04:	2208      	movs	r2, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0307 	bic.w	r3, r3, #7
 8006b12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <prvHeapInit+0xb4>)
 8006b18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b1a:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <prvHeapInit+0xb4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <prvHeapInit+0xb4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <prvHeapInit+0xb4>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <prvHeapInit+0xb8>)
 8006b46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <prvHeapInit+0xbc>)
 8006b4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <prvHeapInit+0xc0>)
 8006b52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b56:	601a      	str	r2, [r3, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	200008bc 	.word	0x200008bc
 8006b68:	200044bc 	.word	0x200044bc
 8006b6c:	200044c4 	.word	0x200044c4
 8006b70:	200044cc 	.word	0x200044cc
 8006b74:	200044c8 	.word	0x200044c8
 8006b78:	200044d8 	.word	0x200044d8

08006b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <prvInsertBlockIntoFreeList+0xac>)
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e002      	b.n	8006b90 <prvInsertBlockIntoFreeList+0x14>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d8f7      	bhi.n	8006b8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d108      	bne.n	8006bbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	441a      	add	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d118      	bne.n	8006c04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d00d      	beq.n	8006bfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	441a      	add	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e008      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bfa:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <prvInsertBlockIntoFreeList+0xb0>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	e003      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d002      	beq.n	8006c1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	200044bc 	.word	0x200044bc
 8006c2c:	200044c4 	.word	0x200044c4

08006c30 <__errno>:
 8006c30:	4b01      	ldr	r3, [pc, #4]	; (8006c38 <__errno+0x8>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000018 	.word	0x20000018

08006c3c <std>:
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	4604      	mov	r4, r0
 8006c42:	e9c0 3300 	strd	r3, r3, [r0]
 8006c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c4a:	6083      	str	r3, [r0, #8]
 8006c4c:	8181      	strh	r1, [r0, #12]
 8006c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c50:	81c2      	strh	r2, [r0, #14]
 8006c52:	6183      	str	r3, [r0, #24]
 8006c54:	4619      	mov	r1, r3
 8006c56:	2208      	movs	r2, #8
 8006c58:	305c      	adds	r0, #92	; 0x5c
 8006c5a:	f000 f91a 	bl	8006e92 <memset>
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <std+0x38>)
 8006c60:	6263      	str	r3, [r4, #36]	; 0x24
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <std+0x3c>)
 8006c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <std+0x40>)
 8006c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <std+0x44>)
 8006c6c:	6224      	str	r4, [r4, #32]
 8006c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	08007085 	.word	0x08007085
 8006c78:	080070a7 	.word	0x080070a7
 8006c7c:	080070df 	.word	0x080070df
 8006c80:	08007103 	.word	0x08007103

08006c84 <_cleanup_r>:
 8006c84:	4901      	ldr	r1, [pc, #4]	; (8006c8c <_cleanup_r+0x8>)
 8006c86:	f000 b8af 	b.w	8006de8 <_fwalk_reent>
 8006c8a:	bf00      	nop
 8006c8c:	08007275 	.word	0x08007275

08006c90 <__sfmoreglue>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	2268      	movs	r2, #104	; 0x68
 8006c94:	1e4d      	subs	r5, r1, #1
 8006c96:	4355      	muls	r5, r2
 8006c98:	460e      	mov	r6, r1
 8006c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c9e:	f000 f921 	bl	8006ee4 <_malloc_r>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	b140      	cbz	r0, 8006cb8 <__sfmoreglue+0x28>
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cac:	300c      	adds	r0, #12
 8006cae:	60a0      	str	r0, [r4, #8]
 8006cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cb4:	f000 f8ed 	bl	8006e92 <memset>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	bd70      	pop	{r4, r5, r6, pc}

08006cbc <__sfp_lock_acquire>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	; (8006cc4 <__sfp_lock_acquire+0x8>)
 8006cbe:	f000 b8d8 	b.w	8006e72 <__retarget_lock_acquire_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	200044dd 	.word	0x200044dd

08006cc8 <__sfp_lock_release>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__sfp_lock_release+0x8>)
 8006cca:	f000 b8d3 	b.w	8006e74 <__retarget_lock_release_recursive>
 8006cce:	bf00      	nop
 8006cd0:	200044dd 	.word	0x200044dd

08006cd4 <__sinit_lock_acquire>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sinit_lock_acquire+0x8>)
 8006cd6:	f000 b8cc 	b.w	8006e72 <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	200044de 	.word	0x200044de

08006ce0 <__sinit_lock_release>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__sinit_lock_release+0x8>)
 8006ce2:	f000 b8c7 	b.w	8006e74 <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	200044de 	.word	0x200044de

08006cec <__sinit>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	f7ff fff0 	bl	8006cd4 <__sinit_lock_acquire>
 8006cf4:	69a3      	ldr	r3, [r4, #24]
 8006cf6:	b11b      	cbz	r3, 8006d00 <__sinit+0x14>
 8006cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfc:	f7ff bff0 	b.w	8006ce0 <__sinit_lock_release>
 8006d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d04:	6523      	str	r3, [r4, #80]	; 0x50
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <__sinit+0x68>)
 8006d08:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <__sinit+0x6c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	bf04      	itt	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	61a3      	streq	r3, [r4, #24]
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 f820 	bl	8006d5c <__sfp>
 8006d1c:	6060      	str	r0, [r4, #4]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 f81c 	bl	8006d5c <__sfp>
 8006d24:	60a0      	str	r0, [r4, #8]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f818 	bl	8006d5c <__sfp>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	60e0      	str	r0, [r4, #12]
 8006d30:	2104      	movs	r1, #4
 8006d32:	6860      	ldr	r0, [r4, #4]
 8006d34:	f7ff ff82 	bl	8006c3c <std>
 8006d38:	68a0      	ldr	r0, [r4, #8]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2109      	movs	r1, #9
 8006d3e:	f7ff ff7d 	bl	8006c3c <std>
 8006d42:	68e0      	ldr	r0, [r4, #12]
 8006d44:	2202      	movs	r2, #2
 8006d46:	2112      	movs	r1, #18
 8006d48:	f7ff ff78 	bl	8006c3c <std>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	61a3      	str	r3, [r4, #24]
 8006d50:	e7d2      	b.n	8006cf8 <__sinit+0xc>
 8006d52:	bf00      	nop
 8006d54:	080081c0 	.word	0x080081c0
 8006d58:	08006c85 	.word	0x08006c85

08006d5c <__sfp>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f7ff ffac 	bl	8006cbc <__sfp_lock_acquire>
 8006d64:	4b1e      	ldr	r3, [pc, #120]	; (8006de0 <__sfp+0x84>)
 8006d66:	681e      	ldr	r6, [r3, #0]
 8006d68:	69b3      	ldr	r3, [r6, #24]
 8006d6a:	b913      	cbnz	r3, 8006d72 <__sfp+0x16>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff ffbd 	bl	8006cec <__sinit>
 8006d72:	3648      	adds	r6, #72	; 0x48
 8006d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	d503      	bpl.n	8006d84 <__sfp+0x28>
 8006d7c:	6833      	ldr	r3, [r6, #0]
 8006d7e:	b30b      	cbz	r3, 8006dc4 <__sfp+0x68>
 8006d80:	6836      	ldr	r6, [r6, #0]
 8006d82:	e7f7      	b.n	8006d74 <__sfp+0x18>
 8006d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d88:	b9d5      	cbnz	r5, 8006dc0 <__sfp+0x64>
 8006d8a:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <__sfp+0x88>)
 8006d8c:	60e3      	str	r3, [r4, #12]
 8006d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d92:	6665      	str	r5, [r4, #100]	; 0x64
 8006d94:	f000 f86c 	bl	8006e70 <__retarget_lock_init_recursive>
 8006d98:	f7ff ff96 	bl	8006cc8 <__sfp_lock_release>
 8006d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006da4:	6025      	str	r5, [r4, #0]
 8006da6:	61a5      	str	r5, [r4, #24]
 8006da8:	2208      	movs	r2, #8
 8006daa:	4629      	mov	r1, r5
 8006dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006db0:	f000 f86f 	bl	8006e92 <memset>
 8006db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc0:	3468      	adds	r4, #104	; 0x68
 8006dc2:	e7d9      	b.n	8006d78 <__sfp+0x1c>
 8006dc4:	2104      	movs	r1, #4
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7ff ff62 	bl	8006c90 <__sfmoreglue>
 8006dcc:	4604      	mov	r4, r0
 8006dce:	6030      	str	r0, [r6, #0]
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1d5      	bne.n	8006d80 <__sfp+0x24>
 8006dd4:	f7ff ff78 	bl	8006cc8 <__sfp_lock_release>
 8006dd8:	230c      	movs	r3, #12
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	e7ee      	b.n	8006dbc <__sfp+0x60>
 8006dde:	bf00      	nop
 8006de0:	080081c0 	.word	0x080081c0
 8006de4:	ffff0001 	.word	0xffff0001

08006de8 <_fwalk_reent>:
 8006de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dec:	4606      	mov	r6, r0
 8006dee:	4688      	mov	r8, r1
 8006df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006df4:	2700      	movs	r7, #0
 8006df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8006dfe:	d505      	bpl.n	8006e0c <_fwalk_reent+0x24>
 8006e00:	6824      	ldr	r4, [r4, #0]
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	d1f7      	bne.n	8006df6 <_fwalk_reent+0xe>
 8006e06:	4638      	mov	r0, r7
 8006e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0c:	89ab      	ldrh	r3, [r5, #12]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d907      	bls.n	8006e22 <_fwalk_reent+0x3a>
 8006e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e16:	3301      	adds	r3, #1
 8006e18:	d003      	beq.n	8006e22 <_fwalk_reent+0x3a>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	47c0      	blx	r8
 8006e20:	4307      	orrs	r7, r0
 8006e22:	3568      	adds	r5, #104	; 0x68
 8006e24:	e7e9      	b.n	8006dfa <_fwalk_reent+0x12>
	...

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4d0d      	ldr	r5, [pc, #52]	; (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2600      	movs	r6, #0
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4d0b      	ldr	r5, [pc, #44]	; (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	; (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f001 f8b6 	bl	8007fac <_init>
 8006e40:	1b64      	subs	r4, r4, r5
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2600      	movs	r6, #0
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e50:	4798      	blx	r3
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5a:	4798      	blx	r3
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	08008200 	.word	0x08008200
 8006e64:	08008200 	.word	0x08008200
 8006e68:	08008200 	.word	0x08008200
 8006e6c:	08008204 	.word	0x08008204

08006e70 <__retarget_lock_init_recursive>:
 8006e70:	4770      	bx	lr

08006e72 <__retarget_lock_acquire_recursive>:
 8006e72:	4770      	bx	lr

08006e74 <__retarget_lock_release_recursive>:
 8006e74:	4770      	bx	lr

08006e76 <memcpy>:
 8006e76:	440a      	add	r2, r1
 8006e78:	4291      	cmp	r1, r2
 8006e7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e7e:	d100      	bne.n	8006e82 <memcpy+0xc>
 8006e80:	4770      	bx	lr
 8006e82:	b510      	push	{r4, lr}
 8006e84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e8c:	4291      	cmp	r1, r2
 8006e8e:	d1f9      	bne.n	8006e84 <memcpy+0xe>
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <memset>:
 8006e92:	4402      	add	r2, r0
 8006e94:	4603      	mov	r3, r0
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d100      	bne.n	8006e9c <memset+0xa>
 8006e9a:	4770      	bx	lr
 8006e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8006ea0:	e7f9      	b.n	8006e96 <memset+0x4>
	...

08006ea4 <sbrk_aligned>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4e0e      	ldr	r6, [pc, #56]	; (8006ee0 <sbrk_aligned+0x3c>)
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	4605      	mov	r5, r0
 8006eae:	b911      	cbnz	r1, 8006eb6 <sbrk_aligned+0x12>
 8006eb0:	f000 f8a4 	bl	8006ffc <_sbrk_r>
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f89f 	bl	8006ffc <_sbrk_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d00a      	beq.n	8006ed8 <sbrk_aligned+0x34>
 8006ec2:	1cc4      	adds	r4, r0, #3
 8006ec4:	f024 0403 	bic.w	r4, r4, #3
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d007      	beq.n	8006edc <sbrk_aligned+0x38>
 8006ecc:	1a21      	subs	r1, r4, r0
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f894 	bl	8006ffc <_sbrk_r>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d101      	bne.n	8006edc <sbrk_aligned+0x38>
 8006ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8006edc:	4620      	mov	r0, r4
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	200044e4 	.word	0x200044e4

08006ee4 <_malloc_r>:
 8006ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee8:	1ccd      	adds	r5, r1, #3
 8006eea:	f025 0503 	bic.w	r5, r5, #3
 8006eee:	3508      	adds	r5, #8
 8006ef0:	2d0c      	cmp	r5, #12
 8006ef2:	bf38      	it	cc
 8006ef4:	250c      	movcc	r5, #12
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	4607      	mov	r7, r0
 8006efa:	db01      	blt.n	8006f00 <_malloc_r+0x1c>
 8006efc:	42a9      	cmp	r1, r5
 8006efe:	d905      	bls.n	8006f0c <_malloc_r+0x28>
 8006f00:	230c      	movs	r3, #12
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	2600      	movs	r6, #0
 8006f06:	4630      	mov	r0, r6
 8006f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0c:	4e2e      	ldr	r6, [pc, #184]	; (8006fc8 <_malloc_r+0xe4>)
 8006f0e:	f000 f9ff 	bl	8007310 <__malloc_lock>
 8006f12:	6833      	ldr	r3, [r6, #0]
 8006f14:	461c      	mov	r4, r3
 8006f16:	bb34      	cbnz	r4, 8006f66 <_malloc_r+0x82>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f7ff ffc2 	bl	8006ea4 <sbrk_aligned>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	4604      	mov	r4, r0
 8006f24:	d14d      	bne.n	8006fc2 <_malloc_r+0xde>
 8006f26:	6834      	ldr	r4, [r6, #0]
 8006f28:	4626      	mov	r6, r4
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	d140      	bne.n	8006fb0 <_malloc_r+0xcc>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	4631      	mov	r1, r6
 8006f32:	4638      	mov	r0, r7
 8006f34:	eb04 0803 	add.w	r8, r4, r3
 8006f38:	f000 f860 	bl	8006ffc <_sbrk_r>
 8006f3c:	4580      	cmp	r8, r0
 8006f3e:	d13a      	bne.n	8006fb6 <_malloc_r+0xd2>
 8006f40:	6821      	ldr	r1, [r4, #0]
 8006f42:	3503      	adds	r5, #3
 8006f44:	1a6d      	subs	r5, r5, r1
 8006f46:	f025 0503 	bic.w	r5, r5, #3
 8006f4a:	3508      	adds	r5, #8
 8006f4c:	2d0c      	cmp	r5, #12
 8006f4e:	bf38      	it	cc
 8006f50:	250c      	movcc	r5, #12
 8006f52:	4629      	mov	r1, r5
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff ffa5 	bl	8006ea4 <sbrk_aligned>
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d02b      	beq.n	8006fb6 <_malloc_r+0xd2>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	442b      	add	r3, r5
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	e00e      	b.n	8006f84 <_malloc_r+0xa0>
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	1b52      	subs	r2, r2, r5
 8006f6a:	d41e      	bmi.n	8006faa <_malloc_r+0xc6>
 8006f6c:	2a0b      	cmp	r2, #11
 8006f6e:	d916      	bls.n	8006f9e <_malloc_r+0xba>
 8006f70:	1961      	adds	r1, r4, r5
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	6025      	str	r5, [r4, #0]
 8006f76:	bf18      	it	ne
 8006f78:	6059      	strne	r1, [r3, #4]
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	bf08      	it	eq
 8006f7e:	6031      	streq	r1, [r6, #0]
 8006f80:	5162      	str	r2, [r4, r5]
 8006f82:	604b      	str	r3, [r1, #4]
 8006f84:	4638      	mov	r0, r7
 8006f86:	f104 060b 	add.w	r6, r4, #11
 8006f8a:	f000 f9c7 	bl	800731c <__malloc_unlock>
 8006f8e:	f026 0607 	bic.w	r6, r6, #7
 8006f92:	1d23      	adds	r3, r4, #4
 8006f94:	1af2      	subs	r2, r6, r3
 8006f96:	d0b6      	beq.n	8006f06 <_malloc_r+0x22>
 8006f98:	1b9b      	subs	r3, r3, r6
 8006f9a:	50a3      	str	r3, [r4, r2]
 8006f9c:	e7b3      	b.n	8006f06 <_malloc_r+0x22>
 8006f9e:	6862      	ldr	r2, [r4, #4]
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	bf0c      	ite	eq
 8006fa4:	6032      	streq	r2, [r6, #0]
 8006fa6:	605a      	strne	r2, [r3, #4]
 8006fa8:	e7ec      	b.n	8006f84 <_malloc_r+0xa0>
 8006faa:	4623      	mov	r3, r4
 8006fac:	6864      	ldr	r4, [r4, #4]
 8006fae:	e7b2      	b.n	8006f16 <_malloc_r+0x32>
 8006fb0:	4634      	mov	r4, r6
 8006fb2:	6876      	ldr	r6, [r6, #4]
 8006fb4:	e7b9      	b.n	8006f2a <_malloc_r+0x46>
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	4638      	mov	r0, r7
 8006fbc:	f000 f9ae 	bl	800731c <__malloc_unlock>
 8006fc0:	e7a1      	b.n	8006f06 <_malloc_r+0x22>
 8006fc2:	6025      	str	r5, [r4, #0]
 8006fc4:	e7de      	b.n	8006f84 <_malloc_r+0xa0>
 8006fc6:	bf00      	nop
 8006fc8:	200044e0 	.word	0x200044e0

08006fcc <iprintf>:
 8006fcc:	b40f      	push	{r0, r1, r2, r3}
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <iprintf+0x2c>)
 8006fd0:	b513      	push	{r0, r1, r4, lr}
 8006fd2:	681c      	ldr	r4, [r3, #0]
 8006fd4:	b124      	cbz	r4, 8006fe0 <iprintf+0x14>
 8006fd6:	69a3      	ldr	r3, [r4, #24]
 8006fd8:	b913      	cbnz	r3, 8006fe0 <iprintf+0x14>
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f7ff fe86 	bl	8006cec <__sinit>
 8006fe0:	ab05      	add	r3, sp, #20
 8006fe2:	9a04      	ldr	r2, [sp, #16]
 8006fe4:	68a1      	ldr	r1, [r4, #8]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 fb6f 	bl	80076cc <_vfiprintf_r>
 8006fee:	b002      	add	sp, #8
 8006ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	20000018 	.word	0x20000018

08006ffc <_sbrk_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d06      	ldr	r5, [pc, #24]	; (8007018 <_sbrk_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7fa fb2e 	bl	8001668 <_sbrk>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_sbrk_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_sbrk_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	200044e8 	.word	0x200044e8

0800701c <sniprintf>:
 800701c:	b40c      	push	{r2, r3}
 800701e:	b530      	push	{r4, r5, lr}
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <sniprintf+0x64>)
 8007022:	1e0c      	subs	r4, r1, #0
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	b09d      	sub	sp, #116	; 0x74
 8007028:	da08      	bge.n	800703c <sniprintf+0x20>
 800702a:	238b      	movs	r3, #139	; 0x8b
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
 8007032:	b01d      	add	sp, #116	; 0x74
 8007034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007038:	b002      	add	sp, #8
 800703a:	4770      	bx	lr
 800703c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007040:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007044:	bf14      	ite	ne
 8007046:	f104 33ff 	addne.w	r3, r4, #4294967295
 800704a:	4623      	moveq	r3, r4
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	9307      	str	r3, [sp, #28]
 8007050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007054:	9002      	str	r0, [sp, #8]
 8007056:	9006      	str	r0, [sp, #24]
 8007058:	f8ad 3016 	strh.w	r3, [sp, #22]
 800705c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800705e:	ab21      	add	r3, sp, #132	; 0x84
 8007060:	a902      	add	r1, sp, #8
 8007062:	4628      	mov	r0, r5
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	f000 fa07 	bl	8007478 <_svfiprintf_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	bfbc      	itt	lt
 800706e:	238b      	movlt	r3, #139	; 0x8b
 8007070:	602b      	strlt	r3, [r5, #0]
 8007072:	2c00      	cmp	r4, #0
 8007074:	d0dd      	beq.n	8007032 <sniprintf+0x16>
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	e7d9      	b.n	8007032 <sniprintf+0x16>
 800707e:	bf00      	nop
 8007080:	20000018 	.word	0x20000018

08007084 <__sread>:
 8007084:	b510      	push	{r4, lr}
 8007086:	460c      	mov	r4, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	f000 fde2 	bl	8007c54 <_read_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	bfab      	itete	ge
 8007094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007096:	89a3      	ldrhlt	r3, [r4, #12]
 8007098:	181b      	addge	r3, r3, r0
 800709a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800709e:	bfac      	ite	ge
 80070a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070a2:	81a3      	strhlt	r3, [r4, #12]
 80070a4:	bd10      	pop	{r4, pc}

080070a6 <__swrite>:
 80070a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	461f      	mov	r7, r3
 80070ac:	898b      	ldrh	r3, [r1, #12]
 80070ae:	05db      	lsls	r3, r3, #23
 80070b0:	4605      	mov	r5, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	4616      	mov	r6, r2
 80070b6:	d505      	bpl.n	80070c4 <__swrite+0x1e>
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	2302      	movs	r3, #2
 80070be:	2200      	movs	r2, #0
 80070c0:	f000 f914 	bl	80072ec <_lseek_r>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	4632      	mov	r2, r6
 80070d2:	463b      	mov	r3, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	f000 b823 	b.w	8007124 <_write_r>

080070de <__sseek>:
 80070de:	b510      	push	{r4, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e6:	f000 f901 	bl	80072ec <_lseek_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	bf15      	itete	ne
 80070f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80070f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070fa:	81a3      	strheq	r3, [r4, #12]
 80070fc:	bf18      	it	ne
 80070fe:	81a3      	strhne	r3, [r4, #12]
 8007100:	bd10      	pop	{r4, pc}

08007102 <__sclose>:
 8007102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007106:	f000 b81f 	b.w	8007148 <_close_r>

0800710a <strnlen>:
 800710a:	b510      	push	{r4, lr}
 800710c:	4602      	mov	r2, r0
 800710e:	4401      	add	r1, r0
 8007110:	428a      	cmp	r2, r1
 8007112:	4613      	mov	r3, r2
 8007114:	d003      	beq.n	800711e <strnlen+0x14>
 8007116:	781c      	ldrb	r4, [r3, #0]
 8007118:	3201      	adds	r2, #1
 800711a:	2c00      	cmp	r4, #0
 800711c:	d1f8      	bne.n	8007110 <strnlen+0x6>
 800711e:	1a18      	subs	r0, r3, r0
 8007120:	bd10      	pop	{r4, pc}
	...

08007124 <_write_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d07      	ldr	r5, [pc, #28]	; (8007144 <_write_r+0x20>)
 8007128:	4604      	mov	r4, r0
 800712a:	4608      	mov	r0, r1
 800712c:	4611      	mov	r1, r2
 800712e:	2200      	movs	r2, #0
 8007130:	602a      	str	r2, [r5, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	f7fa fa47 	bl	80015c6 <_write>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_write_r+0x1e>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_write_r+0x1e>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200044e8 	.word	0x200044e8

08007148 <_close_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d06      	ldr	r5, [pc, #24]	; (8007164 <_close_r+0x1c>)
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	602b      	str	r3, [r5, #0]
 8007154:	f7fa fa53 	bl	80015fe <_close>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_close_r+0x1a>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_close_r+0x1a>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	200044e8 	.word	0x200044e8

08007168 <__sflush_r>:
 8007168:	898a      	ldrh	r2, [r1, #12]
 800716a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716e:	4605      	mov	r5, r0
 8007170:	0710      	lsls	r0, r2, #28
 8007172:	460c      	mov	r4, r1
 8007174:	d458      	bmi.n	8007228 <__sflush_r+0xc0>
 8007176:	684b      	ldr	r3, [r1, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc05      	bgt.n	8007188 <__sflush_r+0x20>
 800717c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	dc02      	bgt.n	8007188 <__sflush_r+0x20>
 8007182:	2000      	movs	r0, #0
 8007184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800718a:	2e00      	cmp	r6, #0
 800718c:	d0f9      	beq.n	8007182 <__sflush_r+0x1a>
 800718e:	2300      	movs	r3, #0
 8007190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007194:	682f      	ldr	r7, [r5, #0]
 8007196:	602b      	str	r3, [r5, #0]
 8007198:	d032      	beq.n	8007200 <__sflush_r+0x98>
 800719a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	075a      	lsls	r2, r3, #29
 80071a0:	d505      	bpl.n	80071ae <__sflush_r+0x46>
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	1ac0      	subs	r0, r0, r3
 80071a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071a8:	b10b      	cbz	r3, 80071ae <__sflush_r+0x46>
 80071aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ac:	1ac0      	subs	r0, r0, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	4602      	mov	r2, r0
 80071b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071b4:	6a21      	ldr	r1, [r4, #32]
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b0      	blx	r6
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	d106      	bne.n	80071ce <__sflush_r+0x66>
 80071c0:	6829      	ldr	r1, [r5, #0]
 80071c2:	291d      	cmp	r1, #29
 80071c4:	d82c      	bhi.n	8007220 <__sflush_r+0xb8>
 80071c6:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <__sflush_r+0x108>)
 80071c8:	40ca      	lsrs	r2, r1
 80071ca:	07d6      	lsls	r6, r2, #31
 80071cc:	d528      	bpl.n	8007220 <__sflush_r+0xb8>
 80071ce:	2200      	movs	r2, #0
 80071d0:	6062      	str	r2, [r4, #4]
 80071d2:	04d9      	lsls	r1, r3, #19
 80071d4:	6922      	ldr	r2, [r4, #16]
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	d504      	bpl.n	80071e4 <__sflush_r+0x7c>
 80071da:	1c42      	adds	r2, r0, #1
 80071dc:	d101      	bne.n	80071e2 <__sflush_r+0x7a>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	b903      	cbnz	r3, 80071e4 <__sflush_r+0x7c>
 80071e2:	6560      	str	r0, [r4, #84]	; 0x54
 80071e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e6:	602f      	str	r7, [r5, #0]
 80071e8:	2900      	cmp	r1, #0
 80071ea:	d0ca      	beq.n	8007182 <__sflush_r+0x1a>
 80071ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071f0:	4299      	cmp	r1, r3
 80071f2:	d002      	beq.n	80071fa <__sflush_r+0x92>
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f897 	bl	8007328 <_free_r>
 80071fa:	2000      	movs	r0, #0
 80071fc:	6360      	str	r0, [r4, #52]	; 0x34
 80071fe:	e7c1      	b.n	8007184 <__sflush_r+0x1c>
 8007200:	6a21      	ldr	r1, [r4, #32]
 8007202:	2301      	movs	r3, #1
 8007204:	4628      	mov	r0, r5
 8007206:	47b0      	blx	r6
 8007208:	1c41      	adds	r1, r0, #1
 800720a:	d1c7      	bne.n	800719c <__sflush_r+0x34>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0c4      	beq.n	800719c <__sflush_r+0x34>
 8007212:	2b1d      	cmp	r3, #29
 8007214:	d001      	beq.n	800721a <__sflush_r+0xb2>
 8007216:	2b16      	cmp	r3, #22
 8007218:	d101      	bne.n	800721e <__sflush_r+0xb6>
 800721a:	602f      	str	r7, [r5, #0]
 800721c:	e7b1      	b.n	8007182 <__sflush_r+0x1a>
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	e7ad      	b.n	8007184 <__sflush_r+0x1c>
 8007228:	690f      	ldr	r7, [r1, #16]
 800722a:	2f00      	cmp	r7, #0
 800722c:	d0a9      	beq.n	8007182 <__sflush_r+0x1a>
 800722e:	0793      	lsls	r3, r2, #30
 8007230:	680e      	ldr	r6, [r1, #0]
 8007232:	bf08      	it	eq
 8007234:	694b      	ldreq	r3, [r1, #20]
 8007236:	600f      	str	r7, [r1, #0]
 8007238:	bf18      	it	ne
 800723a:	2300      	movne	r3, #0
 800723c:	eba6 0807 	sub.w	r8, r6, r7
 8007240:	608b      	str	r3, [r1, #8]
 8007242:	f1b8 0f00 	cmp.w	r8, #0
 8007246:	dd9c      	ble.n	8007182 <__sflush_r+0x1a>
 8007248:	6a21      	ldr	r1, [r4, #32]
 800724a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800724c:	4643      	mov	r3, r8
 800724e:	463a      	mov	r2, r7
 8007250:	4628      	mov	r0, r5
 8007252:	47b0      	blx	r6
 8007254:	2800      	cmp	r0, #0
 8007256:	dc06      	bgt.n	8007266 <__sflush_r+0xfe>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	e78e      	b.n	8007184 <__sflush_r+0x1c>
 8007266:	4407      	add	r7, r0
 8007268:	eba8 0800 	sub.w	r8, r8, r0
 800726c:	e7e9      	b.n	8007242 <__sflush_r+0xda>
 800726e:	bf00      	nop
 8007270:	20400001 	.word	0x20400001

08007274 <_fflush_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	690b      	ldr	r3, [r1, #16]
 8007278:	4605      	mov	r5, r0
 800727a:	460c      	mov	r4, r1
 800727c:	b913      	cbnz	r3, 8007284 <_fflush_r+0x10>
 800727e:	2500      	movs	r5, #0
 8007280:	4628      	mov	r0, r5
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	b118      	cbz	r0, 800728e <_fflush_r+0x1a>
 8007286:	6983      	ldr	r3, [r0, #24]
 8007288:	b90b      	cbnz	r3, 800728e <_fflush_r+0x1a>
 800728a:	f7ff fd2f 	bl	8006cec <__sinit>
 800728e:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <_fflush_r+0x6c>)
 8007290:	429c      	cmp	r4, r3
 8007292:	d11b      	bne.n	80072cc <_fflush_r+0x58>
 8007294:	686c      	ldr	r4, [r5, #4]
 8007296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0ef      	beq.n	800727e <_fflush_r+0xa>
 800729e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072a0:	07d0      	lsls	r0, r2, #31
 80072a2:	d404      	bmi.n	80072ae <_fflush_r+0x3a>
 80072a4:	0599      	lsls	r1, r3, #22
 80072a6:	d402      	bmi.n	80072ae <_fflush_r+0x3a>
 80072a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072aa:	f7ff fde2 	bl	8006e72 <__retarget_lock_acquire_recursive>
 80072ae:	4628      	mov	r0, r5
 80072b0:	4621      	mov	r1, r4
 80072b2:	f7ff ff59 	bl	8007168 <__sflush_r>
 80072b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072b8:	07da      	lsls	r2, r3, #31
 80072ba:	4605      	mov	r5, r0
 80072bc:	d4e0      	bmi.n	8007280 <_fflush_r+0xc>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	059b      	lsls	r3, r3, #22
 80072c2:	d4dd      	bmi.n	8007280 <_fflush_r+0xc>
 80072c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072c6:	f7ff fdd5 	bl	8006e74 <__retarget_lock_release_recursive>
 80072ca:	e7d9      	b.n	8007280 <_fflush_r+0xc>
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <_fflush_r+0x70>)
 80072ce:	429c      	cmp	r4, r3
 80072d0:	d101      	bne.n	80072d6 <_fflush_r+0x62>
 80072d2:	68ac      	ldr	r4, [r5, #8]
 80072d4:	e7df      	b.n	8007296 <_fflush_r+0x22>
 80072d6:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <_fflush_r+0x74>)
 80072d8:	429c      	cmp	r4, r3
 80072da:	bf08      	it	eq
 80072dc:	68ec      	ldreq	r4, [r5, #12]
 80072de:	e7da      	b.n	8007296 <_fflush_r+0x22>
 80072e0:	08008180 	.word	0x08008180
 80072e4:	080081a0 	.word	0x080081a0
 80072e8:	08008160 	.word	0x08008160

080072ec <_lseek_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4d07      	ldr	r5, [pc, #28]	; (800730c <_lseek_r+0x20>)
 80072f0:	4604      	mov	r4, r0
 80072f2:	4608      	mov	r0, r1
 80072f4:	4611      	mov	r1, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fa f9a6 	bl	800164c <_lseek>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_lseek_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_lseek_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	200044e8 	.word	0x200044e8

08007310 <__malloc_lock>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__malloc_lock+0x8>)
 8007312:	f7ff bdae 	b.w	8006e72 <__retarget_lock_acquire_recursive>
 8007316:	bf00      	nop
 8007318:	200044dc 	.word	0x200044dc

0800731c <__malloc_unlock>:
 800731c:	4801      	ldr	r0, [pc, #4]	; (8007324 <__malloc_unlock+0x8>)
 800731e:	f7ff bda9 	b.w	8006e74 <__retarget_lock_release_recursive>
 8007322:	bf00      	nop
 8007324:	200044dc 	.word	0x200044dc

08007328 <_free_r>:
 8007328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800732a:	2900      	cmp	r1, #0
 800732c:	d044      	beq.n	80073b8 <_free_r+0x90>
 800732e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007332:	9001      	str	r0, [sp, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f1a1 0404 	sub.w	r4, r1, #4
 800733a:	bfb8      	it	lt
 800733c:	18e4      	addlt	r4, r4, r3
 800733e:	f7ff ffe7 	bl	8007310 <__malloc_lock>
 8007342:	4a1e      	ldr	r2, [pc, #120]	; (80073bc <_free_r+0x94>)
 8007344:	9801      	ldr	r0, [sp, #4]
 8007346:	6813      	ldr	r3, [r2, #0]
 8007348:	b933      	cbnz	r3, 8007358 <_free_r+0x30>
 800734a:	6063      	str	r3, [r4, #4]
 800734c:	6014      	str	r4, [r2, #0]
 800734e:	b003      	add	sp, #12
 8007350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007354:	f7ff bfe2 	b.w	800731c <__malloc_unlock>
 8007358:	42a3      	cmp	r3, r4
 800735a:	d908      	bls.n	800736e <_free_r+0x46>
 800735c:	6825      	ldr	r5, [r4, #0]
 800735e:	1961      	adds	r1, r4, r5
 8007360:	428b      	cmp	r3, r1
 8007362:	bf01      	itttt	eq
 8007364:	6819      	ldreq	r1, [r3, #0]
 8007366:	685b      	ldreq	r3, [r3, #4]
 8007368:	1949      	addeq	r1, r1, r5
 800736a:	6021      	streq	r1, [r4, #0]
 800736c:	e7ed      	b.n	800734a <_free_r+0x22>
 800736e:	461a      	mov	r2, r3
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	b10b      	cbz	r3, 8007378 <_free_r+0x50>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d9fa      	bls.n	800736e <_free_r+0x46>
 8007378:	6811      	ldr	r1, [r2, #0]
 800737a:	1855      	adds	r5, r2, r1
 800737c:	42a5      	cmp	r5, r4
 800737e:	d10b      	bne.n	8007398 <_free_r+0x70>
 8007380:	6824      	ldr	r4, [r4, #0]
 8007382:	4421      	add	r1, r4
 8007384:	1854      	adds	r4, r2, r1
 8007386:	42a3      	cmp	r3, r4
 8007388:	6011      	str	r1, [r2, #0]
 800738a:	d1e0      	bne.n	800734e <_free_r+0x26>
 800738c:	681c      	ldr	r4, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	6053      	str	r3, [r2, #4]
 8007392:	4421      	add	r1, r4
 8007394:	6011      	str	r1, [r2, #0]
 8007396:	e7da      	b.n	800734e <_free_r+0x26>
 8007398:	d902      	bls.n	80073a0 <_free_r+0x78>
 800739a:	230c      	movs	r3, #12
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	e7d6      	b.n	800734e <_free_r+0x26>
 80073a0:	6825      	ldr	r5, [r4, #0]
 80073a2:	1961      	adds	r1, r4, r5
 80073a4:	428b      	cmp	r3, r1
 80073a6:	bf04      	itt	eq
 80073a8:	6819      	ldreq	r1, [r3, #0]
 80073aa:	685b      	ldreq	r3, [r3, #4]
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	bf04      	itt	eq
 80073b0:	1949      	addeq	r1, r1, r5
 80073b2:	6021      	streq	r1, [r4, #0]
 80073b4:	6054      	str	r4, [r2, #4]
 80073b6:	e7ca      	b.n	800734e <_free_r+0x26>
 80073b8:	b003      	add	sp, #12
 80073ba:	bd30      	pop	{r4, r5, pc}
 80073bc:	200044e0 	.word	0x200044e0

080073c0 <__ssputs_r>:
 80073c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	688e      	ldr	r6, [r1, #8]
 80073c6:	429e      	cmp	r6, r3
 80073c8:	4682      	mov	sl, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	4690      	mov	r8, r2
 80073ce:	461f      	mov	r7, r3
 80073d0:	d838      	bhi.n	8007444 <__ssputs_r+0x84>
 80073d2:	898a      	ldrh	r2, [r1, #12]
 80073d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073d8:	d032      	beq.n	8007440 <__ssputs_r+0x80>
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	6909      	ldr	r1, [r1, #16]
 80073de:	eba5 0901 	sub.w	r9, r5, r1
 80073e2:	6965      	ldr	r5, [r4, #20]
 80073e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073ec:	3301      	adds	r3, #1
 80073ee:	444b      	add	r3, r9
 80073f0:	106d      	asrs	r5, r5, #1
 80073f2:	429d      	cmp	r5, r3
 80073f4:	bf38      	it	cc
 80073f6:	461d      	movcc	r5, r3
 80073f8:	0553      	lsls	r3, r2, #21
 80073fa:	d531      	bpl.n	8007460 <__ssputs_r+0xa0>
 80073fc:	4629      	mov	r1, r5
 80073fe:	f7ff fd71 	bl	8006ee4 <_malloc_r>
 8007402:	4606      	mov	r6, r0
 8007404:	b950      	cbnz	r0, 800741c <__ssputs_r+0x5c>
 8007406:	230c      	movs	r3, #12
 8007408:	f8ca 3000 	str.w	r3, [sl]
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	6921      	ldr	r1, [r4, #16]
 800741e:	464a      	mov	r2, r9
 8007420:	f7ff fd29 	bl	8006e76 <memcpy>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800742a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	6126      	str	r6, [r4, #16]
 8007432:	6165      	str	r5, [r4, #20]
 8007434:	444e      	add	r6, r9
 8007436:	eba5 0509 	sub.w	r5, r5, r9
 800743a:	6026      	str	r6, [r4, #0]
 800743c:	60a5      	str	r5, [r4, #8]
 800743e:	463e      	mov	r6, r7
 8007440:	42be      	cmp	r6, r7
 8007442:	d900      	bls.n	8007446 <__ssputs_r+0x86>
 8007444:	463e      	mov	r6, r7
 8007446:	6820      	ldr	r0, [r4, #0]
 8007448:	4632      	mov	r2, r6
 800744a:	4641      	mov	r1, r8
 800744c:	f000 fd3a 	bl	8007ec4 <memmove>
 8007450:	68a3      	ldr	r3, [r4, #8]
 8007452:	1b9b      	subs	r3, r3, r6
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	4433      	add	r3, r6
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	2000      	movs	r0, #0
 800745e:	e7db      	b.n	8007418 <__ssputs_r+0x58>
 8007460:	462a      	mov	r2, r5
 8007462:	f000 fd49 	bl	8007ef8 <_realloc_r>
 8007466:	4606      	mov	r6, r0
 8007468:	2800      	cmp	r0, #0
 800746a:	d1e1      	bne.n	8007430 <__ssputs_r+0x70>
 800746c:	6921      	ldr	r1, [r4, #16]
 800746e:	4650      	mov	r0, sl
 8007470:	f7ff ff5a 	bl	8007328 <_free_r>
 8007474:	e7c7      	b.n	8007406 <__ssputs_r+0x46>
	...

08007478 <_svfiprintf_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	4698      	mov	r8, r3
 800747e:	898b      	ldrh	r3, [r1, #12]
 8007480:	061b      	lsls	r3, r3, #24
 8007482:	b09d      	sub	sp, #116	; 0x74
 8007484:	4607      	mov	r7, r0
 8007486:	460d      	mov	r5, r1
 8007488:	4614      	mov	r4, r2
 800748a:	d50e      	bpl.n	80074aa <_svfiprintf_r+0x32>
 800748c:	690b      	ldr	r3, [r1, #16]
 800748e:	b963      	cbnz	r3, 80074aa <_svfiprintf_r+0x32>
 8007490:	2140      	movs	r1, #64	; 0x40
 8007492:	f7ff fd27 	bl	8006ee4 <_malloc_r>
 8007496:	6028      	str	r0, [r5, #0]
 8007498:	6128      	str	r0, [r5, #16]
 800749a:	b920      	cbnz	r0, 80074a6 <_svfiprintf_r+0x2e>
 800749c:	230c      	movs	r3, #12
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e0d1      	b.n	800764a <_svfiprintf_r+0x1d2>
 80074a6:	2340      	movs	r3, #64	; 0x40
 80074a8:	616b      	str	r3, [r5, #20]
 80074aa:	2300      	movs	r3, #0
 80074ac:	9309      	str	r3, [sp, #36]	; 0x24
 80074ae:	2320      	movs	r3, #32
 80074b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b8:	2330      	movs	r3, #48	; 0x30
 80074ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007664 <_svfiprintf_r+0x1ec>
 80074be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c2:	f04f 0901 	mov.w	r9, #1
 80074c6:	4623      	mov	r3, r4
 80074c8:	469a      	mov	sl, r3
 80074ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ce:	b10a      	cbz	r2, 80074d4 <_svfiprintf_r+0x5c>
 80074d0:	2a25      	cmp	r2, #37	; 0x25
 80074d2:	d1f9      	bne.n	80074c8 <_svfiprintf_r+0x50>
 80074d4:	ebba 0b04 	subs.w	fp, sl, r4
 80074d8:	d00b      	beq.n	80074f2 <_svfiprintf_r+0x7a>
 80074da:	465b      	mov	r3, fp
 80074dc:	4622      	mov	r2, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	4638      	mov	r0, r7
 80074e2:	f7ff ff6d 	bl	80073c0 <__ssputs_r>
 80074e6:	3001      	adds	r0, #1
 80074e8:	f000 80aa 	beq.w	8007640 <_svfiprintf_r+0x1c8>
 80074ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ee:	445a      	add	r2, fp
 80074f0:	9209      	str	r2, [sp, #36]	; 0x24
 80074f2:	f89a 3000 	ldrb.w	r3, [sl]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80a2 	beq.w	8007640 <_svfiprintf_r+0x1c8>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007506:	f10a 0a01 	add.w	sl, sl, #1
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007512:	931a      	str	r3, [sp, #104]	; 0x68
 8007514:	4654      	mov	r4, sl
 8007516:	2205      	movs	r2, #5
 8007518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751c:	4851      	ldr	r0, [pc, #324]	; (8007664 <_svfiprintf_r+0x1ec>)
 800751e:	f7f8 fe5f 	bl	80001e0 <memchr>
 8007522:	9a04      	ldr	r2, [sp, #16]
 8007524:	b9d8      	cbnz	r0, 800755e <_svfiprintf_r+0xe6>
 8007526:	06d0      	lsls	r0, r2, #27
 8007528:	bf44      	itt	mi
 800752a:	2320      	movmi	r3, #32
 800752c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007530:	0711      	lsls	r1, r2, #28
 8007532:	bf44      	itt	mi
 8007534:	232b      	movmi	r3, #43	; 0x2b
 8007536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800753a:	f89a 3000 	ldrb.w	r3, [sl]
 800753e:	2b2a      	cmp	r3, #42	; 0x2a
 8007540:	d015      	beq.n	800756e <_svfiprintf_r+0xf6>
 8007542:	9a07      	ldr	r2, [sp, #28]
 8007544:	4654      	mov	r4, sl
 8007546:	2000      	movs	r0, #0
 8007548:	f04f 0c0a 	mov.w	ip, #10
 800754c:	4621      	mov	r1, r4
 800754e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007552:	3b30      	subs	r3, #48	; 0x30
 8007554:	2b09      	cmp	r3, #9
 8007556:	d94e      	bls.n	80075f6 <_svfiprintf_r+0x17e>
 8007558:	b1b0      	cbz	r0, 8007588 <_svfiprintf_r+0x110>
 800755a:	9207      	str	r2, [sp, #28]
 800755c:	e014      	b.n	8007588 <_svfiprintf_r+0x110>
 800755e:	eba0 0308 	sub.w	r3, r0, r8
 8007562:	fa09 f303 	lsl.w	r3, r9, r3
 8007566:	4313      	orrs	r3, r2
 8007568:	9304      	str	r3, [sp, #16]
 800756a:	46a2      	mov	sl, r4
 800756c:	e7d2      	b.n	8007514 <_svfiprintf_r+0x9c>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	1d19      	adds	r1, r3, #4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	9103      	str	r1, [sp, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bfbb      	ittet	lt
 800757a:	425b      	neglt	r3, r3
 800757c:	f042 0202 	orrlt.w	r2, r2, #2
 8007580:	9307      	strge	r3, [sp, #28]
 8007582:	9307      	strlt	r3, [sp, #28]
 8007584:	bfb8      	it	lt
 8007586:	9204      	strlt	r2, [sp, #16]
 8007588:	7823      	ldrb	r3, [r4, #0]
 800758a:	2b2e      	cmp	r3, #46	; 0x2e
 800758c:	d10c      	bne.n	80075a8 <_svfiprintf_r+0x130>
 800758e:	7863      	ldrb	r3, [r4, #1]
 8007590:	2b2a      	cmp	r3, #42	; 0x2a
 8007592:	d135      	bne.n	8007600 <_svfiprintf_r+0x188>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	1d1a      	adds	r2, r3, #4
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	9203      	str	r2, [sp, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	bfb8      	it	lt
 80075a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a4:	3402      	adds	r4, #2
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007674 <_svfiprintf_r+0x1fc>
 80075ac:	7821      	ldrb	r1, [r4, #0]
 80075ae:	2203      	movs	r2, #3
 80075b0:	4650      	mov	r0, sl
 80075b2:	f7f8 fe15 	bl	80001e0 <memchr>
 80075b6:	b140      	cbz	r0, 80075ca <_svfiprintf_r+0x152>
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	eba0 000a 	sub.w	r0, r0, sl
 80075be:	fa03 f000 	lsl.w	r0, r3, r0
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	4303      	orrs	r3, r0
 80075c6:	3401      	adds	r4, #1
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ce:	4826      	ldr	r0, [pc, #152]	; (8007668 <_svfiprintf_r+0x1f0>)
 80075d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075d4:	2206      	movs	r2, #6
 80075d6:	f7f8 fe03 	bl	80001e0 <memchr>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d038      	beq.n	8007650 <_svfiprintf_r+0x1d8>
 80075de:	4b23      	ldr	r3, [pc, #140]	; (800766c <_svfiprintf_r+0x1f4>)
 80075e0:	bb1b      	cbnz	r3, 800762a <_svfiprintf_r+0x1b2>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	3307      	adds	r3, #7
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	3308      	adds	r3, #8
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	4433      	add	r3, r6
 80075f2:	9309      	str	r3, [sp, #36]	; 0x24
 80075f4:	e767      	b.n	80074c6 <_svfiprintf_r+0x4e>
 80075f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fa:	460c      	mov	r4, r1
 80075fc:	2001      	movs	r0, #1
 80075fe:	e7a5      	b.n	800754c <_svfiprintf_r+0xd4>
 8007600:	2300      	movs	r3, #0
 8007602:	3401      	adds	r4, #1
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	4619      	mov	r1, r3
 8007608:	f04f 0c0a 	mov.w	ip, #10
 800760c:	4620      	mov	r0, r4
 800760e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007612:	3a30      	subs	r2, #48	; 0x30
 8007614:	2a09      	cmp	r2, #9
 8007616:	d903      	bls.n	8007620 <_svfiprintf_r+0x1a8>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0c5      	beq.n	80075a8 <_svfiprintf_r+0x130>
 800761c:	9105      	str	r1, [sp, #20]
 800761e:	e7c3      	b.n	80075a8 <_svfiprintf_r+0x130>
 8007620:	fb0c 2101 	mla	r1, ip, r1, r2
 8007624:	4604      	mov	r4, r0
 8007626:	2301      	movs	r3, #1
 8007628:	e7f0      	b.n	800760c <_svfiprintf_r+0x194>
 800762a:	ab03      	add	r3, sp, #12
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	462a      	mov	r2, r5
 8007630:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <_svfiprintf_r+0x1f8>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	4638      	mov	r0, r7
 8007636:	f3af 8000 	nop.w
 800763a:	1c42      	adds	r2, r0, #1
 800763c:	4606      	mov	r6, r0
 800763e:	d1d6      	bne.n	80075ee <_svfiprintf_r+0x176>
 8007640:	89ab      	ldrh	r3, [r5, #12]
 8007642:	065b      	lsls	r3, r3, #25
 8007644:	f53f af2c 	bmi.w	80074a0 <_svfiprintf_r+0x28>
 8007648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800764a:	b01d      	add	sp, #116	; 0x74
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007650:	ab03      	add	r3, sp, #12
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	462a      	mov	r2, r5
 8007656:	4b06      	ldr	r3, [pc, #24]	; (8007670 <_svfiprintf_r+0x1f8>)
 8007658:	a904      	add	r1, sp, #16
 800765a:	4638      	mov	r0, r7
 800765c:	f000 f9d4 	bl	8007a08 <_printf_i>
 8007660:	e7eb      	b.n	800763a <_svfiprintf_r+0x1c2>
 8007662:	bf00      	nop
 8007664:	080081c4 	.word	0x080081c4
 8007668:	080081ce 	.word	0x080081ce
 800766c:	00000000 	.word	0x00000000
 8007670:	080073c1 	.word	0x080073c1
 8007674:	080081ca 	.word	0x080081ca

08007678 <__sfputc_r>:
 8007678:	6893      	ldr	r3, [r2, #8]
 800767a:	3b01      	subs	r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	b410      	push	{r4}
 8007680:	6093      	str	r3, [r2, #8]
 8007682:	da08      	bge.n	8007696 <__sfputc_r+0x1e>
 8007684:	6994      	ldr	r4, [r2, #24]
 8007686:	42a3      	cmp	r3, r4
 8007688:	db01      	blt.n	800768e <__sfputc_r+0x16>
 800768a:	290a      	cmp	r1, #10
 800768c:	d103      	bne.n	8007696 <__sfputc_r+0x1e>
 800768e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007692:	f000 baf1 	b.w	8007c78 <__swbuf_r>
 8007696:	6813      	ldr	r3, [r2, #0]
 8007698:	1c58      	adds	r0, r3, #1
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	7019      	strb	r1, [r3, #0]
 800769e:	4608      	mov	r0, r1
 80076a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <__sfputs_r>:
 80076a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a8:	4606      	mov	r6, r0
 80076aa:	460f      	mov	r7, r1
 80076ac:	4614      	mov	r4, r2
 80076ae:	18d5      	adds	r5, r2, r3
 80076b0:	42ac      	cmp	r4, r5
 80076b2:	d101      	bne.n	80076b8 <__sfputs_r+0x12>
 80076b4:	2000      	movs	r0, #0
 80076b6:	e007      	b.n	80076c8 <__sfputs_r+0x22>
 80076b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076bc:	463a      	mov	r2, r7
 80076be:	4630      	mov	r0, r6
 80076c0:	f7ff ffda 	bl	8007678 <__sfputc_r>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d1f3      	bne.n	80076b0 <__sfputs_r+0xa>
 80076c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076cc <_vfiprintf_r>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	460d      	mov	r5, r1
 80076d2:	b09d      	sub	sp, #116	; 0x74
 80076d4:	4614      	mov	r4, r2
 80076d6:	4698      	mov	r8, r3
 80076d8:	4606      	mov	r6, r0
 80076da:	b118      	cbz	r0, 80076e4 <_vfiprintf_r+0x18>
 80076dc:	6983      	ldr	r3, [r0, #24]
 80076de:	b90b      	cbnz	r3, 80076e4 <_vfiprintf_r+0x18>
 80076e0:	f7ff fb04 	bl	8006cec <__sinit>
 80076e4:	4b89      	ldr	r3, [pc, #548]	; (800790c <_vfiprintf_r+0x240>)
 80076e6:	429d      	cmp	r5, r3
 80076e8:	d11b      	bne.n	8007722 <_vfiprintf_r+0x56>
 80076ea:	6875      	ldr	r5, [r6, #4]
 80076ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_vfiprintf_r+0x32>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	059a      	lsls	r2, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_vfiprintf_r+0x32>
 80076f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076fa:	f7ff fbba 	bl	8006e72 <__retarget_lock_acquire_recursive>
 80076fe:	89ab      	ldrh	r3, [r5, #12]
 8007700:	071b      	lsls	r3, r3, #28
 8007702:	d501      	bpl.n	8007708 <_vfiprintf_r+0x3c>
 8007704:	692b      	ldr	r3, [r5, #16]
 8007706:	b9eb      	cbnz	r3, 8007744 <_vfiprintf_r+0x78>
 8007708:	4629      	mov	r1, r5
 800770a:	4630      	mov	r0, r6
 800770c:	f000 fb06 	bl	8007d1c <__swsetup_r>
 8007710:	b1c0      	cbz	r0, 8007744 <_vfiprintf_r+0x78>
 8007712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007714:	07dc      	lsls	r4, r3, #31
 8007716:	d50e      	bpl.n	8007736 <_vfiprintf_r+0x6a>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	b01d      	add	sp, #116	; 0x74
 800771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007722:	4b7b      	ldr	r3, [pc, #492]	; (8007910 <_vfiprintf_r+0x244>)
 8007724:	429d      	cmp	r5, r3
 8007726:	d101      	bne.n	800772c <_vfiprintf_r+0x60>
 8007728:	68b5      	ldr	r5, [r6, #8]
 800772a:	e7df      	b.n	80076ec <_vfiprintf_r+0x20>
 800772c:	4b79      	ldr	r3, [pc, #484]	; (8007914 <_vfiprintf_r+0x248>)
 800772e:	429d      	cmp	r5, r3
 8007730:	bf08      	it	eq
 8007732:	68f5      	ldreq	r5, [r6, #12]
 8007734:	e7da      	b.n	80076ec <_vfiprintf_r+0x20>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	0598      	lsls	r0, r3, #22
 800773a:	d4ed      	bmi.n	8007718 <_vfiprintf_r+0x4c>
 800773c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773e:	f7ff fb99 	bl	8006e74 <__retarget_lock_release_recursive>
 8007742:	e7e9      	b.n	8007718 <_vfiprintf_r+0x4c>
 8007744:	2300      	movs	r3, #0
 8007746:	9309      	str	r3, [sp, #36]	; 0x24
 8007748:	2320      	movs	r3, #32
 800774a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800774e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007752:	2330      	movs	r3, #48	; 0x30
 8007754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007918 <_vfiprintf_r+0x24c>
 8007758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800775c:	f04f 0901 	mov.w	r9, #1
 8007760:	4623      	mov	r3, r4
 8007762:	469a      	mov	sl, r3
 8007764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007768:	b10a      	cbz	r2, 800776e <_vfiprintf_r+0xa2>
 800776a:	2a25      	cmp	r2, #37	; 0x25
 800776c:	d1f9      	bne.n	8007762 <_vfiprintf_r+0x96>
 800776e:	ebba 0b04 	subs.w	fp, sl, r4
 8007772:	d00b      	beq.n	800778c <_vfiprintf_r+0xc0>
 8007774:	465b      	mov	r3, fp
 8007776:	4622      	mov	r2, r4
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f7ff ff93 	bl	80076a6 <__sfputs_r>
 8007780:	3001      	adds	r0, #1
 8007782:	f000 80aa 	beq.w	80078da <_vfiprintf_r+0x20e>
 8007786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007788:	445a      	add	r2, fp
 800778a:	9209      	str	r2, [sp, #36]	; 0x24
 800778c:	f89a 3000 	ldrb.w	r3, [sl]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80a2 	beq.w	80078da <_vfiprintf_r+0x20e>
 8007796:	2300      	movs	r3, #0
 8007798:	f04f 32ff 	mov.w	r2, #4294967295
 800779c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a0:	f10a 0a01 	add.w	sl, sl, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ac:	931a      	str	r3, [sp, #104]	; 0x68
 80077ae:	4654      	mov	r4, sl
 80077b0:	2205      	movs	r2, #5
 80077b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b6:	4858      	ldr	r0, [pc, #352]	; (8007918 <_vfiprintf_r+0x24c>)
 80077b8:	f7f8 fd12 	bl	80001e0 <memchr>
 80077bc:	9a04      	ldr	r2, [sp, #16]
 80077be:	b9d8      	cbnz	r0, 80077f8 <_vfiprintf_r+0x12c>
 80077c0:	06d1      	lsls	r1, r2, #27
 80077c2:	bf44      	itt	mi
 80077c4:	2320      	movmi	r3, #32
 80077c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ca:	0713      	lsls	r3, r2, #28
 80077cc:	bf44      	itt	mi
 80077ce:	232b      	movmi	r3, #43	; 0x2b
 80077d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d4:	f89a 3000 	ldrb.w	r3, [sl]
 80077d8:	2b2a      	cmp	r3, #42	; 0x2a
 80077da:	d015      	beq.n	8007808 <_vfiprintf_r+0x13c>
 80077dc:	9a07      	ldr	r2, [sp, #28]
 80077de:	4654      	mov	r4, sl
 80077e0:	2000      	movs	r0, #0
 80077e2:	f04f 0c0a 	mov.w	ip, #10
 80077e6:	4621      	mov	r1, r4
 80077e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ec:	3b30      	subs	r3, #48	; 0x30
 80077ee:	2b09      	cmp	r3, #9
 80077f0:	d94e      	bls.n	8007890 <_vfiprintf_r+0x1c4>
 80077f2:	b1b0      	cbz	r0, 8007822 <_vfiprintf_r+0x156>
 80077f4:	9207      	str	r2, [sp, #28]
 80077f6:	e014      	b.n	8007822 <_vfiprintf_r+0x156>
 80077f8:	eba0 0308 	sub.w	r3, r0, r8
 80077fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	9304      	str	r3, [sp, #16]
 8007804:	46a2      	mov	sl, r4
 8007806:	e7d2      	b.n	80077ae <_vfiprintf_r+0xe2>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	1d19      	adds	r1, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9103      	str	r1, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfbb      	ittet	lt
 8007814:	425b      	neglt	r3, r3
 8007816:	f042 0202 	orrlt.w	r2, r2, #2
 800781a:	9307      	strge	r3, [sp, #28]
 800781c:	9307      	strlt	r3, [sp, #28]
 800781e:	bfb8      	it	lt
 8007820:	9204      	strlt	r2, [sp, #16]
 8007822:	7823      	ldrb	r3, [r4, #0]
 8007824:	2b2e      	cmp	r3, #46	; 0x2e
 8007826:	d10c      	bne.n	8007842 <_vfiprintf_r+0x176>
 8007828:	7863      	ldrb	r3, [r4, #1]
 800782a:	2b2a      	cmp	r3, #42	; 0x2a
 800782c:	d135      	bne.n	800789a <_vfiprintf_r+0x1ce>
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	1d1a      	adds	r2, r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	9203      	str	r2, [sp, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfb8      	it	lt
 800783a:	f04f 33ff 	movlt.w	r3, #4294967295
 800783e:	3402      	adds	r4, #2
 8007840:	9305      	str	r3, [sp, #20]
 8007842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007928 <_vfiprintf_r+0x25c>
 8007846:	7821      	ldrb	r1, [r4, #0]
 8007848:	2203      	movs	r2, #3
 800784a:	4650      	mov	r0, sl
 800784c:	f7f8 fcc8 	bl	80001e0 <memchr>
 8007850:	b140      	cbz	r0, 8007864 <_vfiprintf_r+0x198>
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	eba0 000a 	sub.w	r0, r0, sl
 8007858:	fa03 f000 	lsl.w	r0, r3, r0
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	4303      	orrs	r3, r0
 8007860:	3401      	adds	r4, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007868:	482c      	ldr	r0, [pc, #176]	; (800791c <_vfiprintf_r+0x250>)
 800786a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800786e:	2206      	movs	r2, #6
 8007870:	f7f8 fcb6 	bl	80001e0 <memchr>
 8007874:	2800      	cmp	r0, #0
 8007876:	d03f      	beq.n	80078f8 <_vfiprintf_r+0x22c>
 8007878:	4b29      	ldr	r3, [pc, #164]	; (8007920 <_vfiprintf_r+0x254>)
 800787a:	bb1b      	cbnz	r3, 80078c4 <_vfiprintf_r+0x1f8>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	3307      	adds	r3, #7
 8007880:	f023 0307 	bic.w	r3, r3, #7
 8007884:	3308      	adds	r3, #8
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788a:	443b      	add	r3, r7
 800788c:	9309      	str	r3, [sp, #36]	; 0x24
 800788e:	e767      	b.n	8007760 <_vfiprintf_r+0x94>
 8007890:	fb0c 3202 	mla	r2, ip, r2, r3
 8007894:	460c      	mov	r4, r1
 8007896:	2001      	movs	r0, #1
 8007898:	e7a5      	b.n	80077e6 <_vfiprintf_r+0x11a>
 800789a:	2300      	movs	r3, #0
 800789c:	3401      	adds	r4, #1
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	4619      	mov	r1, r3
 80078a2:	f04f 0c0a 	mov.w	ip, #10
 80078a6:	4620      	mov	r0, r4
 80078a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ac:	3a30      	subs	r2, #48	; 0x30
 80078ae:	2a09      	cmp	r2, #9
 80078b0:	d903      	bls.n	80078ba <_vfiprintf_r+0x1ee>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0c5      	beq.n	8007842 <_vfiprintf_r+0x176>
 80078b6:	9105      	str	r1, [sp, #20]
 80078b8:	e7c3      	b.n	8007842 <_vfiprintf_r+0x176>
 80078ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80078be:	4604      	mov	r4, r0
 80078c0:	2301      	movs	r3, #1
 80078c2:	e7f0      	b.n	80078a6 <_vfiprintf_r+0x1da>
 80078c4:	ab03      	add	r3, sp, #12
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	462a      	mov	r2, r5
 80078ca:	4b16      	ldr	r3, [pc, #88]	; (8007924 <_vfiprintf_r+0x258>)
 80078cc:	a904      	add	r1, sp, #16
 80078ce:	4630      	mov	r0, r6
 80078d0:	f3af 8000 	nop.w
 80078d4:	4607      	mov	r7, r0
 80078d6:	1c78      	adds	r0, r7, #1
 80078d8:	d1d6      	bne.n	8007888 <_vfiprintf_r+0x1bc>
 80078da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078dc:	07d9      	lsls	r1, r3, #31
 80078de:	d405      	bmi.n	80078ec <_vfiprintf_r+0x220>
 80078e0:	89ab      	ldrh	r3, [r5, #12]
 80078e2:	059a      	lsls	r2, r3, #22
 80078e4:	d402      	bmi.n	80078ec <_vfiprintf_r+0x220>
 80078e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e8:	f7ff fac4 	bl	8006e74 <__retarget_lock_release_recursive>
 80078ec:	89ab      	ldrh	r3, [r5, #12]
 80078ee:	065b      	lsls	r3, r3, #25
 80078f0:	f53f af12 	bmi.w	8007718 <_vfiprintf_r+0x4c>
 80078f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f6:	e711      	b.n	800771c <_vfiprintf_r+0x50>
 80078f8:	ab03      	add	r3, sp, #12
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	462a      	mov	r2, r5
 80078fe:	4b09      	ldr	r3, [pc, #36]	; (8007924 <_vfiprintf_r+0x258>)
 8007900:	a904      	add	r1, sp, #16
 8007902:	4630      	mov	r0, r6
 8007904:	f000 f880 	bl	8007a08 <_printf_i>
 8007908:	e7e4      	b.n	80078d4 <_vfiprintf_r+0x208>
 800790a:	bf00      	nop
 800790c:	08008180 	.word	0x08008180
 8007910:	080081a0 	.word	0x080081a0
 8007914:	08008160 	.word	0x08008160
 8007918:	080081c4 	.word	0x080081c4
 800791c:	080081ce 	.word	0x080081ce
 8007920:	00000000 	.word	0x00000000
 8007924:	080076a7 	.word	0x080076a7
 8007928:	080081ca 	.word	0x080081ca

0800792c <_printf_common>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	4616      	mov	r6, r2
 8007932:	4699      	mov	r9, r3
 8007934:	688a      	ldr	r2, [r1, #8]
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800793c:	4293      	cmp	r3, r2
 800793e:	bfb8      	it	lt
 8007940:	4613      	movlt	r3, r2
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007948:	4607      	mov	r7, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b10a      	cbz	r2, 8007952 <_printf_common+0x26>
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	0699      	lsls	r1, r3, #26
 8007956:	bf42      	ittt	mi
 8007958:	6833      	ldrmi	r3, [r6, #0]
 800795a:	3302      	addmi	r3, #2
 800795c:	6033      	strmi	r3, [r6, #0]
 800795e:	6825      	ldr	r5, [r4, #0]
 8007960:	f015 0506 	ands.w	r5, r5, #6
 8007964:	d106      	bne.n	8007974 <_printf_common+0x48>
 8007966:	f104 0a19 	add.w	sl, r4, #25
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dc26      	bgt.n	80079c2 <_printf_common+0x96>
 8007974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007978:	1e13      	subs	r3, r2, #0
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	bf18      	it	ne
 800797e:	2301      	movne	r3, #1
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d42b      	bmi.n	80079dc <_printf_common+0xb0>
 8007984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007988:	4649      	mov	r1, r9
 800798a:	4638      	mov	r0, r7
 800798c:	47c0      	blx	r8
 800798e:	3001      	adds	r0, #1
 8007990:	d01e      	beq.n	80079d0 <_printf_common+0xa4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	68e5      	ldr	r5, [r4, #12]
 8007996:	6832      	ldr	r2, [r6, #0]
 8007998:	f003 0306 	and.w	r3, r3, #6
 800799c:	2b04      	cmp	r3, #4
 800799e:	bf08      	it	eq
 80079a0:	1aad      	subeq	r5, r5, r2
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	6922      	ldr	r2, [r4, #16]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	2600      	movs	r6, #0
 80079b8:	341a      	adds	r4, #26
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d11a      	bne.n	80079f4 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e008      	b.n	80079d4 <_printf_common+0xa8>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4649      	mov	r1, r9
 80079c8:	4638      	mov	r0, r7
 80079ca:	47c0      	blx	r8
 80079cc:	3001      	adds	r0, #1
 80079ce:	d103      	bne.n	80079d8 <_printf_common+0xac>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	3501      	adds	r5, #1
 80079da:	e7c6      	b.n	800796a <_printf_common+0x3e>
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	2030      	movs	r0, #48	; 0x30
 80079e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e6:	4422      	add	r2, r4
 80079e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7c7      	b.n	8007984 <_printf_common+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4622      	mov	r2, r4
 80079f8:	4649      	mov	r1, r9
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c0      	blx	r8
 80079fe:	3001      	adds	r0, #1
 8007a00:	d0e6      	beq.n	80079d0 <_printf_common+0xa4>
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7d9      	b.n	80079ba <_printf_common+0x8e>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	7e0f      	ldrb	r7, [r1, #24]
 8007a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a10:	2f78      	cmp	r7, #120	; 0x78
 8007a12:	4691      	mov	r9, r2
 8007a14:	4680      	mov	r8, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	469a      	mov	sl, r3
 8007a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a1e:	d807      	bhi.n	8007a30 <_printf_i+0x28>
 8007a20:	2f62      	cmp	r7, #98	; 0x62
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x32>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 80d8 	beq.w	8007bda <_printf_i+0x1d2>
 8007a2a:	2f58      	cmp	r7, #88	; 0x58
 8007a2c:	f000 80a3 	beq.w	8007b76 <_printf_i+0x16e>
 8007a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a38:	e03a      	b.n	8007ab0 <_printf_i+0xa8>
 8007a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a3e:	2b15      	cmp	r3, #21
 8007a40:	d8f6      	bhi.n	8007a30 <_printf_i+0x28>
 8007a42:	a101      	add	r1, pc, #4	; (adr r1, 8007a48 <_printf_i+0x40>)
 8007a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007a31 	.word	0x08007a31
 8007a54:	08007a31 	.word	0x08007a31
 8007a58:	08007a31 	.word	0x08007a31
 8007a5c:	08007a31 	.word	0x08007a31
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a31 	.word	0x08007a31
 8007a68:	08007a31 	.word	0x08007a31
 8007a6c:	08007a31 	.word	0x08007a31
 8007a70:	08007a31 	.word	0x08007a31
 8007a74:	08007bc1 	.word	0x08007bc1
 8007a78:	08007ae5 	.word	0x08007ae5
 8007a7c:	08007ba3 	.word	0x08007ba3
 8007a80:	08007a31 	.word	0x08007a31
 8007a84:	08007a31 	.word	0x08007a31
 8007a88:	08007be3 	.word	0x08007be3
 8007a8c:	08007a31 	.word	0x08007a31
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007a31 	.word	0x08007a31
 8007a98:	08007a31 	.word	0x08007a31
 8007a9c:	08007bab 	.word	0x08007bab
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	602a      	str	r2, [r5, #0]
 8007aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0a3      	b.n	8007bfc <_printf_i+0x1f4>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	6829      	ldr	r1, [r5, #0]
 8007ab8:	0606      	lsls	r6, r0, #24
 8007aba:	f101 0304 	add.w	r3, r1, #4
 8007abe:	d50a      	bpl.n	8007ad6 <_printf_i+0xce>
 8007ac0:	680e      	ldr	r6, [r1, #0]
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	2e00      	cmp	r6, #0
 8007ac6:	da03      	bge.n	8007ad0 <_printf_i+0xc8>
 8007ac8:	232d      	movs	r3, #45	; 0x2d
 8007aca:	4276      	negs	r6, r6
 8007acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad0:	485e      	ldr	r0, [pc, #376]	; (8007c4c <_printf_i+0x244>)
 8007ad2:	230a      	movs	r3, #10
 8007ad4:	e019      	b.n	8007b0a <_printf_i+0x102>
 8007ad6:	680e      	ldr	r6, [r1, #0]
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ade:	bf18      	it	ne
 8007ae0:	b236      	sxthne	r6, r6
 8007ae2:	e7ef      	b.n	8007ac4 <_printf_i+0xbc>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	6820      	ldr	r0, [r4, #0]
 8007ae8:	1d19      	adds	r1, r3, #4
 8007aea:	6029      	str	r1, [r5, #0]
 8007aec:	0601      	lsls	r1, r0, #24
 8007aee:	d501      	bpl.n	8007af4 <_printf_i+0xec>
 8007af0:	681e      	ldr	r6, [r3, #0]
 8007af2:	e002      	b.n	8007afa <_printf_i+0xf2>
 8007af4:	0646      	lsls	r6, r0, #25
 8007af6:	d5fb      	bpl.n	8007af0 <_printf_i+0xe8>
 8007af8:	881e      	ldrh	r6, [r3, #0]
 8007afa:	4854      	ldr	r0, [pc, #336]	; (8007c4c <_printf_i+0x244>)
 8007afc:	2f6f      	cmp	r7, #111	; 0x6f
 8007afe:	bf0c      	ite	eq
 8007b00:	2308      	moveq	r3, #8
 8007b02:	230a      	movne	r3, #10
 8007b04:	2100      	movs	r1, #0
 8007b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b0a:	6865      	ldr	r5, [r4, #4]
 8007b0c:	60a5      	str	r5, [r4, #8]
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	bfa2      	ittt	ge
 8007b12:	6821      	ldrge	r1, [r4, #0]
 8007b14:	f021 0104 	bicge.w	r1, r1, #4
 8007b18:	6021      	strge	r1, [r4, #0]
 8007b1a:	b90e      	cbnz	r6, 8007b20 <_printf_i+0x118>
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	d04d      	beq.n	8007bbc <_printf_i+0x1b4>
 8007b20:	4615      	mov	r5, r2
 8007b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b26:	fb03 6711 	mls	r7, r3, r1, r6
 8007b2a:	5dc7      	ldrb	r7, [r0, r7]
 8007b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b30:	4637      	mov	r7, r6
 8007b32:	42bb      	cmp	r3, r7
 8007b34:	460e      	mov	r6, r1
 8007b36:	d9f4      	bls.n	8007b22 <_printf_i+0x11a>
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d10b      	bne.n	8007b54 <_printf_i+0x14c>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	07de      	lsls	r6, r3, #31
 8007b40:	d508      	bpl.n	8007b54 <_printf_i+0x14c>
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	6861      	ldr	r1, [r4, #4]
 8007b46:	4299      	cmp	r1, r3
 8007b48:	bfde      	ittt	le
 8007b4a:	2330      	movle	r3, #48	; 0x30
 8007b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b54:	1b52      	subs	r2, r2, r5
 8007b56:	6122      	str	r2, [r4, #16]
 8007b58:	f8cd a000 	str.w	sl, [sp]
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	aa03      	add	r2, sp, #12
 8007b60:	4621      	mov	r1, r4
 8007b62:	4640      	mov	r0, r8
 8007b64:	f7ff fee2 	bl	800792c <_printf_common>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d14c      	bne.n	8007c06 <_printf_i+0x1fe>
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	b004      	add	sp, #16
 8007b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b76:	4835      	ldr	r0, [pc, #212]	; (8007c4c <_printf_i+0x244>)
 8007b78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b7c:	6829      	ldr	r1, [r5, #0]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b84:	6029      	str	r1, [r5, #0]
 8007b86:	061d      	lsls	r5, r3, #24
 8007b88:	d514      	bpl.n	8007bb4 <_printf_i+0x1ac>
 8007b8a:	07df      	lsls	r7, r3, #31
 8007b8c:	bf44      	itt	mi
 8007b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b92:	6023      	strmi	r3, [r4, #0]
 8007b94:	b91e      	cbnz	r6, 8007b9e <_printf_i+0x196>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f023 0320 	bic.w	r3, r3, #32
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	2310      	movs	r3, #16
 8007ba0:	e7b0      	b.n	8007b04 <_printf_i+0xfc>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	f043 0320 	orr.w	r3, r3, #32
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	2378      	movs	r3, #120	; 0x78
 8007bac:	4828      	ldr	r0, [pc, #160]	; (8007c50 <_printf_i+0x248>)
 8007bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bb2:	e7e3      	b.n	8007b7c <_printf_i+0x174>
 8007bb4:	0659      	lsls	r1, r3, #25
 8007bb6:	bf48      	it	mi
 8007bb8:	b2b6      	uxthmi	r6, r6
 8007bba:	e7e6      	b.n	8007b8a <_printf_i+0x182>
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	e7bb      	b.n	8007b38 <_printf_i+0x130>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	6826      	ldr	r6, [r4, #0]
 8007bc4:	6961      	ldr	r1, [r4, #20]
 8007bc6:	1d18      	adds	r0, r3, #4
 8007bc8:	6028      	str	r0, [r5, #0]
 8007bca:	0635      	lsls	r5, r6, #24
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	d501      	bpl.n	8007bd4 <_printf_i+0x1cc>
 8007bd0:	6019      	str	r1, [r3, #0]
 8007bd2:	e002      	b.n	8007bda <_printf_i+0x1d2>
 8007bd4:	0670      	lsls	r0, r6, #25
 8007bd6:	d5fb      	bpl.n	8007bd0 <_printf_i+0x1c8>
 8007bd8:	8019      	strh	r1, [r3, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	4615      	mov	r5, r2
 8007be0:	e7ba      	b.n	8007b58 <_printf_i+0x150>
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	602a      	str	r2, [r5, #0]
 8007be8:	681d      	ldr	r5, [r3, #0]
 8007bea:	6862      	ldr	r2, [r4, #4]
 8007bec:	2100      	movs	r1, #0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7f8 faf6 	bl	80001e0 <memchr>
 8007bf4:	b108      	cbz	r0, 8007bfa <_printf_i+0x1f2>
 8007bf6:	1b40      	subs	r0, r0, r5
 8007bf8:	6060      	str	r0, [r4, #4]
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c04:	e7a8      	b.n	8007b58 <_printf_i+0x150>
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	462a      	mov	r2, r5
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	47d0      	blx	sl
 8007c10:	3001      	adds	r0, #1
 8007c12:	d0ab      	beq.n	8007b6c <_printf_i+0x164>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	079b      	lsls	r3, r3, #30
 8007c18:	d413      	bmi.n	8007c42 <_printf_i+0x23a>
 8007c1a:	68e0      	ldr	r0, [r4, #12]
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	bfb8      	it	lt
 8007c22:	4618      	movlt	r0, r3
 8007c24:	e7a4      	b.n	8007b70 <_printf_i+0x168>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4632      	mov	r2, r6
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	47d0      	blx	sl
 8007c30:	3001      	adds	r0, #1
 8007c32:	d09b      	beq.n	8007b6c <_printf_i+0x164>
 8007c34:	3501      	adds	r5, #1
 8007c36:	68e3      	ldr	r3, [r4, #12]
 8007c38:	9903      	ldr	r1, [sp, #12]
 8007c3a:	1a5b      	subs	r3, r3, r1
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	dcf2      	bgt.n	8007c26 <_printf_i+0x21e>
 8007c40:	e7eb      	b.n	8007c1a <_printf_i+0x212>
 8007c42:	2500      	movs	r5, #0
 8007c44:	f104 0619 	add.w	r6, r4, #25
 8007c48:	e7f5      	b.n	8007c36 <_printf_i+0x22e>
 8007c4a:	bf00      	nop
 8007c4c:	080081d5 	.word	0x080081d5
 8007c50:	080081e6 	.word	0x080081e6

08007c54 <_read_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d07      	ldr	r5, [pc, #28]	; (8007c74 <_read_r+0x20>)
 8007c58:	4604      	mov	r4, r0
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	602a      	str	r2, [r5, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f7f9 fc92 	bl	800158c <_read>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_read_r+0x1e>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_read_r+0x1e>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	200044e8 	.word	0x200044e8

08007c78 <__swbuf_r>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	460e      	mov	r6, r1
 8007c7c:	4614      	mov	r4, r2
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b118      	cbz	r0, 8007c8a <__swbuf_r+0x12>
 8007c82:	6983      	ldr	r3, [r0, #24]
 8007c84:	b90b      	cbnz	r3, 8007c8a <__swbuf_r+0x12>
 8007c86:	f7ff f831 	bl	8006cec <__sinit>
 8007c8a:	4b21      	ldr	r3, [pc, #132]	; (8007d10 <__swbuf_r+0x98>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	d12b      	bne.n	8007ce8 <__swbuf_r+0x70>
 8007c90:	686c      	ldr	r4, [r5, #4]
 8007c92:	69a3      	ldr	r3, [r4, #24]
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	071a      	lsls	r2, r3, #28
 8007c9a:	d52f      	bpl.n	8007cfc <__swbuf_r+0x84>
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	b36b      	cbz	r3, 8007cfc <__swbuf_r+0x84>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	1ac0      	subs	r0, r0, r3
 8007ca6:	6963      	ldr	r3, [r4, #20]
 8007ca8:	b2f6      	uxtb	r6, r6
 8007caa:	4283      	cmp	r3, r0
 8007cac:	4637      	mov	r7, r6
 8007cae:	dc04      	bgt.n	8007cba <__swbuf_r+0x42>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7ff fade 	bl	8007274 <_fflush_r>
 8007cb8:	bb30      	cbnz	r0, 8007d08 <__swbuf_r+0x90>
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	60a3      	str	r3, [r4, #8]
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	6022      	str	r2, [r4, #0]
 8007cc6:	701e      	strb	r6, [r3, #0]
 8007cc8:	6963      	ldr	r3, [r4, #20]
 8007cca:	3001      	adds	r0, #1
 8007ccc:	4283      	cmp	r3, r0
 8007cce:	d004      	beq.n	8007cda <__swbuf_r+0x62>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	07db      	lsls	r3, r3, #31
 8007cd4:	d506      	bpl.n	8007ce4 <__swbuf_r+0x6c>
 8007cd6:	2e0a      	cmp	r6, #10
 8007cd8:	d104      	bne.n	8007ce4 <__swbuf_r+0x6c>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7ff fac9 	bl	8007274 <_fflush_r>
 8007ce2:	b988      	cbnz	r0, 8007d08 <__swbuf_r+0x90>
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <__swbuf_r+0x9c>)
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d101      	bne.n	8007cf2 <__swbuf_r+0x7a>
 8007cee:	68ac      	ldr	r4, [r5, #8]
 8007cf0:	e7cf      	b.n	8007c92 <__swbuf_r+0x1a>
 8007cf2:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <__swbuf_r+0xa0>)
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	bf08      	it	eq
 8007cf8:	68ec      	ldreq	r4, [r5, #12]
 8007cfa:	e7ca      	b.n	8007c92 <__swbuf_r+0x1a>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 f80c 	bl	8007d1c <__swsetup_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d0cb      	beq.n	8007ca0 <__swbuf_r+0x28>
 8007d08:	f04f 37ff 	mov.w	r7, #4294967295
 8007d0c:	e7ea      	b.n	8007ce4 <__swbuf_r+0x6c>
 8007d0e:	bf00      	nop
 8007d10:	08008180 	.word	0x08008180
 8007d14:	080081a0 	.word	0x080081a0
 8007d18:	08008160 	.word	0x08008160

08007d1c <__swsetup_r>:
 8007d1c:	4b32      	ldr	r3, [pc, #200]	; (8007de8 <__swsetup_r+0xcc>)
 8007d1e:	b570      	push	{r4, r5, r6, lr}
 8007d20:	681d      	ldr	r5, [r3, #0]
 8007d22:	4606      	mov	r6, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	b125      	cbz	r5, 8007d32 <__swsetup_r+0x16>
 8007d28:	69ab      	ldr	r3, [r5, #24]
 8007d2a:	b913      	cbnz	r3, 8007d32 <__swsetup_r+0x16>
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f7fe ffdd 	bl	8006cec <__sinit>
 8007d32:	4b2e      	ldr	r3, [pc, #184]	; (8007dec <__swsetup_r+0xd0>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d10f      	bne.n	8007d58 <__swsetup_r+0x3c>
 8007d38:	686c      	ldr	r4, [r5, #4]
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d40:	0719      	lsls	r1, r3, #28
 8007d42:	d42c      	bmi.n	8007d9e <__swsetup_r+0x82>
 8007d44:	06dd      	lsls	r5, r3, #27
 8007d46:	d411      	bmi.n	8007d6c <__swsetup_r+0x50>
 8007d48:	2309      	movs	r3, #9
 8007d4a:	6033      	str	r3, [r6, #0]
 8007d4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	f04f 30ff 	mov.w	r0, #4294967295
 8007d56:	e03e      	b.n	8007dd6 <__swsetup_r+0xba>
 8007d58:	4b25      	ldr	r3, [pc, #148]	; (8007df0 <__swsetup_r+0xd4>)
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d101      	bne.n	8007d62 <__swsetup_r+0x46>
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	e7eb      	b.n	8007d3a <__swsetup_r+0x1e>
 8007d62:	4b24      	ldr	r3, [pc, #144]	; (8007df4 <__swsetup_r+0xd8>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	bf08      	it	eq
 8007d68:	68ec      	ldreq	r4, [r5, #12]
 8007d6a:	e7e6      	b.n	8007d3a <__swsetup_r+0x1e>
 8007d6c:	0758      	lsls	r0, r3, #29
 8007d6e:	d512      	bpl.n	8007d96 <__swsetup_r+0x7a>
 8007d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d72:	b141      	cbz	r1, 8007d86 <__swsetup_r+0x6a>
 8007d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d002      	beq.n	8007d82 <__swsetup_r+0x66>
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff fad3 	bl	8007328 <_free_r>
 8007d82:	2300      	movs	r3, #0
 8007d84:	6363      	str	r3, [r4, #52]	; 0x34
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6063      	str	r3, [r4, #4]
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	f043 0308 	orr.w	r3, r3, #8
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	b94b      	cbnz	r3, 8007db6 <__swsetup_r+0x9a>
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dac:	d003      	beq.n	8007db6 <__swsetup_r+0x9a>
 8007dae:	4621      	mov	r1, r4
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 f847 	bl	8007e44 <__smakebuf_r>
 8007db6:	89a0      	ldrh	r0, [r4, #12]
 8007db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dbc:	f010 0301 	ands.w	r3, r0, #1
 8007dc0:	d00a      	beq.n	8007dd8 <__swsetup_r+0xbc>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	6963      	ldr	r3, [r4, #20]
 8007dc8:	425b      	negs	r3, r3
 8007dca:	61a3      	str	r3, [r4, #24]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	b943      	cbnz	r3, 8007de2 <__swsetup_r+0xc6>
 8007dd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dd4:	d1ba      	bne.n	8007d4c <__swsetup_r+0x30>
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
 8007dd8:	0781      	lsls	r1, r0, #30
 8007dda:	bf58      	it	pl
 8007ddc:	6963      	ldrpl	r3, [r4, #20]
 8007dde:	60a3      	str	r3, [r4, #8]
 8007de0:	e7f4      	b.n	8007dcc <__swsetup_r+0xb0>
 8007de2:	2000      	movs	r0, #0
 8007de4:	e7f7      	b.n	8007dd6 <__swsetup_r+0xba>
 8007de6:	bf00      	nop
 8007de8:	20000018 	.word	0x20000018
 8007dec:	08008180 	.word	0x08008180
 8007df0:	080081a0 	.word	0x080081a0
 8007df4:	08008160 	.word	0x08008160

08007df8 <__swhatbuf_r>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	460e      	mov	r6, r1
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	2900      	cmp	r1, #0
 8007e02:	b096      	sub	sp, #88	; 0x58
 8007e04:	4614      	mov	r4, r2
 8007e06:	461d      	mov	r5, r3
 8007e08:	da08      	bge.n	8007e1c <__swhatbuf_r+0x24>
 8007e0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	602a      	str	r2, [r5, #0]
 8007e12:	061a      	lsls	r2, r3, #24
 8007e14:	d410      	bmi.n	8007e38 <__swhatbuf_r+0x40>
 8007e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e1a:	e00e      	b.n	8007e3a <__swhatbuf_r+0x42>
 8007e1c:	466a      	mov	r2, sp
 8007e1e:	f000 f89b 	bl	8007f58 <_fstat_r>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	dbf1      	blt.n	8007e0a <__swhatbuf_r+0x12>
 8007e26:	9a01      	ldr	r2, [sp, #4]
 8007e28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e30:	425a      	negs	r2, r3
 8007e32:	415a      	adcs	r2, r3
 8007e34:	602a      	str	r2, [r5, #0]
 8007e36:	e7ee      	b.n	8007e16 <__swhatbuf_r+0x1e>
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	b016      	add	sp, #88	; 0x58
 8007e40:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e44 <__smakebuf_r>:
 8007e44:	898b      	ldrh	r3, [r1, #12]
 8007e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e48:	079d      	lsls	r5, r3, #30
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	d507      	bpl.n	8007e60 <__smakebuf_r+0x1c>
 8007e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	6163      	str	r3, [r4, #20]
 8007e5c:	b002      	add	sp, #8
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	ab01      	add	r3, sp, #4
 8007e62:	466a      	mov	r2, sp
 8007e64:	f7ff ffc8 	bl	8007df8 <__swhatbuf_r>
 8007e68:	9900      	ldr	r1, [sp, #0]
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff f839 	bl	8006ee4 <_malloc_r>
 8007e72:	b948      	cbnz	r0, 8007e88 <__smakebuf_r+0x44>
 8007e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e78:	059a      	lsls	r2, r3, #22
 8007e7a:	d4ef      	bmi.n	8007e5c <__smakebuf_r+0x18>
 8007e7c:	f023 0303 	bic.w	r3, r3, #3
 8007e80:	f043 0302 	orr.w	r3, r3, #2
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	e7e3      	b.n	8007e50 <__smakebuf_r+0xc>
 8007e88:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <__smakebuf_r+0x7c>)
 8007e8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	6020      	str	r0, [r4, #0]
 8007e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	9b00      	ldr	r3, [sp, #0]
 8007e98:	6163      	str	r3, [r4, #20]
 8007e9a:	9b01      	ldr	r3, [sp, #4]
 8007e9c:	6120      	str	r0, [r4, #16]
 8007e9e:	b15b      	cbz	r3, 8007eb8 <__smakebuf_r+0x74>
 8007ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 f869 	bl	8007f7c <_isatty_r>
 8007eaa:	b128      	cbz	r0, 8007eb8 <__smakebuf_r+0x74>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f023 0303 	bic.w	r3, r3, #3
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	89a0      	ldrh	r0, [r4, #12]
 8007eba:	4305      	orrs	r5, r0
 8007ebc:	81a5      	strh	r5, [r4, #12]
 8007ebe:	e7cd      	b.n	8007e5c <__smakebuf_r+0x18>
 8007ec0:	08006c85 	.word	0x08006c85

08007ec4 <memmove>:
 8007ec4:	4288      	cmp	r0, r1
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	eb01 0402 	add.w	r4, r1, r2
 8007ecc:	d902      	bls.n	8007ed4 <memmove+0x10>
 8007ece:	4284      	cmp	r4, r0
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	d807      	bhi.n	8007ee4 <memmove+0x20>
 8007ed4:	1e43      	subs	r3, r0, #1
 8007ed6:	42a1      	cmp	r1, r4
 8007ed8:	d008      	beq.n	8007eec <memmove+0x28>
 8007eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ee2:	e7f8      	b.n	8007ed6 <memmove+0x12>
 8007ee4:	4402      	add	r2, r0
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	428a      	cmp	r2, r1
 8007eea:	d100      	bne.n	8007eee <memmove+0x2a>
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ef6:	e7f7      	b.n	8007ee8 <memmove+0x24>

08007ef8 <_realloc_r>:
 8007ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efc:	4680      	mov	r8, r0
 8007efe:	4614      	mov	r4, r2
 8007f00:	460e      	mov	r6, r1
 8007f02:	b921      	cbnz	r1, 8007f0e <_realloc_r+0x16>
 8007f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f08:	4611      	mov	r1, r2
 8007f0a:	f7fe bfeb 	b.w	8006ee4 <_malloc_r>
 8007f0e:	b92a      	cbnz	r2, 8007f1c <_realloc_r+0x24>
 8007f10:	f7ff fa0a 	bl	8007328 <_free_r>
 8007f14:	4625      	mov	r5, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1c:	f000 f83e 	bl	8007f9c <_malloc_usable_size_r>
 8007f20:	4284      	cmp	r4, r0
 8007f22:	4607      	mov	r7, r0
 8007f24:	d802      	bhi.n	8007f2c <_realloc_r+0x34>
 8007f26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f2a:	d812      	bhi.n	8007f52 <_realloc_r+0x5a>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7fe ffd8 	bl	8006ee4 <_malloc_r>
 8007f34:	4605      	mov	r5, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0ed      	beq.n	8007f16 <_realloc_r+0x1e>
 8007f3a:	42bc      	cmp	r4, r7
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	4631      	mov	r1, r6
 8007f40:	bf28      	it	cs
 8007f42:	463a      	movcs	r2, r7
 8007f44:	f7fe ff97 	bl	8006e76 <memcpy>
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	f7ff f9ec 	bl	8007328 <_free_r>
 8007f50:	e7e1      	b.n	8007f16 <_realloc_r+0x1e>
 8007f52:	4635      	mov	r5, r6
 8007f54:	e7df      	b.n	8007f16 <_realloc_r+0x1e>
	...

08007f58 <_fstat_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	; (8007f78 <_fstat_r+0x20>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	602b      	str	r3, [r5, #0]
 8007f66:	f7f9 fb56 	bl	8001616 <_fstat>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	d102      	bne.n	8007f74 <_fstat_r+0x1c>
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	b103      	cbz	r3, 8007f74 <_fstat_r+0x1c>
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
 8007f76:	bf00      	nop
 8007f78:	200044e8 	.word	0x200044e8

08007f7c <_isatty_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	; (8007f98 <_isatty_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f9 fb55 	bl	8001636 <_isatty>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_isatty_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_isatty_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	200044e8 	.word	0x200044e8

08007f9c <_malloc_usable_size_r>:
 8007f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa0:	1f18      	subs	r0, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfbc      	itt	lt
 8007fa6:	580b      	ldrlt	r3, [r1, r0]
 8007fa8:	18c0      	addlt	r0, r0, r3
 8007faa:	4770      	bx	lr

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
